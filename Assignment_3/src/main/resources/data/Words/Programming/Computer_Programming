computer programming from wikipedia free encyclopedia   redirected from computer programming jump navigation search software development process core activities requirements design construction testing debugging deployment maintenance paradigms models software engineering waterfall prototyping incremental v-model dual vee model spiral iid agile lean devops methodologies frameworks cleanroom tsp psp rad dsdm msf scrum kanban up xp tdd atdd bdd fdd ddd mdd supporting disciplines configuration management infrastructure code documentation software quality assurance sqa project management user experience tools compiler debugger profiler gui designer modeling ide build automation release automation testing standards boks cmmi ieee standards iso iso/iec standards swebok pmbok babok v t e computer programming often shortened programming process that leads from original formulation computing problem executable computer programs programming involves activities such analysis developing understanding generating algorithms verification requirements algorithms including their correctness resources consumption implementation commonly referred coding algorithms target programming language source code written one more programming languages purpose programming find sequence instructions that will automate performing specific task solving given problem process programming thus often requires expertise many different subjects including knowledge application domain specialized algorithms formal logic related tasks include testing debugging maintaining source code implementation build system management derived artifacts such machine code computer programs these might be considered part programming process but often term software development used for this larger process with term programming implementation coding reserved for actual writing source code software engineering combines engineering techniques with software development practices contents overview history modern programming o quality requirements o readability source code o algorithmic complexity o methodologies o measuring language usage o debugging programming languages programmers see also references further reading external links overview within software engineering programming implementation regarded one phase software development process there ongoing debate on extent which writing programs art form craft engineering discipline general good programming considered be measured application all three with goal producing efficient evolvable software solution criteria for efficient evolvable vary considerably discipline differs from many other technical professions that programmers general do not need be licensed pass any standardized governmentally regulated certification tests order call themselves programmers even software engineers because discipline covers many areas which may may not include critical applications debatable whether licensing required for profession whole most cases discipline self-governed by entities which require programming sometimes very strict environments are defined eg united states air force use adacore security clearance however representing oneself professional software engineer without license from accredited institution illegal many parts world another ongoing debate extent which programming language used writing computer programs affects form that final program takes this debate analogous that surrounding sapir–whorf hypothesis linguistics cognitive science which postulates that particular spoken language's nature influences habitual thought its speakers different language patterns yield different patterns thought this idea challenges possibility representing world perfectly with language because acknowledges that mechanisms any language condition thoughts its speaker community history see also history programming languages ada lovelace commenting on work luigi menabrea created first algorithm designed for processing by analytical engine often recognized history's first computer programmer ancient cultures seemed have no conception computing beyond arithmetic algebra geometry occasionally devising computational systems with elements calculus eg method exhaustion only mechanical device that existed for numerical computation at beginning human history was abacus invented sumeria circa bc later antikythera mechanism invented some time around bc ancient greece first known mechanical calculator utilizing gears various sizes configuration perform calculations which tracked metonic cycle still used lunar-to-solar calendars which consistent for calculating dates olympiads medieval scientist al-jazari built programmable automata ad one system employed these devices was use pegs cams placed into wooden drum at specific locations which would sequentially trigger levers that turn operated percussion instruments output this device was small drummer playing various rhythms drum patterns jacquard loom which joseph marie jacquard developed uses series pasteboard cards with holes punched them hole pattern represented pattern that loom had follow weaving cloth loom could produce entirely different weaves using different sets cards charles babbage adopted use punched cards around control his analytical engine mathematician ada lovelace friend babbage between translated article by italian military engineer luigi menabrea on engine which she supplemented with set notes simply called notes these notes include algorithm calculate sequence bernoulli numbers intended be carried out by machine despite controversy over scope her contribution many consider this algorithm be first computer program data instructions were once stored on external punched cards which were kept order arranged program decks 1880s herman hollerith invented recording data on medium that could then be read by machine prior uses machine readable media above had been for lists instructions not data drive programmed machines such jacquard looms mechanized musical instruments after some initial trials with paper tape he settled on punched cards process these punched cards first known hollerith cards he invented keypunch sorter tabulator unit record machines these inventions were foundation data processing industry he founded tabulating machine company which later became core ibm addition control panel plugboard his type i tabulator allowed do different jobs without having be physically rebuilt by late 1940s there were several unit record calculators such ibm ibm whose control panels specified sequence list operations thus were programmable machines invention von neumann architecture allowed computer programs be stored computer memory early programs had be painstakingly crafted using instructions elementary operations particular machine often binary notation every model computer would likely use different instructions machine language do same task later assembly languages were developed that let programmer specify each instruction text format entering abbreviations for each operation code instead number specifying addresses symbolic form eg add x total entering program assembly language usually more convenient faster less prone human error than using machine language but because assembly language little more than different notation for machine language any two machines with different instruction sets also have different assembly languages wired control panel for ibm accounting machine synthesis numerical calculation predetermined operation output along with way organize input instructions manner relatively easy for humans conceive produce led modern development computer programming fortran was invented was first widely used high level programming language have functional implementation opposed just design on paper high-level language very general terms any programming language that allows programmer write programs terms that are more abstract than assembly language instructions ie at level abstraction higher than that assembly language allowed programmers specify calculations by entering formula directly eg y = x2 + 5x + program text source converted into machine instructions using special program called compiler which translates fortran program into machine language fact name fortran stands for formula translation many other languages were developed including some for commercial programming such cobol programs were mostly still entered using punched cards paper tape see computer programming punch card era by late 1960s data storage devices computer terminals became inexpensive enough that programs could be created by typing directly into computers text editors were developed that allowed changes corrections be made much more easily than with punched cards usually error punching card meant that card had be discarded new one punched replace time has progressed computers have made giant leaps processing power which have allowed development programming languages that are more abstracted from underlying hardware popular programming languages modern era include actionscript c c++ c haskell java javascript objective-c perl php python ruby smalltalk sql visual basic dozens more although these high-level languages usually incur greater overhead increase speed modern computers has made use these languages much more practical than past these increasingly abstracted languages are typically easier learn allow programmer develop applications much more efficiently with less source code however high-level languages are still impractical for few programs such those where low-level hardware control necessary where maximum processing speed vital computer programming has become popular career developed world particularly united states europe japan due high labor cost programmers these countries some forms programming have been increasingly subject outsourcing importing software services from other countries usually at lower wage making programming career decisions developed countries more complicated while increasing economic opportunities for programmers less developed areas particularly china india modern programming this section relies largely entirely upon single source relevant discussion may be found on talk page please help improve this article by introducing citations additional sources august quality requirements whatever approach development may be final program must satisfy some fundamental properties following properties are among most important reliability how often results program are correct this depends on conceptual correctness algorithms minimization programming mistakes such mistakes resource management eg buffer overflows race conditions logic errors such division by zero off-by-one errors robustness how well program anticipates problems due errors not bugs this includes situations such incorrect inappropriate corrupt data unavailability needed resources such memory operating system services network connections user error unexpected power outages usability ergonomics program ease with which person can use program for its intended purpose some cases even unanticipated purposes such issues can make break its success even regardless other issues this involves wide range textual graphical sometimes hardware elements that improve clarity intuitiveness cohesiveness completeness program's user interface portability range computer hardware operating system platforms on which source code program can be compiled/ interpreted run this depends on differences programming facilities provided by different platforms including hardware operating system resources expected behavior hardware operating system availability platform specific compilers sometimes libraries for language source code maintainability ease with which program can be modified by its present future developers order make improvements customizations fix bugs security holes adapt new environments good practices during initial development make difference this regard this quality may not be directly apparent end user but can significantly affect fate program over long term efficiency/performance measure system resources program consumes processor time memory space slow devices such disks network bandwidth some extent even user interaction less better this also includes careful management resources for example cleaning up temporary files eliminating memory leaks readability source code computer programming readability refers ease with which human reader can comprehend purpose control flow operation source code affects aspects quality above including portability usability most importantly maintainability readability important because programmers spend majority their time reading trying understand modifying existing source code rather than writing new source code unreadable code often leads bugs inefficiencies duplicated code study found that few simple readability transformations made code shorter drastically reduced time understand following consistent programming style often helps readability however readability more than just programming style many factors having little nothing do with ability computer efficiently compile execute code contribute readability some these factors include different indent styles whitespace comments decomposition naming conventions for objects such variables classes procedures etc presentation aspects this such indents line breaks color highlighting so on are often handled by source code editor but content aspects reflect programmer's talent skills various visual programming languages have also been developed with intent resolve readability concerns by adopting non-traditional approaches code structure display integrated development environments ides aim integrate all such help techniques like code refactoring can enhance readability algorithmic complexity academic field engineering practice computer programming are both largely concerned with discovering implementing most efficient algorithms for given class problem for this purpose algorithms are classified into orders using so-called big o notation which expresses resource use such execution time memory consumption terms size input expert programmers are familiar with variety well-established algorithms their respective complexities use this knowledge choose algorithms that are best suited circumstances methodologies first step most formal software development processes requirements analysis followed by testing determine value modeling implementation failure elimination debugging there exist lot differing approaches for each those tasks one approach popular for requirements analysis use case analysis many programmers use forms agile software development where various stages formal software development are more integrated together into short cycles that take few weeks rather than years there are many approaches software development process popular modeling techniques include object-oriented analysis design ooad model-driven architecture mda unified modeling language uml notation used for both ooad mda similar technique used for database design entity-relationship modeling er modeling implementation techniques include imperative languages object-oriented procedural functional languages logic languages measuring language usage main article measuring programming language popularity very difficult determine what are most popular modern programming languages methods measuring programming language popularity include counting number job advertisements that mention language number books sold courses teaching language this overestimates importance newer languages estimates number existing lines code written language this underestimates number users business languages such cobol some languages are very popular for particular kinds applications while some languages are regularly used write many different kinds applications for example cobol still strong corporate data centers often on large mainframe computers fortran engineering applications scripting languages web development c embedded software many applications use mix several languages their construction use new languages are generally designed around syntax prior language with new functionality added for example c++ adds object-orientation c java adds memory management bytecode c++ but result loses efficiency ability for low-level manipulation debugging bug from which at origin popular but incorrect etymology for common term for software defect main article debugging debugging very important task software development process since having defects program can have significant consequences for its users some languages are more prone some kinds faults because their specification does not require compilers perform much checking other languages use static code analysis tool can help detect some possible problems debugging often done with ides like eclipse visual studio kdevelop netbeans codeblocks standalone debuggers like gdb are also used these often provide less visual environment usually using command line programming languages main articles programming language list programming languages different programming languages support different styles programming called programming paradigms choice language used subject many considerations such company policy suitability task availability third-party packages individual preference ideally programming language best suited for task at hand will be selected trade-offs from this ideal involve finding enough programmers who know language build team availability compilers for that language efficiency with which programs written given language execute languages form approximate spectrum from low-level high-level low-level languages are typically more machine-oriented faster execute whereas high-level languages are more abstract easier use but execute less quickly usually easier code high-level languages than low-level ones allen downey his book how think like computer scientist writes details look different different languages but few basic instructions appear just about every language input gather data from keyboard file some other device output display data on screen send data file other device arithmetic perform basic arithmetical operations like addition multiplication conditional execution check for certain conditions execute appropriate sequence statements repetition perform some action repeatedly usually with some variation many computer languages provide mechanism call functions provided by shared libraries provided functions library follow appropriate run time conventions eg method passing arguments then these functions may be written any other language programmers main article programmer see also software developer software engineer computer programmers are those who write computer software their jobs usually involve coding debugging documentation integration maintenance requirements analysis software architecture software testing specification see also book programming computer science portal computing portal computer networking portal computer programming portal main article outline computer programming accu association for computing machinery computer networking hello world program institution analysts programmers system programming art computer programming references shaun bebbington what coding retrieved shaun bebbington what programming retrieved paul graham hackers painters retrieved kenneth e iverson originator apl programming language believed that sapir–whorf hypothesis applied computer languages without actually mentioning hypothesis by name his turing award lecture notation tool thought was devoted this theme arguing that more powerful notations aided thinking about computer algorithms iverson ke communications acm 444-465 august ancient greek computer's inner workings deciphered national geographic news november freeth tony jones alexander steele john m bitsakis yanis july calendars with olympiad display eclipse prediction on antikythera mechanism nature 614–617 doi101038/nature07130 pmid fowler charles b october museum music history mechanical instruments music educators journal music educators journal vol no 45–49 doi102307/3391092 jstor b sketch analytical engine with notes upon memoir by translator switzerland fourmilabch retrieved march fuegi j francis j lovelace & babbage creation 'notes' ieee annals history computing doi101109/mahc20031253887 columbia university computing history - herman hollerith columbiaedu retrieved us census bureau hollerith machine fortran creator john backus dies - tech gadgets- msnbccom msnbc retrieved csc-302 99s class brief history programming languages mathgrinedu retrieved ritchie s king top programming languages retrieved programming tips become good programmer - wisdom geek wisdom geek retrieved james l elshoff michael marcotty improving computer program readability aid modification communications acm v25 n8 p512-521 aug multiple wiki readability docforge retrieved survey job advertisements mentioning given language mitchell robert cobol brain drain computer world retrieved may further reading ak hartmann practical guide computer simulations singapore world scientific hunt d thomas w cunningham pragmatic programmer from journeyman master amsterdam addison-wesley longman brian w kernighan practice programming pearson weinberg gerald m psychology computer programming new york van nostrand reinhold edsger w dijkstra discipline programming prentice-hall o-j dahl ewdijkstra car hoare structured pogramming academic press david gries science programming springer-verlag external links wikibooks has book on topic computer programming wikibooks has book on topic windows programming library resources about computer programming ------------------------------------------------------------------------ online books resources your library resources other libraries media related programming at wikimedia commons quotations related programming at wikiquote learning materials related programming at wikiversity software engineering at dmoz v t e major fields computer science note this template roughly follows acm computing classification hardware printed circuit board peripheral integrated circuit very-large-scale integration energy consumption electronic design automation computer systems organization computer architecture embedded system real-time computing dependability networks network architecture network protocol network components network scheduler network performance evaluation network service software organization interpreter middleware virtual machine operating system software quality software notations tools programming paradigm programming language compiler domain-specific language modeling language software framework integrated development environment software configuration management software library software repository software development software development process requirements analysis software design software construction software deployment software maintenance programming team open-source model theory computation model computation formal language automata theory computational complexity theory logic semantics algorithms algorithm design analysis algorithms randomized algorithm computational geometry mathematics computing discrete mathematics probability statistics mathematical software information theory mathematical analysis numerical analysis information systems database management system information storage systems enterprise information system social information systems geographic information system decision support system process control system multimedia information system data mining digital library computing platform digital marketing world wide web information retrieval security cryptography formal methods security services intrusion detection system hardware security network security information security application security human–computer interaction interaction design social computing ubiquitous computing visualization accessibility concurrency concurrent computing parallel computing distributed computing multithreading multiprocessing artificial intelligence natural language processing knowledge representation reasoning computer vision automated planning scheduling search methodology control method philosophy artificial intelligence distributed artificial intelligence machine learning supervised learning unsupervised learning reinforcement learning multi-task learning machine learning algorithms cross-validation graphics animation rendering image manipulation graphics processing unit mixed reality virtual reality image compression solid modeling applied computing e-commerce enterprise software computational mathematics computational physics computational chemistry computational biology computational social science computational engineering computational healthcare digital art electronic publishing cyberwarfare electronic voting video game word processing operations research educational technology document management computer science portal v t e software engineering fields computer programming requirements engineering software deployment software design software maintenance software testing systems analysis formal methods concepts data modeling enterprise architecture functional specification modeling language orthogonality programming paradigm software software archaeology software architecture software configuration management software development methodology software development process software quality software quality assurance software verification validation structured analysis orientations agile aspect-oriented object orientation ontology service orientation sdlc models developmental agile eup executable uml incremental model iterative model prototype model rad up scrum spiral model v-model waterfall model xp other spice cmmi data model er model function model information model metamodeling object model systems model view model languages idef uml sysml software engineers victor basili kent beck grady booch fred brooks barry boehm ward cunningham tom demarco edsger w dijkstra martin fowler c r hoare watts humphrey michael jackson ivar jacobson stephen j mellor bertrand meyer david parnas winston w royce james rumbaugh niklaus wirth edward yourdon mohamed fayad related fields computer science computer engineering project management risk management systems engineering category commons authority control lccn sh85107310 gnd 4076370-5 bnf cb11932648m data ndl retrieved from https//enwikipediaorg/w/indexphptitle=computerprogramming&oldid=751686919 categories computer programming computers hidden categories all articles with dead external links articles with dead external links from november all articles with unsourced statements articles with unsourced statements from december articles needing additional references from august all articles needing additional references commons category with local link different than on wikidata articles with dmoz links wikipedia articles with lccn identifiers wikipedia articles with gnd identifiers wikipedia articles with bnf identifiers navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version other projects wikimedia commons wikibooks wikiquote wikiversity languages afrikaans العربية aragonés asturianu azərbaycanca বাংলা беларуская беларуская тарашкевіца‎ български bosanski català čeština dansk deutsch eesti ελληνικά español esperanto euskara فارسی français galego 한국어 հայերեն हिन्दी hrvatski bahasa indonesia italiano עברית ಕನ್ನಡ қазақша latina latviešu lietuvių la lojban magyar македонски മലയാളം مصرى bahasa melayu монгол nederlands 日本語 norsk bokmål norsk nynorsk occitan олык марий oʻzbekcha/ўзбекча پنجابی ភាសាខ្មែរ polski português română русский scots shqip simple english slovenčina slovenščina српски / srpski srpskohrvatski / српскохрватски suomi svenska தமிழ் ไทย türkçe türkmençe ᨅᨔ ᨕᨘᨁᨗ українська اردو tiếng việt ייִדיש zazaki 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 