low-level programming language from wikipedia free encyclopedia jump navigation search this article needs additional citations for verification please help improve this article by adding citations reliable sources unsourced material may be challenged removed july learn how when remove this template message computer science low-level programming language programming language that provides little no abstraction from computer's instruction set architecture—commands functions language map closely processor instructions generally this refers either machine code assembly language word low refers small nonexistent amount abstraction between language machine language because this low-level languages are sometimes described being close hardware programs written low-level languages tend be relatively non-portable mainly because close relationship between language hardware architecture low-level languages can convert machine code without compiler interpreter— second-generation programming languages use simpler processor called assembler— resulting code runs directly on processor program written low-level language can be made run very quickly with small memory footprint equivalent program high-level language can be less efficient use more memory low-level languages are simple but considered difficult use due numerous technical details that programmer must remember by comparison high-level programming language isolates execution semantics computer architecture from specification program which simplifies development low-level programming languages are sometimes divided into two categories first generation second generation contents machine code assembly low-level programming high-level languages mixed level language instrinsics references machine code front panel pdp-8/e minicomputer row switches at bottom can be used toggle machine language program machine code only language computer can process directly without previous transformation currently programmers almost never write programs directly machine code because requires attention numerous details that high-level language handles automatically furthermore requires memorizing looking up numerical codes for every instruction extremely difficult modify true machine code stream raw usually binary data programmer coding machine code normally codes instructions data more readable form such decimal octal hexadecimal which translated internal format by program called loader toggled into computer's memory from front panel although few programs are written machine language programmers often become adept at reading through working with core dumps debugging from front panel example function hexadecimal representation 32-bit x86 machine code calculate nth fibonacci number 8b542408 83fa0077 06b80000 0000c383 fa027706 b8010000 00c353bb b9010000 008d0419 83fa0376 078bd989 c14aebf1 5bc3 assembly second-generation languages provide one abstraction level on top machine code early days coding on computers like tx-0 pdp-1 first thing mit hackers did was write assemblers assembly language has little semantics formal specification being only mapping human-readable symbols including symbolic addresses opcodes addresses numeric constants strings so on typically one machine instruction represented one line assembly code assemblers produce object files that can link with other object files be loaded on their own most assemblers provide macros generate common sequences instructions example same fibonacci number calculator above but x86 assembly language using masm syntax fib mov edx cmp edx ja @f mov eax ret @@ cmp edx ja @f mov eax ret @@ push ebx mov ebx mov ecx @@ lea eax cmp edx jbe @f mov ebx ecx mov ecx eax dec edx jmp @b @@ pop ebx ret this code example hardware features x86 processor its registers are named manipulated directly function loads its input from precise location stack bytes higher than location stored esp stack pointer performs its calculation by manipulating values eax ebx ecx edx registers until has finished returns note that this assembly language there no concept returning value result having been stored eax register ret command simply moves code processing code location stored on stack usually instruction immediately after one that called this function up author calling code know that this function stores its result eax retrieve from there x86 assembly language imposes no standard for returning values from function so fact has no concept function up calling code examine state after procedure returns if needs extract value compare this with same function c unsigned int fibunsigned int n { if n categories programming language classification hidden categories pages using isbn magic links articles needing additional references from july all articles needing additional references navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages العربية català čeština ελληνικά español فارسی français gaeilge 한국어 hrvatski italiano עברית ქართული kurdî latviešu lumbaart magyar македонски монгол 日本語 norsk bokmål олык марий polski português русский slovenščina српски / srpski srpskohrvatski / српскохрватски svenska ไทย türkçe українська tiếng việt 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 