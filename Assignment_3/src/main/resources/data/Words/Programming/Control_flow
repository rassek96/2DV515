control flow from wikipedia free encyclopedia jump navigation search not be confused with flow control data lead section this article may need be rewritten please discuss this issue on article's talk page use lead layout guide ensure section follows wikipedia's norms be inclusive all essential details july learn how when remove this template message computer science control flow alternatively flow control order which individual statements instructions function calls imperative program are executed evaluated emphasis on explicit control flow distinguishes imperative programming language from declarative programming language within imperative programming language control flow statement statement whose execution results choice being made which two more paths should be followed for non-strict functional languages functions language constructs exist achieve same result but they are not necessarily called control flow statements set statements turn generally structured block which addition grouping also defines lexical scope interrupts signals are low-level mechanisms that can alter flow control way similar subroutine but usually occur response some external stimulus event that can occur asynchronously rather than execution 'in-line' control flow statement at level machine assembly language control flow instructions usually work by altering program counter for some cpus only control flow instructions available are conditional unconditional branch instructions also called jumps contents categories primitives o labels o goto o subroutines o sequence minimal structured control flow control structures practice choice o if-then-else statements o case switch statements loops o count-controlled loops o condition-controlled loops o collection-controlled loops o general iteration o infinite loops o continuation with next iteration o redo current iteration o restart loop o early exit from loops o loop variants invariants o loop sublanguage o loop system cross-reference table structured non-local control flow o conditions o exceptions o continuations o async o generators o coroutines o non-local control flow cross reference proposed control structures o loop with test middle o multiple early exit/exit from nested loops security see also references external links categories flow chart showing control flow kinds control flow statements supported by different languages vary but can be categorized by their effect continuation at different statement unconditional branch jump executing set statements only if some condition met choice - ie conditional branch executing set statements zero more times until some condition met ie loop - same conditional branch executing set distant statements after which flow control usually returns subroutines coroutines continuations stopping program preventing any further execution unconditional halt primitives labels main article label computer science label explicit name number assigned fixed position within source code which may be referenced by control flow statements appearing elsewhere source code other than marking position within source code label has no effect line numbers are alternative named label used some languages such fortran basic that are whole numbers placed at beginning each line text within source code languages which use these often impose constraint that line numbers must increase value each subsequent line but may not require that they be consecutive for example basic let x = print x other languages such c ada label identifier usually appearing at beginning line immediately followed by colon for example c success printfthe operation was successful\n algol language allowed both whole numbers identifiers labels both attached by colons following statement but few if any other variants algol allowed whole numbers goto main article goto goto statement combination english words go pronounced accordingly most basic form unconditional transfer control although keyword may either be upper lower case depending on language usually written goto label effect goto statement cause next statement be executed be statement appearing at immediately after indicated label goto statements have been considered harmful by many computer scientists notably dijkstra subroutines main article subroutine terminology for subroutines varies they may alternatively be known routines procedures functions especially if they return results methods especially if they belong classes type classes 1950s computer memories were very small by current standards so subroutines were used primarily reduce program size piece code was written once then used many times from various other places program nowadays subroutines are more frequently used help make program that more structured eg by isolating some particular algorithm hiding some particular data access method if many programmers are working on single program subroutines are one kind modularity that can help split up work sequence main article structured programming structured programming ordered sequencing successive commands considered one basic control structures which used building block for programs alongside iteration recursion choice minimal structured control flow see also structured program theorem may böhm jacopini published article communications acm which showed that any program with gotos could be transformed into goto-free form involving only choice if then else loops while condition do xxx possibly with duplicated code and/or addition boolean variables true/false flags later authors have shown that choice can be replaced by loops yet more boolean variables fact that such minimalism possible does not necessarily mean that desirable after all computers theoretically only need one machine instruction subtract one number from another branch if result negative but practical computers have dozens even hundreds machine instructions what böhm jacopini's article showed was that all programs could be goto-free other research showed that control structures with one entry one exit were much easier understand than any other form primarily because they could be used anywhere statement without disrupting control flow other words they were composable later developments such non-strict programming languages - more recently composable software transactions - have continued this line thought making components programs even more freely composable some academics took purist approach böhm-jacopini result argued that even instructions like break return from middle loops are bad practice they are not needed böhm-jacopini proof thus they advocated that all loops should have single exit point this purist approach embodied pascal programming language designed 1968–1969 which up mid-1990s was preferred tool for teaching introductory programming academia direct application böhm-jacopini theorem may result additional local variables being introduced structured chart may also result some code duplication latter issue called loop half problem this context pascal affected by both these problems according empirical studies cited by eric s roberts student programmers had difficulty formulating correct solutions pascal for several simple problems including writing function for searching element array study by henry shapiro cited by roberts found that using only pascal-provided control structures correct solution was given by only 20% subjects while no subject wrote incorrect code for this problem if allowed write return from middle loop control structures practice most programming languages with control structures have initial keyword which indicates type control structure involved languages then divide whether not control structures have final keyword no final keyword algol c c++ haskell java pascal perl php pl/i python powershell such languages need some way grouping statements together o algol pascal begin end o c c++ java perl php powershell curly brackets { } o pl/1 do end o python uses indentation level see off-side rule o haskell either indentation level curly brackets can be used they can be freely mixed o lua uses do end final keyword ada algol modula-2 fortran mythryl visual basic forms final keyword vary o ada final keyword end + space + initial keyword eg if end if loop end loop o algol mythryl initial keyword spelled backwards eg if fi case esac o fortran final keyword end + initial keyword eg if endif do enddo o modula-2 same final keyword end for everything o visual basic every control structure has its own keyword if end if for next do loop while wend choice if-then-else statements main article conditional programming conditional expressions conditional constructs are features programming language which perform different computations actions depending on whether programmer-specified boolean condition evaluates true false ifgoto form found unstructured languages mimicking typical machine code instruction would jump goto label line number when condition was met ifthenendif rather than being restricted jump any simple statement nested block could follow then key keyword this structured form ifthenelseendif above but with second action be performed if condition false this one most common forms with many variations some require terminal endif others do not c related languages do not require terminal keyword 'then' but do require parentheses around condition conditional statements can be often are nested inside other conditional statements some languages allow else if be combined into elseif avoiding need have series endif other final statements at end compound statement pascal ada c shell script python lisp if > then writelnyes else writelnno if > then putlineyes else putlineno end if if > { printfyes } else { printfno } if then echo yes else echo no fi if > print yes else print no princ if plusp yes no less common variations include some languages such fortran have three-way arithmetic if testing whether numeric value positive negative zero some languages have functional form if statement for instance lisp's cond some languages have operator form if statement such c's ternary operator perl supplements c-style if with when unless smalltalk uses iftrue iffalse messages implement conditionals rather than any fundamental language construct less common variations include case switch statements main article switch statement switch statements case statements multiway branches compare given value with specified constants take action according first constant match there usually provision for default action else otherwise be taken if no match succeeds switch statements can allow compiler optimizations such lookup tables dynamic languages cases may not be limited constant expressions might extend pattern matching shell script example on right where implements default case glob matching any string case logic can also be implemented functional form sql's decode statement pascal ada c shell script lisp case somechar 'a' actionona 'x' actiononx 'y''z'actiononyandz else actiononnomatch end case somechar when 'a' => actionona when 'x' => actiononx when 'y' | 'z' => actiononyandz when others => actiononnomatch end switch somechar { case 'a' actionona break case 'x' actiononx break case 'y' case 'z' actiononyandz break default actiononnomatch } case $somechar actionona x actiononx actiononyandz actiononnomatch esac case somechar \a actionona \x actiononx \y \z actiononyandz else actiononnomatch loops loop sequence statements which specified once but which may be carried out several times succession code inside loop body loop shown below xxx obeyed specified number times once for each collection items until some condition met indefinitely functional programming languages such haskell scheme loops can be expressed by using recursion fixed point iteration rather than explicit looping constructs tail recursion special case recursion which can be easily transformed iteration count-controlled loops main article for loop most programming languages have constructions for repeating loop certain number times note that if n less than these examples then language may specify that body skipped completely that body executed just once with n = most cases counting can go downwards instead upwards step sizes other than can be used for i = n | for i = n do begin xxx | xxx next i | end ------------------------------------------------------------ do i = 1n | for i=1 i current-zipcode displaytallycurrent-zipcode zipcount current-zipcode = new-zipcode zipcount = endif zipcount++ loop collection-controlled loops main article foreach several programming languages eg ada d smalltalk php perl object pascal java c matlab mythryl visual basic ruby python javascript fortran later have special constructs which allow implicitly looping through all elements array all members set collection somecollection do for item collection do begin xxx end foreach item mycollection { xxx } foreach somearray { xxx } foreach $somearray $k => $v { xxx } collection coll for string s coll {} foreach string s mystringcollection { xxx } $somecollection | foreach-object { $ } forall index = firstlaststep scala has for-expressions which generalise collection-controlled loops also support other uses such asynchronous programming haskell has do-expressions comprehensions which together provide similar functionality for-expressions scala general iteration general iteration constructs such c's for statement common lisp's do form can be used express any above sorts loops well others—such looping over number collections parallel where more specific looping construct can be used usually preferred over general iteration construct since often makes purpose expression more clear infinite loops main article infinite loop infinite loops are used assure program segment loops forever until exceptional condition arises such error for instance event-driven program such server should loop forever handling events they occur only stopping when process terminated by operator infinite loops can be implemented using other control flow constructs most commonly unstructured programming this jump back up goto while structured programming this indefinite loop while loop set never end either by omitting condition explicitly setting true while true some languages have special constructs for infinite loops typically by omitting condition from indefinite loop examples include ada loop end loop fortran do end do go for { } ruby loop do end often infinite loop unintentionally created by programming error condition-controlled loop wherein loop condition uses variables that never change within loop continuation with next iteration sometimes within body loop there desire skip remainder loop body continue with next iteration loop some languages provide statement such continue most languages skip next perl ruby which will do this effect prematurely terminate innermost loop body then resume normal with next iteration if iteration last one loop effect terminate entire loop early redo current iteration some languages like perl ruby have redo statement that restarts current iteration from beginning restart loop ruby has retry statement that restarts entire loop from initial iteration early exit from loops when using count-controlled loop search through table might be desirable stop searching soon required item found some programming languages provide statement such break most languages exit last perl whose effect terminate current loop immediately transfer control statement immediately following that loop following example done ada which supports both early exit from loops loops with test middle both features are very similar comparing both code snippets will show difference early exit needs be combined with if statement while condition middle self-contained construct with adatext io with adainteger text io procedure printsquares x integer begin readdata loop adainteger text iogetx exit readdata when x = adatext ioput x x adatext ionewline end loop readdata end printsquares python supports conditional execution code depending on whether loop was exited early with break statement not by using else-clause with loop for example for n setofnumbers if isprimen print set contains prime number break else print set did not contain any prime numbers note that else clause above example attached for statement not inner if statement both python's for while loops support such else clause which executed only if early exit loop has not occurred some languages support breaking out nested loops theory circles these are called multi-level breaks one common usage example searching multi-dimensional table this can be done either via multilevel breaks break out n levels bash php via labeled breaks break out continue at given label java perl alternatives multilevel breaks include single breaks together with state variable which tested break out another level exceptions which are caught at level being broken out placing nested loops function using return effect termination entire nested loop using label goto statement c does not include multilevel break usual alternative use goto implement labeled break python does not have multilevel break continue – this was proposed pep rejected on basis that added complexity was not worth rare legitimate use notion multi-level breaks some interest theoretical computer science because gives rise what nowadays called kosaraju hierarchy s rao kosaraju refined structured program theorem by proving that it's possible avoid adding additional variables structured programming long arbitrary-depth multi-level breaks from loops are allowed furthermore kosaraju proved that strict hierarchy programs exists for every integer n there exists program containing multi-level break depth n that cannot be rewritten program with multi-level breaks depth less than n without introducing additional variables one can also return out subroutine executing looped statements breaking out both nested loop subroutine there are other proposed control structures for multiple breaks but these are generally implemented exceptions instead his textbook david watt uses tennent's notion sequencer explain similarity between multi-level breaks return statements watt notes that class sequencers known escape sequencers defined sequencer that terminates execution textually enclosing command procedure encompasses both breaks from loops including multi-level breaks return statements commonly implemented however return sequencers may also carry return value whereas break sequencer implemented contemporary languages usually cannot loop variants invariants loop variants loop invariants are used express correctness loops practical terms loop variant integer expression which has initial non-negative value variant's value must decrease during each loop iteration but must never become negative during correct execution loop loop variants are used guarantee that loops will terminate loop invariant assertion which must be true before first loop iteration remain true after each iteration this implies that when loop terminates correctly both exit condition loop invariant are satisfied loop invariants are used monitor specific properties loop during successive iterations some programming languages such eiffel contain native support for loop variants invariants other cases support add-on such java modeling language's specification for loop statements java loop sublanguage some lisp dialects are providing extensive sublanguage for describing loops early example can be found conversional lisp interlisp common lisp provides loop macro which implements such sublanguage loop system cross-reference table has been suggested that this article be split into new article titled comparison programming languages control flow discuss may programming language conditional loop early exit continuation redo retry correctness facilities begin middle end count collection general infinite variant invariant ada yes yes yes yes arrays no yes deep nested no c yes no yes no no yes no deep nested deep nested no c++ yes no yes no yes yes no deep nested deep nested no c yes no yes no yes yes no deep nested deep nested cobol yes no yes yes no yes no deep nested deep nested no common lisp yes yes yes yes builtin only yes yes deep nested no d yes no yes yes yes yes yes deep nested deep nested no eiffel yes no no yes yes yes no one level no no no integer only yes f yes no no yes yes no no no no no fortran yes no no yes no no no one level yes fortran yes no no yes no no yes deep nested yes fortran later yes no no yes arrays no yes deep nested yes haskell no no no no yes no yes no no no java yes no yes no yes yes no deep nested deep nested no non-native non-native javascript yes no yes no yes yes no deep nested deep nested no natural yes yes yes yes no yes yes yes yes yes no ocaml yes no no yes arrayslists no no no no no php yes no yes no yes yes no deep nested deep nested no perl yes no yes no yes yes no deep nested deep nested yes python yes no no no yes no no deep nested deep nested no rebol no yes yes yes yes no yes one level no no ruby yes no yes yes yes no yes deep nested deep nested yes yes standard ml yes no no no arrayslists no no no no no visual basic net yes no yes yes yes no yes one level per type loop one level per type loop windows powershell yes no yes no yes yes no yes while true does not count infinite loop for this purpose because not dedicated language structure b c d e f g h c's for init test increment loop general loop construct not specifically counting one although often used for that b c deep breaks may be accomplished c c++ c through use labels gotos iteration over objects was added php b c counting loop can be simulated by iterating over incrementing list generator for instance python's range b c d e deep breaks may be accomplished through use exception handling there no special construct since while function can be used for this there no special construct but users can define general loop functions c++11 standard introduced range-based for stl there stdforeach template function which can iterate on stl containers call unary function for each element functionality also can be constructed macro on these containers count-controlled looping effected by iteration across integer interval early exit by including additional condition for exit eiffel supports reserved word retry however used exception handling not loop control requires java modeling language jml behavioral interface specification language requires loop variants be integers transfinite variants are not supported d supports infinite collections ability iterate over those collections this does not require any special construct deep breaks can be achieved using go procedures common lisp predates concept generic collection type structured non-local control flow many programming languages particularly those which favor more dynamic styles programming offer constructs for non-local control flow these cause flow execution jump out given context resume at some predeclared point conditions exceptions continuations are three common sorts non-local control constructs more exotic ones also exist such generators coroutines async keyword conditions pl/i has some standard conditions eg zerodivide subscriptrange endfile which can be raised which can be intercepted by on condition action programmers can also define use their own named conditions like unstructured if only one statement can be specified so many cases goto needed decide where flow control should resume unfortunately some implementations had substantial overhead both space time especially subscriptrange so many programmers tried avoid using conditions common syntax examples on condition goto label exceptions main article exception handling modern languages have specialized structured construct for exception handling which does not rely on use goto multi-level breaks returns for example c++ one can write try { xxx1 // somewhere here xxx2 // use '''throw''' somevalue xxx3 } catch someclass& someid { // catch value someclass actionforsomeclass } catch sometype& anotherid { // catch value sometype actionforsometype } catch { // catch anything not already caught actionforanythingelse } any number variety catch clauses can be used above if there no catch matching particular throw control percolates back through subroutine calls and/or nested blocks until matching catch found until end main program reached at which point program forcibly stopped with suitable error message owing c++'s influence catch keyword reserved for declaring pattern-matching exception handler other languages popular today like java c some other languages like ada use keyword exception introduce exception handler then may even employ different keyword when ada for pattern matching few languages like applescript incorporate placeholders exception handler syntax for automatically extracting several pieces information when exception occurs this approach exemplified below by on error construct from applescript try set mynumber mynumber / on error e number n from f t partial result pr if e = can't divide by zero then display dialog you must not do that end try david watt's textbook also analyzes exception handling framework sequencers introduced this article section on early exits from loops watt notes that abnormal situation generally exemplified with arithmetic overflows input/output failures like file not found kind error that detected some low-level program unit but handler more naturally located high-level program unit for example program might contain several calls read files but action perform when file not found depends on meaning purpose file question program thus handling routine for this abnormal situation cannot be located low-level system code watts further notes that introducing status flags testing caller single-exit structured programming even multi-exit return sequencers would entail results situation where application code tends get cluttered by tests status flags that programmer might forgetfully lazily omit test status flag fact abnormal situations represented by status flags are by default ignored watt notes that contrast status flags testing exceptions have opposite default behavior causing program terminate unless programmer explicitly deals with exception some way possibly by adding code willfully ignore based on these arguments watt concludes that jump sequencers escape sequencers aren't suitable dedicated exception sequencer with semantics discussed above object pascal d java c python finally clause can be added try construct no matter how control leaves try code inside finally clause guaranteed execute this useful when writing code that must relinquish expensive resource such opened file database connection when finished processing filestream stm = null // c example try { stm = new filestream logfiletxt filemodecreate return processstuffstm // may throw exception } finally { if stm = null stmclose } since this pattern fairly common c has special syntax using filestream stm = new filestream logfiletxt filemodecreate { return processstuffstm // may throw exception } upon leaving using-block compiler guarantees that stm object released effectively binding variable file stream while abstracting from side effects initializing releasing file python's with statement ruby's block argument fileopen are used similar effect all languages mentioned above define standard exceptions circumstances under which they are thrown users can throw exceptions their own fact c++ allows users throw catch almost any type including basic types like int whereas other languages like java aren't permissive continuations main article continuation async c introduced async keyword for supporting asynchronous i/o direct style generators generators also known semicoroutines allow control be yielded consumer method temporarily typically using yield keyword like async keyword this supports programming direct style coroutines coroutines are functions that can yield control each other - form co-operative multitasking without threads coroutines can be implemented library if programming language provides either continuations generators - so distinction between coroutines generators practice technical detail non-local control flow cross reference programming language conditions exceptions generators/coroutines async ada no yes c no no no no c++ no yes yes by using boost c no yes yes yes cobol yes yes no no common lisp yes no d no yes yes eiffel no yes erlang no yes yes f no yes yes yes go no yes yes haskell no yes yes no java no yes no no objective-c no yes no php no yes yes pl/i yes no no no python no yes yes rebol yes yes no ruby no yes yes scala no yes no via experimental extension tcl via traces yes yes via event loop visual basic net yes yes no windows powershell no yes no proposed control structures spoof datamation article r lawrence clark suggested that goto statement could be replaced by comefrom statement provides some entertaining examples this was actually implemented intercal deliberately esoteric programming language his article structured programming with go statements donald knuth identified two situations which were not covered by control structures listed above gave examples control structures which could handle these situations despite their utility these constructions have not yet found their way into mainstream programming languages loop with test middle following was proposed by dahl loop loop xxx1 readchar while test while not atendoffile xxx2 writechar repeat repeat if xxx1 omitted we get loop with test at top if xxx2 omitted we get loop with test at bottom if while omitted we get infinite loop hence this single construction can replace several constructions most programming languages possible variant allow more than one while test within loop but use exitwhen see next section appears cover this case better languages lacking this construct generally emulate using equivalent infinite-loop-with-break idiom while true { xxx1 if not test break xxx2 } ada above loop construct loop-while-repeat can be represented using standard infinite loop loop - end loop that has exit when clause middle not be confused with exitwhen statement following section with adatextio with adaintegertextio procedure printsquares x integer begin readdata loop adaintegertextiogetx exit readdata when x = adatext ioput x x adatext ionewline end loop readdata end printsquares naming loop like readdata this example optional but permits leaving outer loop several nested loops multiple early exit/exit from nested loops this was proposed by zahn modified version presented here exitwhen eventa eventb eventc xxx exits eventa actiona eventb actionb eventc actionc endexit exitwhen used specify events which may occur within xxx their occurrence indicated by using name event statement when some event does occur relevant action carried out then control passes just after endexit this construction provides very clear separation between determining that some situation applies action be taken for that situation exitwhen conceptually similar exception handling exceptions similar constructs are used for this purpose many languages following simple example involves searching two-dimensional table for particular item exitwhen found missing for i = n do for j = m do if table = target then found missing exits found print item table missing print item not table endexit security one way attack piece software redirect flow execution program variety control-flow integrity techniques including stack canaries buffer overflow protection shadow stacks vtable pointer verification are used defend against these attacks see also branch computer science control flow diagram control flow graph control table coroutine cyclomatic complexity flowchart goto jeroo helps learn control structures main loop recursion scheduling spaghetti code structured programming subroutine switch statement alters control flow conditionally references böhm jacopini flow diagrams turing machines languages with only two formation rules comm acm 95366-371 may b roberts e “loop exits structured programming reopening debate ” acm sigcse bulletin 268–272 david anthony watt william findlay programming language design concepts john wiley & sons p isbn 978-0-470-85320-7 kenneth c louden kenneth lambert programming languages principles practices ed cengage learning pp 422–423 isbn 1-111-52941-8 ada programming control endless loop advanced bash scripting guide loop control php manual break perldoc last complangc faq list · question 2020b announcing pep guido van rossum b kozen dexter böhm–jacopini theorem false propositionally lecture notes computer science 177–192 doi 101007/978-3-540-70594-911 kosaraju s rao analysis structured programs proc fifth annual acm syrup theory computing may 240-252 also j computer system sciences december cited by donald knuth structured programming with go statements computing surveys 261–301 doi101145/356635356640 david anthony watt william findlay programming language design concepts john wiley & sons pp 215–221 isbn 978-0-470-85320-7 meyer bertrand eiffel language prentice hall pp 129–131 common lisp loop macro foreach sgicom retrieved on chapter boostforeach boost-sandboxsourceforgenet retrieved on david anthony watt william findlay programming language design concepts john wiley & sons pp 221–222 isbn 978-0-470-85320-7 we don't know where goto if we don't know where we've come from this spoof linguistic innovation lives up all expectations by r lawrence clark from datamation december knuth donald e structured programming with go statements acm computing surveys 64261-301 december dahl & dijkstra & hoare structured programming academic press zahn c t control statement for natural top-down structured programming presented at symposium on programming languages paris payer mathias kuznetsov volodymyr on differences between cfi cps cpi properties nebelweltnet retrieved adobe flash bug discovery leads new attack mitigation method dark reading retrieved endgame endgame present at black hat usa wwwprnewswirecom retrieved hoare c r partition algorithm quicksort algorithm find algorithm comm acm 321-322 external links wikibook ada programming has page on topic control wikibook computer programming has page on topic control go statement considered harmful linguistic contribution goto-less programming structured programming with go statements pdf mb ibm manual pdf mb retrieved from https//enwikipediaorg/w/indexphptitle=controlflow&oldid=749993784 categories control flow hidden categories wikipedia introduction cleanup from july all pages needing cleanup articles covered by wikiproject wikify from july all articles covered by wikiproject wikify all articles with unsourced statements articles with unsourced statements from may articles with unsourced statements from july wikipedia articles needing clarification from november articles be split from may all articles be split articles with example ada code navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages العربية català čeština deutsch español français 한국어 hrvatski íslenska italiano עברית қазақша nederlands 日本語 polski português русский српски / srpski தமிழ் українська اردو 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 