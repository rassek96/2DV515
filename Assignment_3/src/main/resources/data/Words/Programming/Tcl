tcl from wikipedia free encyclopedia jump navigation search for other uses see tcl disambiguation tcl paradigm multi-paradigm object-oriented functional procedural event-driven programming imperative designed by john ousterhout developer tcl core team first appeared years ago stable release / july months ago typing discipline dynamic typing everything can be treated string license bsd-style filename extensions tcl tbc website wwwtcltk major implementations activetcl influenced by awk lisp influenced php tea powershell tcl pronounced tickle tee cee ell /ˈtiː siː ɛl/ high-level general-purpose interpreted dynamic programming language was designed with goal being very simple but powerful tcl casts everything into mold command even programming constructs like variable assignment procedure definition tcl supports multiple programming paradigms including object-oriented imperative functional programming procedural styles commonly used embedded into c applications for rapid prototyping scripted applications guis testing tcl interpreters are available for many operating systems allowing tcl code run on wide variety systems because tcl very compact language used on embedded systems platforms both its full form several other small-footprint versions popular combination tcl with tk extension referred tcl/tk enables building graphical user interface gui natively tcl tcl/tk included standard python installation form tkinter contents history features o safe-tcl syntax fundamental semantics o basic commands o advanced commands o uplevel o upvar o object-oriented interfacing with other languages o module files extension packages see also references further reading external links history tcl programming language was created spring by john ousterhout while working at university california berkeley originally born out frustration according author with programmers devising their own languages intended be embedded into applications tcl gained acceptance on its own john ousterhout was awarded acm software system award for tcl/tk name originally comes from tool command language but conventionally spelled tcl rather than tcl date event january tcl announced beyond berkeley winter usenix june expect announced summer usenix january first announcement tk winter usenix june first tcl/tk conference berkeley geometry manager forerunner tcldp groupkit announced there august tcl introduced bytecode compiler april tcl introduces full unicode support advanced regular expressions august tcl introduces tcl extension architecture tea august tcl core team formed moving tcl more community-oriented development model september ninth tcl/tk conference vancouver announcement starkit packaging system tcl released december tcl added new datatypes new extension repository bignums lambdas december tcl added built-in dynamic object system tcloo stackless evaluation tcl conferences workshops are held both united states europe features tcl's features include all operations are commands including language structures they are written prefix notation commands are commonly variadic everything can be dynamically redefined overridden actually there are no keywords so even control structures can be added changed although this not advisable all data types can be manipulated strings including source code internally variables have types like integer double but converting purely automatic variables are not declared but assigned use non-defined variable results error fully dynamic class-based object system tcloo including advanced features such meta-classes filters mixins event-driven interface sockets files time-based user-defined events are also possible variable visibility restricted lexical static scope by default but uplevel upvar allowing procs interact with enclosing functions' scopes all commands defined by tcl itself generate error messages on incorrect usage extensibility via c c++ java tcl interpreted language using bytecode full unicode support first released regular expressions that became de facto regex standard referred perl/tcl cross-platform windows api unix linux macintosh etc close cross-platform integration with windowing gui interface tk multiple distribution mechanisms exist o full development version eg activestate tcl o tclkit single file executable containing complete scripting runtime only about megabytes size o starkit wrapping mechanism for delivering application self-contained installation-free highly portable way o starpack combine starkit with tclkit produce starpack - single platform specific executable file ideal for easy deployment o jim interpreter small footprint tcl implementation o freely distributable source code under bsd license safe-tcl safe-tcl subset tcl that has restricted features so that tcl scripts cannot harm their hosting machine application file system access limited arbitrary system commands are prevented from execution uses dual interpreter model with untrusted interpreter running code untrusted script was designed by nathaniel borenstein marshall rose include active messages e-mail safe-tcl can be included e-mail when application/safe-tcl multipart/enabled-mail are supported functionality safe-tcl has since been incorporated part standard tcl/tk releases syntax fundamental semantics syntax semantics are covered by twelve rules dodecalogue alternative wording tcl script consists several command invocations command invocation list words separated by whitespace terminated by newline semicolon word0 word1 word2 wordn first word name command which not built into language but which library following words are arguments so we have commandname argument1 argument2 argumentn example using puts command display string on host console puts hello world this sends string hello world 'stdout' device with appended newline character variables results other commands can be substituted inside strings too such this example where we use set expr no assignment operator = store calculation result variable puts short for put string print result together with some explanatory text expr evaluates text string expression set sum puts sum numbers $sum with curly braces variable substitution delayed until call time dynamic scoping set x set sum $x not substituted expression preserved puts sum numbers $sum substituted for $x expression evaluated without curly braces variable substitution occurs at definition site lexical scoping set x set op set y set res $x $op $y are substituted expression evaluated puts $res substituted for $res there one basic construct command set simple substitution rules formally words are either written as-is with double-quotes around them allowing whitespace characters be embedded with curly-brace characters around them which suppresses all substitutions inside except for backslash-newline elimination bare double-quoted words three types substitution occur once single left-to-right scan through word command substitution replaces contents balanced square brackets with result evaluating script contained inside for example “” replaced with result evaluating contained expression ie since that's what expr command does variable substitution replaces dollar-sign followed by name variable with contents variable for example “$foo” replaced with contents variable called “foo” variable name may be surrounded curly braces so delimit what isn't variable name otherwise ambiguous cases backslash substitution replaces backslash followed by letter with another character for example “\n” replaced with newline from tcl onwards any word may be prefixed by “{}” cause that word be split apart into its constituent sub-words for purposes building command invocation similar “@” sequence lisp's quasiquote feature consequence these rules result any command may be used argument any other command also there no operator command for string concatenation language concatenates directly note that unlike unix command shells tcl does not reparse any string unless explicitly directed do so which makes interactive use more cumbersome but scripted use more predictable eg presence spaces filenames does not cause difficulties single equality sign = for example not used at all double equality sign == test for equality even then only expression contexts such expr command first argument if both those commands are just part standard library they have no particularly special place library can be replaced if so desired majority tcl commands especially standard library are variadic proc constructor for scripted command procedures allows one define default values for unspecified arguments catch-all argument allow code process arbitrary numbers arguments tcl not statically typed each variable may contain integers floats strings lists command names dictionaries any other value values are reinterpreted subject syntactic constraints other types on demand however values are immutable operations that appear change them actually just return new value instead basic commands most important commands that refer program execution data operations are set writes new value variable creates variable if did not exist if used only with one argument returns value given variable must exist this case proc defines new command which's execution results executing given tcl script written set commands return can be used immediately return control caller usual execution control commands are if executes given script body second argument if condition first argument satisfied can be followed by additional arguments starting from elseif with alternative condition body else with complementary block while repeats executing given script body long condition first argument remains satisfied foreach executes given body where control variable assigned list elements one by one for shortcut for initializing control variable condition while additional next iteration statement command executed after executing body those above looping commands can be additionally controlled by following commands break interrupts body execution returns from looping command continue interrupts body execution but control still given back looping command for while means loop again for for foreach pick up next iteration return interrupts execution current body no matter how deep inside procedure until reaching procedure boundary returns given value caller advanced commands expr passes argument separate expression interpreter returns evaluated value note that same interpreter used also for conditional expression for if looping commands list creates list comprising all arguments empty string if no argument specified lindex command may be used on result re-extract original arguments array manipulates array variables regexp matches regular expression against string uplevel command that allows command script be executed scope other than current innermost scope on stack upvar creates link variable different stack frame namespace lets you create access destroy separate contexts for commands variables try lets you trap process errors exceptions catch lets you trap exceptional returns uplevel uplevel allows command script be executed scope other than current innermost scope on stack because command script may itself call procedures that use uplevel command this has net effect transforming call stack into call tree was originally implemented permit tcl procedures reimplement built-in commands like for if while still have ability manipulate local variables for example following tcl script reimplementation for command omitting exception handling proc for {initcmd testexpr advancecmd bodyscript} { uplevel $initcmd set testcmd while {} { uplevel $bodyscript uplevel $advancecmd } } upvar upvar arranges for one more local variables current procedure refer variables enclosing procedure call global variables upvar command simplifies implementation call-by-name procedure calling also makes easier build new control constructs tcl procedures decr command that works like built-in incr command except subtracts value from variable instead adding proc decr {varname {decrement 1}} { upvar $varname var incr var } object-oriented see also object-oriented programming tcl added built-in dynamic object system tcloo includes features such class-based object system this what most programmers expect from oo allows per-object customization dynamic redefinition classes meta-classes filters mixins system for implementing methods custom ways so that package authors that want significantly different ways doing method implementation may do so fairly simply ooclass create fruit { method eat {} { puts yummy } } ooclass create banana { superclass fruit constructor {} { my variable peeled set peeled } method peel {} { my variable peeled set peeled puts skin now off } method edible {} { my variable peeled return $peeled } method eat {} { if {} { my peel } next } } set b $b eat → prints skin now off yummy fruit destroy $b eat → error unknown command tcl did not have object oriented oo syntax until so various extension packages emerged enable object-oriented programming they are wide spread existing tcl source code popular such extensions include incr tcl xotcl itk snit stooop tcloo was not only added build strong object oriented system but also enable extension packages build object oriented abstractions using foundation after release tcloo incr tcl was updated use tcloo its foundation interfacing with other languages tcl interfaces natively with c language this because was originally written be framework for providing syntactic front-end commands written c all commands language including things that might otherwise be keywords such if while are implemented this way each command implementation function passed array values that describe already substituted arguments command free interpret those values sees fit digital logic simulators often include tcl scripting interface for simulating verilog vhdl systemverilog hardware languages tools exist eg swig ffidl automatically generate necessary code connect arbitrary c functions tcl runtime critcl does reverse allowing embedding arbitrary c code inside tcl script compiling at runtime into dll see also tcl/java module files environment modules are written tcl tool command language are interpreted by modulecmd program via module user interface environment modules provides set extensions standard tcl package including setenv unsetenv append-path prepend-path set-alias more defined modulefiles man page which along with built-in functionality tcl provides rich environment for handling setting defaults initializing into environment extension packages tcl language has always allowed for extension packages which provide additional functionality such gui terminal-based application automation database access so on commonly used extensions include tk most popular tcl extension tk toolkit which provides graphical user interface library for variety operating systems each gui consists one more frames each frame has layout manager expect one other very popular tcl extensions expect extension early close relationship expect with tcl largely responsible for popularity tcl prolific areas use such unix testing where expect was still today employed very successfully automate telnet ssh serial sessions perform many repetitive tasks ie scripting formerly interactive-only applications tcl was only way run expect so tcl became very popular these areas industry tile/ttk tile/ttk styles theming widget collection that can replace most widgets tk with variants that are truly platform native through calls operating system's api themes covered this way are windows xp windows classic qt that hooks into x11 kde environment libraries aqua mac os x theme can also be constructed without these calls using widget definitions supplemented with image pixmaps themes created this way include classic tk step alt/revitalized plastik keramik under tcl this package known tile while tcl has been folded into core distribution tk ttk tix tix tk interface extension set user interface components that expand capabilities tcl/tk python applications open source software package maintained by volunteers tix project group released under bsd-style license itcl/incrtcl itcl object system for tcl normally named that being way increment tcl similar fashion name c++ tcllib tcllib set scripted packages for tcl that can be used with no compilation steps tklib tklib collection utility modules for tk companion tcllib tcludp tcludp extension provides simple library support user datagram protocol udp sockets tcl databases tcl database connectivity tdbc part tcl common database access interface for tcl scripts currently supports drivers for accessing mysql odbc postgresql sqlite databases more are planned for future access databases also supported through database-specific extensions which there are many available see also computer programming portal eggdrop expect tclx tkdesk comparison tcl integrated development environments comparison programming languages list programming languages environment modules references b tcl/tk core development tcl developer xchange retrieved latest release tcl/tk jul tcl developer xchange retrieved tcl/tk license terms tcl developer xchange retrieved tcl dev kit - compiler activestate docs retrieved lerdorf rasmus php on hormones – history php presentation by rasmus lerdorf given at mysql conference santa clara california conversations network retrieved windows powershell powershell wpf wtf language tcl developer xchange retrieved tcl fundamentals chapter practical programming tcl tk isbn 0-13-038560-3 b from inside flap tcl tk toolkit isbn 0-201-63337-x uses for tcl/tk tcl developer xchange retrieved cisco ios scripting with tcl configuration guide cisco support retrieved john ousterhout history tcl personal pages stanford university retrieved history tcl tcl developer xchange retrieved john k ousterhout - award winner acm awards retrieved from tcler's wiki tcl vs tcl tcl/tk release announcement tcl developer xchange retrieved tcl/tk release announcement tcl developer xchange retrieved b new regular expression features tcl tcl developer xchange retrieved tcl/tk release announcement tcl developer xchange retrieved tcl/tk release announcement tcl developer xchange retrieved tip arbitrary-precision integers for tcl tcl developer xchange retrieved tip tip procedures values via apply tcl developer xchange retrieved tcl/tk release announcement tcl developer xchange retrieved b tcl/tk release announcement tcl developer xchange retrieved tcl/tk conferences tcl developer xchange retrieved b c tip object orientation for tcl tcl developer xchange retrieved download tcl/tk sources tcl developer xchange retrieved safe tcl tcl developer xchange retrieved brown lawrie september 18–20 mobile code security terry bossomaier lucy chubb proceedings 2nd joint conference auug '96 asia-pacific www '96 melbourne australia p retrieved cs1 maint uses editors parameter link welch brent b jones ken hobbs jeffrey practical programming tcl tk 4th ed prentice hall ptr p isbn 0-13-038560-3 tcl manual page - tcl built-in commands tcl developer xchange retrieved dodekalogue tcler's wiki retrieved uplevel manual page - built-in commands tcl developer xchange retrieved upvar manual page - built-in commands tcl developer xchange retrieved tcl c api tcltk retrieved module - command interface modules package sourceforge man page july retrieved february modulefile - files containing tcl code for modules package sourceforge man page july retrieved february tile improved themeing engine for tk sourceforge retrieved august tix license sourceforge retrieved august tcludp tcl'ers wiki retrieved august tdbc tcl'ers wiki retrieved august further reading ousterhout john k jones ken tcl tk toolkit 2nd ed addison wesley isbn 978-0-321-33633-0 retrieved november foster-johnson eric graphical applications with tcl & tk 2nd ed new york ny m&t books isbn 1-55851-569-0 retrieved november brent b welch practical programming tcl tk prentice hall upper saddle river nj usa isbn 0-13-038560-3 j adrian zimmer tcl/tk for programmers ieee computer society distributed by john wiley sons isbn 0-8186-8515-8 mark harrison michael mclennan effective tcl/tk programming addison-wesley reading ma usa isbn 0-201-63474-0 bert wheeler tcl/tk programming cookbook packt publishing birmingham england uk isbn wojciech kocjan piotr beltowski tcl network programming packt publishing isbn clif flynt tcl/tk third edition developer’s guide isbn external links wikibooks has book on topic tcl programming wikimedia commons has media related tcl programming language family official website tcl sources main tcl tk source code download website tcler's wiki tkdocs v t e programming languages comparison timeline history assembly basic c c++ c cobol fortran go haskell java javascript js lisp lua objective-c pascal perl php python ruby shell smalltalk swift visual basic net vbnet more category comparison lists o alphabetical o categorical o generational o non-english-based v t e free open-source software general alternative terms for free software comparison open-source closed-source software comparison source code hosting facilities free software free software project directories gratis versus libre long-term support open-source software open-source software development outline software packages audio bioinformatics codecs collaboration configuration management device drivers o graphics o wireless geophysics health mathematics operating systems programming languages routing statistics television video games web applications o content management systems o e-commerce word processors android apps ios apps commercial trademarked formerly proprietary community free software movement history open-source software movement organizations events licenses apache apsl artistic beerware boost bsd cc0 cddl epl gnu gpl gnu lgpl isc mit mpl ms-pl/rl wtfpl zlib license types standards comparison free open-source software licenses contributor license agreement copyfree copyleft debian free software guidelines definition free cultural works free license free software definition open source definition open-source license permissive free software licence public domain viral license challenges binary blob digital rights management hardware restrictions license proliferation mozilla software rebranding proprietary software sco/linux controversies secure boot software patents software security trusted computing related topics cathedral bazaar forking microsoft open specification promise revolution os book category commons portal authority control gnd 4361529-6 retrieved from https//enwikipediaorg/w/indexphptitle=tcl&oldid=751407495 categories american inventions cross-platform software dynamically typed programming languages free compilers interpreters high-level programming languages programming languages created object-oriented programming languages procedural programming languages scripting languages tcl programming language family text-oriented programming languages hidden categories cs1 maint uses editors parameter pages using isbn magic links pages using deprecated image syntax commons category with local link same on wikidata wikipedia articles with gnd identifiers navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version other projects wikimedia commons wikibooks languages العربية azərbaycanca български català čeština deutsch eesti ελληνικά español esperanto فارسی français galego 한국어 հայերեն íslenska italiano עברית kreyòl ayisyen latina bahasa melayu nederlands 日本語 norsk bokmål occitan polski português română русский српски / srpski suomi svenska тоҷикӣ türkçe ᨅᨔ ᨕᨘᨁᨗ українська tiếng việt 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 