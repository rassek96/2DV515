version control from wikipedia free encyclopedia   redirected from version control system jump navigation search revision control system redirects here for specific software implementation see revision control system this article needs additional citations for verification please help improve this article by adding citations reliable sources unsourced material may be challenged removed april learn how when remove this template message component software configuration management version control also known revision control source control management changes documents computer programs large web sites other collections information changes are usually identified by number letter code termed revision number revision level simply revision for example initial set files revision when first change made resulting set revision so on each revision associated with timestamp person making change revisions can be compared restored with some types files merged need for logical way organize control revisions has existed for almost long writing has existed but revision control became much more important complicated when era computing began numbering book editions specification revisions are examples that date back print-only era today most capable well complex revision control systems are those used software development where team people may change same files version control systems vcs most commonly run stand-alone applications but revision control also embedded various types software such word processors spreadsheets collaborative web docs various content management systems eg wikipedia's page history revision control allows for ability revert document previous revision which critical for allowing editors track each other's edits correct mistakes defend against vandalism spamming software tools for revision control are essential for organization multi-developer projects contents overview structure o graph structure specialized strategies source-management models o atomic operations o file locking o version merging o baselines labels tags distributed revision control integration common vocabulary see also notes references bibliography external links overview computer software engineering revision control any kind practice that tracks provides control over changes source code software developers sometimes use revision control software maintain documentation configuration files well source code teams design develop deploy software common for multiple versions same software be deployed different sites for software's developers be working simultaneously on updates bugs features software are often only present certain versions because fixing some problems introduction others program develops therefore for purposes locating fixing bugs vitally important be able retrieve run different versions software determine which versions problem occurs may also be necessary develop two versions software concurrently for instance where one version has bugs fixed but no new features branch while other version where new features are worked on trunk at simplest level developers could simply retain multiple copies different versions program label them appropriately this simple approach has been used on many large software projects while this method can work inefficient many near-identical copies program have be maintained this requires lot self-discipline on part developers often leads mistakes since code base same also requires granting read-write-execute permission set developers this adds pressure someone managing permissions so that code base not compromised which adds more complexity consequently systems automate some all revision control process have been developed this ensures that majority management version control steps hidden behind scenes moreover software development legal business practice other environments has become increasingly common for single document snippet code be edited by team members which may be geographically dispersed may pursue different even contrary interests sophisticated revision control that tracks accounts for ownership changes documents code may be extremely helpful even indispensable such situations revision control may also track changes configuration files such those typically stored /etc /usr/local/etc on unix systems this gives system administrators another way easily track changes made way roll back earlier versions should need arise structure revision control manages changes set data over time these changes can be structured various ways often data thought collection many individual items such files documents changes individual files are tracked this accords with intuitions about separate files but causes problems when identity changes such during renaming splitting merging files accordingly some systems such git instead consider changes data whole which less intuitive for simple changes but simplifies more complex changes when data that under revision control modified after being retrieved by checking out this not general immediately reflected revision control system repository but must instead be checked committed copy outside revision control known working copy simple example when editing computer file data stored memory by editing program working copy which committed by saving concretely one may print out document edit by hand only later manually input changes into computer save for source code control working copy instead copy all files particular revision generally stored locally on developer's computer this case saving file only changes working copy checking into repository separate step if multiple people are working on single data set document they are implicitly creating branches data their working copies thus issues merging arise discussed below for simple collaborative document editing this can be prevented by using file locking simply avoiding working on same document that someone else working on revision control systems are often centralized with single authoritative data store repository check-outs check-ins done with reference this central repository alternatively distributed revision control no single repository authoritative data can be checked out checked into any repository when checking into different repository this interpreted merge patch graph structure example history graph revision-controlled project trunk green branches yellow graph not tree due presence merges red arrows terms graph theory revisions are generally thought line development trunk with branches off this forming directed tree visualized one more parallel lines development mainlines branches branching off trunk reality structure more complicated forming directed acyclic graph but for many purposes tree with merges adequate approximation revisions occur sequence over time thus can be arranged order either by revision number timestamp revisions are based on past revisions though possible largely completely replace earlier revision such delete all existing text insert new text simplest case with no branching undoing each revision based on its immediate predecessor alone they form simple line with single latest version head revision tip graph theory terms drawing each revision point each derived revision relationship arrow conventionally pointing from older newer same direction time this linear graph if there branching so multiple future revisions are based on past revision undoing so revision can depend on revision older than its immediate predecessor then resulting graph instead directed tree each node can have more than one child has multiple tips corresponding revisions without children latest revision on each branch principle resulting tree need not have preferred tip main latest revision – just various different revisions – but practice one tip generally identified head when new revisions based on head either identified new head considered new branch list revisions from start head graph theory terms unique path tree which forms linear graph before trunk mainline conversely when revision can be based on more than one previous revision when node can have more than one parent resulting process called merge one most complex aspects revision control this most often occurs when changes occur multiple branches most often two but more are possible which are then merged into single branch incorporating both changes if these changes overlap may be difficult impossible merge require manual intervention rewriting presence merges resulting graph no longer tree nodes can have multiple parents but instead rooted directed acyclic graph dag graph acyclic since parents are always backwards time rooted because there oldest version however assuming that there trunk merges from branches can be considered external tree – changes branch are packaged up patch which applied head trunk creating new revision without any explicit reference branch preserving tree structure thus while actual relations between versions form dag this can be considered tree plus merges trunk itself line distributed revision control presence multiple repositories these may be based on single original version root tree but there need not be original root thus only separate root oldest revision for each repository for example if two people starting working on project separately similarly presence multiple data sets multiple projects that exchange data merge there isn’t single root though for simplicity one may think one project primary other secondary merged into first with without its own revision history specialized strategies engineering revision control developed from formalized processes based on tracking revisions early blueprints bluelines this system control implicitly allowed returning any earlier state design for cases which engineering dead-end was reached development design revision table was used keep track changes made additionally modified areas drawing were highlighted using revision clouds version control widespread business law indeed contract redline legal blackline are some earliest forms revision control are still employed business law with varying degrees sophistication most sophisticated techniques are beginning be used for electronic tracking changes cad files see product data management supplanting manual electronic implementation traditional revision control source-management models traditional revision control systems use centralized model where all revision control functions take place on shared server if two developers try change same file at same time without some method managing access developers may end up overwriting each other's work centralized revision control systems solve this problem one two different source management models file locking version merging atomic operations main article atomic commit operation atomic if system left consistent state even if operation interrupted commit operation usually most critical this sense commits tell revision control system make group changes final available all users not all revision control systems have atomic commits notably cvs lacks this feature file locking simplest method preventing concurrent access problems involves locking files so that only one developer at time has write access central repository copies those files once one developer checks out file others can read that file but no one else may change that file until that developer checks updated version cancels checkout file locking has both merits drawbacks can provide some protection against difficult merge conflicts when user making radical changes many sections large file group files however if files are left exclusively locked for too long other developers may be tempted bypass revision control software change files locally leading more serious problems version merging main article merge revision control most version control systems allow multiple developers edit same file at same time first developer check changes central repository always succeeds system may provide facilities merge further changes into central repository preserve changes from first developer when other developers check merging two files can be very delicate operation usually possible only if data structure simple text files result merge two image files might not result image file at all second developer checking code will need take care with merge make sure that changes are compatible that merge operation does not introduce its own logic errors within files these problems limit availability automatic semi-automatic merge operations mainly simple text based documents unless specific merge plugin available for file types concept reserved edit can provide optional means explicitly lock file for exclusive write access even when merging capability exists baselines labels tags most revision control tools will use only one these similar terms baseline label tag refer action identifying snapshot label project record snapshot try with baseline x typically only one terms baseline label tag used documentation discussion they can be considered synonyms most projects some snapshots are more significant than others such those used indicate published releases branches milestones when both term baseline either label tag are used together same context label tag usually refer mechanism within tool identifying making record snapshot baseline indicates increased significance any given label tag most formal discussion configuration management uses term baseline distributed revision control main article distributed version control distributed revision control systems drcs take peer-to-peer approach opposed client-server approach centralized systems rather than single central repository on which clients synchronize each peer's working copy codebase bona-fide repository distributed revision control conducts synchronization by exchanging patches change-sets from peer peer this results some important differences from centralized system no canonical reference copy codebase exists by default only working copies common operations such commits viewing history reverting changes are fast because there no need communicate with central server7 rather communication only necessary when pushing pulling changes from other peers each working copy effectively functions remote backup codebase its change-history providing inherent protection against data loss4 integration some more advanced revision-control tools offer many other facilities allowing deeper integration with other tools software-engineering processes plugins are often available for ides such oracle jdeveloper intellij idea eclipse visual studio delphi netbeans ide xcode gnu emacs via vcel come with integrated version control support common vocabulary terminology can vary from system system but some terms common usage include baseline approved revision document source file from which subsequent changes can be made see baselines labels tags branch set files under version control may be branched forked at point time so that from that time forward two copies those files may develop at different speeds different ways independently each other change change diff delta represents specific modification document under version control granularity modification considered change varies between version control systems change list on many version control systems with atomic multi-change commits change list change set update patch identifies set changes made single commit this can also represent sequential view source code allowing examination source any particular changelist id checkout check out co create local working copy from repository user may specify specific revision obtain latest term 'checkout' can also be used noun describe working copy clone cloning means creating repository containing revisions from another repository this equivalent pushing pulling into empty newly initialized repository noun two repositories can be said be clones if they are kept synchronized contain same revisions commit commit check ci more rarely install submit record write merge changes made working copy back repository terms 'commit' 'checkin' can also be used nouns describe new revision that created result committing conflict conflict occurs when different parties make changes same document system unable reconcile changes user must resolve conflict by combining changes by selecting one change favour other delta compression most revision control software uses delta compression which retains only differences between successive versions files this allows for more efficient storage many different versions files dynamic stream stream which some all file versions are mirrors parent stream's versions export exporting act obtaining files from repository similar checking out except that creates clean directory tree without version-control metadata used working copy this often used prior publishing contents for example forward integration process merging changes made main trunk into development feature team branch head also sometimes called tip this refers most recent commit either trunk branch trunk each branch have their own head though head sometimes loosely used refer trunk import importing act copying local directory tree that not currently working copy into repository for first time initialize create new empty repository interleaved deltas some revision control software uses interleaved deltas method that allows store history text based files more efficient way than by using delta compression label see tag mainline similar trunk but there can be mainline for each branch merge merge integration operation which two sets changes are applied file set files some sample scenarios are follows user working on set files updates syncs their working copy with changes made checked into repository by other users user tries check files that have been updated by others since files were checked out revision control software automatically merges files typically after prompting user if should proceed with automatic merge some cases only doing so if merge can be clearly reasonably resolved branch created code files independently edited updated branch later incorporated into single unified trunk set files branched problem that existed before branching fixed one branch fix then merged into other branch this type selective merge sometimes known cherry pick distinguish from complete merge previous case promote act copying file content from less controlled location into more controlled location for example from user's workspace into repository from stream its parent pull push copy revisions from one repository into another pull initiated by receiving repository while push initiated by source fetch sometimes used synonym for pull mean pull followed by update repository repository where files' current historical data are stored often on server sometimes also called depot resolve act user intervention address conflict between different changes same document reverse integration process merging different team branches into main trunk versioning system revision also version version any change form svk revision state at point time entire tree repository share act making one file folder available multiple branches at same time when shared file changed one branch changed other branches stream container for branched files that has known relationship other such containers streams form hierarchy each stream can inherit various properties like versions namespace workflow rules subscribers etc from its parent stream tag tag label refers important snapshot time consistent across many files these files at that point may all be tagged with user-friendly meaningful name revision number see baselines labels tags trunk unique line development that not branch sometimes also called baseline mainline master update update sync but sync can also mean combined push pull merges changes made repository by other people for example into local working copy update also term used by some cm tools cm+ pls sms for change package concept see changelist synonymous with checkout revision control systems that require each repository have exactly one working copy common distributed systems working copy working copy local copy files from repository at specific time revision all work done files repository initially done on working copy hence name conceptually sandbox see also change control changelog comparison version control software distributed version control list version control software software configuration management software versioning versioning file system notes this case edit buffers are secondary form working copy not referred such principle two revisions can have identical timestamp thus cannot be ordered on line this generally case for separate repositories though also possible for simultaneous changes several branches single repository these cases revisions can be thought set separate lines one per repository branch branch within repository revision repository tree should not be confused with directory tree files working copy note that if new branch based on head then topologically head no longer tip since has child mainline can also refer main path separate branch references b c o'sullivan bryan mercurial definitive guide sebastopol o'reilly media inc isbn retrieved september drive support google rapid subversion adoption validates enterprise readiness challenges traditional software configuration management leaders collabnet may retrieved october version management essential software development considered most critical component any development environment for engineering drawings see whiteprintdocument control for some manual systems place twentieth century for example engineering procedures hughes aircraft each revision which required approval by lawrence hyland see also approval procedures instituted by us government wheeler david comments on open source software / free software oss/fs software configuration management scm systems retrieved may wingerd laura practical perforce o'reilly isbn 0-596-10185-6 gregory gary february trunk vs head version control systems java eclipse other tech tidbits retrieved collins-sussman fitzpatrick & pilato svn tour cycle resolve ‘the g stands for merged which means that file had local changes begin with but changes coming from repository didn't overlap with local changes’ concepts manual version ed accurev july bibliography collins-sussman ben fitzpatrick bw pilato cm version control with subversion o'reilly isbn 0-596-00448-6 external links visual guide version control better explained better scm initiative comparison at wayback machine archived april useful summary different systems their features sink eric source control scm how‐to basics version control v t e version control software years where available indicate date first stable release systems with names italics are no longer maintained have planned end-of-life dates local only free/open-source rcs sccs proprietary pvcs qvcs client–server free/open-source cvs c cvsnt qvcs enterprise subversion proprietary accurev scm clearcase cmvc dimensions cm 1980s dsee endevor 1980s integrity panvalet 1970s perforce helix software change manager 1970s starteam surround scm synergy team concert team foundation server visual studio team services vault visual sourcesafe distributed free/open-source arx bitkeeper codeville darcs dcvs fossil git gnu arch gnu bazaar mercurial monotone svk veracity proprietary teamware 1990s code co-op plastic scm team foundation server visual studio team services concepts branch fork changeset commit o gated commit interleaved deltas delta compression data comparison merge repository tag trunk category comparison list retrieved from https//enwikipediaorg/w/indexphptitle=versioncontrol&oldid=750193921 categories version control version control systems technical communication software development process distributed version control systems hidden categories articles needing additional references from april all articles needing additional references all articles with unsourced statements articles with unsourced statements from november articles with unsourced statements from january webarchive template wayback links navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version other projects wikimedia commons wikibooks languages afrikaans العربية беларуская български català čeština deutsch eesti español esperanto فارسی français 한국어 հայերեն hrvatski bahasa indonesia italiano עברית қазақша latviešu lietuvių magyar nederlands 日本語 norsk bokmål polski português română русский slovenščina suomi svenska தமிழ் ไทย türkçe українська tiếng việt 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 