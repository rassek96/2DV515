programming language implementation from wikipedia free encyclopedia jump navigation search this article does not cite any sources please help improve this article by adding citations reliable sources unsourced material may be challenged removed december learn how when remove this template message has been suggested that this article be merged with compiler discuss proposed since november programming language implementation system for executing computer programs there are two general approaches programming language implementation interpretation interpreter takes input program some language performs actions written that language on some machine compilation compiler takes input program some language translates that program into some other language which may serve input another interpreter another compiler notice that compiler does not directly execute program ultimately order execute program via compilation must be translated into form that can serve input interpreter when piece computer hardware can interpret programming language directly that language called machine code so-called native code compiler one that compiles program into machine code actual compilation often separated into multiple passes like code generation often for assembler language translator generating native code linking loading execution if compiler given high level language produces another high level language called translator source source translation which often useful add extensions existing languages exploit good portable implementation other language for example c simplifying development many combinations interpretation compilation are possible many modern programming language implementations include elements both for example smalltalk programming language conventionally implemented by compilation into bytecode which then either interpreted compiled by virtual machine most popular ways use jit aot compiler compilation this implementation strategy has been copied by many languages since smalltalk pioneered 1970s 1980s abstract machines every programming language requires abstract machines that bridge gap between high level language low level real machine abstract machines for object-oriented programming languages these are basically stack based machines access data method program abstract machines for string processing abstract machines for functional programming languages abstract machines for logic programming languages these are based on predicate calculus see also compiler construction functional compiler this programming-language-related article stub you can help wikipedia by expanding v t e retrieved from https//enwikipediaorg/w/indexphptitle=programminglanguageimplementation&oldid=730945388 categories programming language implementation programming language topics programming language topic stubs hidden categories articles lacking sources from december all articles lacking sources articles be merged from november all articles be merged all articles with unsourced statements articles with unsourced statements from april all stub articles navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version other projects wikimedia commons languages العربية bahasa melayu српски / srpski edit links this page was last modified on july at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 