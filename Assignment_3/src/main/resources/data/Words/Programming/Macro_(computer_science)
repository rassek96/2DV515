macro computer science from wikipedia free encyclopedia jump navigation search macro language redirects here for human macrolanguages see iso macrolanguage jedit's macro editor macro short for macroinstruction from greek μακρός 'long' computer science rule pattern that specifies how certain input sequence often sequence characters should be mapped replacement output sequence also often sequence characters according defined procedure mapping process that instantiates transforms macro use into specific sequence known macro expansion facility for writing macros may be provided part software application part programming language former case macros are used make tasks using application less repetitive latter case they are tool that allows programmer enable code reuse even design domain-specific languages macros are used make sequence computing instructions available programmer single program statement making programming task less tedious less error-prone thus they are called macros because big block code can be expanded from small sequence characters macros often allow positional keyword parameters that dictate what conditional assembler program generates have been used create entire programs program suites according such variables operating system platform other factors term derives from macro instruction such expansions were originally used generating assembly language code contents keyboard mouse macros o application macros scripting + macro virus text-substitution macros o embeddable languages procedural macros syntactic macros o early lisp macros o hygienic macros o applications macros for machine-independent software see also references keyboard mouse macros keyboard macros mouse macros allow short sequences keystrokes mouse actions be transformed into other usually more time-consuming sequences keystrokes mouse actions this way frequently used repetitive sequences keystrokes mouse movements can be automated separate programs for creating these macros are called macro recorders during 1980s macro programs – originally smartkey then superkey keyworks prokey – were very popular first means automatically format screenplays then for variety user input tasks these programs were based on tsr terminate stay resident mode operation applied all keyboard input no matter which context occurred they have some extent fallen into obsolescence following advent mouse-driven user interface availability keyboard mouse macros applications such word processors spreadsheets making possible create application-sensitive keyboard macros keyboard macros have more recent times come life method exploiting economy massively multiplayer online role-playing games mmorpgs by tirelessly performing boring repetitive but low risk action player running macro can earn large amount game's currency resources this effect even larger when macro-using player operates multiple accounts simultaneously operates accounts for large amount time each day this money generated without human intervention can dramatically upset economy game for this reason use macros violation tos eula most mmorpgs administrators mmorpgs fight continual war identify punish macro users application macros scripting keyboard mouse macros that are created using application's built-in macro features are sometimes called application macros they are created by carrying out sequence once letting application record actions underlying macro programming language most commonly scripting language with direct access features application may also exist programmers' text editor emacs short for editing macros follows this idea conclusion effect most editor made macros emacs was originally devised set macros editing language teco was later ported dialects lisp another programmers' text editor vim descendant vi also has full implementation macros can record into register macro what person types on keyboard can be replayed edited just like vba macros for microsoft office vim also has scripting language called vimscript create macros visual basic for applications vba programming language included microsoft office however its function has evolved from replaced macro languages that were originally included some these applications macro virus main article macro virus computing vba has access most microsoft windows system calls executes when documents are opened this makes relatively easy write computer viruses vba commonly known macro viruses mid-to-late 1990s this became one most common types computer virus however during late 1990s date microsoft has been patching updating their programs addition current anti-virus programs immediately counteract such attacks text-substitution macros languages such c assembly language have rudimentary macro systems implemented preprocessors compiler assembler c preprocessor macros work by simple textual search-and-replace at token rather than character level classic use macros computer typesetting system tex its derivatives where most functionality based on macros macroml experimental system that seeks reconcile static typing macro systems nemerle has typed syntax macros one productive way think these syntax macros multi-stage computation other examples m4 sophisticated stand-alone macro processor trac macro extension tal accompanying template attribute language smx for web pages ml/1 macro language one general purpose macroprocessor contextual pattern matching macro processor which could be described combination regular expressions ebnf awk sam76 minimac concatenative macro processor troff nroff for typesetting formatting unix manpages embeddable languages some languages such php can be embedded free-format text source code other languages mechanism by which code fragments are recognised for instance being bracketed by similar textual macro language but they are much more powerful fully featured languages see also assembly language § macros algorithm procedural macros this section does not cite any sources please help improve this section by adding citations reliable sources unsourced material may be challenged removed june learn how when remove this template message macros pl/i language are written subset pl/i itself compiler executes preprocessor statements at compilation time output this execution forms part code that compiled ability use familiar procedural language macro language gives power much greater than that text substitution macros at expense larger slower compiler frame technology's frame macros have their own command syntax but can also contain text any language each frame both generic component hierarchy nested subassemblies procedure for integrating itself with its subassembly frames recursive process that resolves integration conflicts favor higher level subassemblies outputs are custom documents typically compilable source modules frame technology can avoid proliferation similar but subtly different components issue that has plagued software development since invention macros subroutines most assembly languages have less powerful procedural macro facilities for example allowing block code be repeated n times for loop unrolling but these have completely different syntax from actual assembly language syntactic macros macro systems—such c preprocessor described earlier—that work at level lexical tokens cannot preserve lexical structure reliably syntactic macro systems work instead at level abstract syntax trees preserve lexical structure original program most widely used implementations syntactic macro systems are found lisp -like languages such common lisp clojure scheme islisp racket these languages are especially suited for this style macro due their uniform parenthesized syntax known s-expressions particular uniform syntax makes easier determine invocations macros lisp macros transform program structure itself with full language available express such transformations while syntactic macros are often found lisp-like languages they are also available other languages such prolog dylan scala nemerle rust elixir haxe python they are also available third-party extensions javascript c early lisp macros before lisp had macros had so-called fexprs function-like operators whose inputs were not values computed by arguments but rather syntactic forms arguments whose output were values be used computation other words fexprs were implemented at same level eval provided window into meta-evaluation layer this was generally found be difficult model reason about effectively timothy hart proposed adding macros lisp ai memo macro definitions for lisp hygienic macros main article hygienic macro mid-eighties number papers introduced notion hygienic macro expansion syntax-rules pattern-based system where syntactic environments macro definition macro use are distinct allowing macro definers users not worry about inadvertent variable capture cf referential transparency hygienic macros have been standardized for scheme both r5rs r6rs standards upcoming r7rs standard will also include hygienic macros number competing implementations hygienic macros exist such syntax-rules syntax-case explicit renaming syntactic closures both syntax-rules syntax-case have been standardized scheme standards recently racket has combined notions hygienic macros with tower evaluators so that syntactic expansion time one macro system ordinary runtime another block code showed how apply interleaved expansion parsing non-parenthesized language number languages other than scheme either implement hygienic macros implement partially hygienic systems examples include scala julia dylan nemerle applications evaluation order macro systems have range uses being able choose order evaluation see lazy evaluation non-strict functions enables creation new syntactic constructs eg control structures indistinguishable from those built into language for instance lisp dialect that has cond but lacks if possible define latter terms former using macros for example scheme has both continuations hygienic macros which enables programmer design their own control abstractions such looping early exit constructs without need build them into language data sub-languages domain-specific languages next macros make possible define data languages that are immediately compiled into code which means that constructs such state machines can be implemented way that both natural efficient binding constructs macros can also be used introduce new binding constructs most well-known example transformation let into application function set arguments felleisen conjectures that these three categories make up primary legitimate uses macros such system others have proposed alternative uses macros such anaphoric macros macro systems that are unhygienic allow selective unhygienic transformation interaction macros other language features has been productive area research for example components modules are useful for large-scale programming but interaction macros these other constructs must be defined for their use together module component-systems that can interact with macros have been proposed for scheme other languages with macros for example racket language extends notion macro system syntactic tower where macros can be written languages including macros using hygiene ensure that syntactic layers are distinct allowing modules export macros other modules macros for machine-independent software macros are normally used map short string macro invocation longer sequence instructions another less common use macros do reverse map sequence instructions macro string this was approach taken by stage2 mobile programming system which used rudimentary macro compiler called simcmp map specific instruction set given computer counterpart machine-independent macros applications notably compilers written these machine-independent macros can then be run without change on any computer equipped with rudimentary macro compiler first application run such context more sophisticated powerful macro compiler written machine-independent macro language this macro compiler applied itself bootstrap fashion produce compiled much more efficient version itself advantage this approach that complex applications can be ported from one computer very different computer with very little effort for each target machine architecture just writing rudimentary macro compiler advent modern programming languages notably c for which compilers are available on virtually all computers has rendered such approach superfluous this was however one first instances if not first compiler bootstrapping see also anaphoric macros assembly language § macros origin concept macros extensible programming hygienic macros macro instruction programming by demonstration string interpolation references greenwald irwin d maureen kane april share system programming modification pdf journal acm new york ny usa acm 128–133 doi101145/320964320967 one important uses programmer macros save time clerical-type errors writing sequence instructions which are often repeated course program strachey christopher october general purpose macrogenerator computer journal 225–241 doi 101093/comjnl/83225 runescape massive online adventure game by jagex ltd retrieved marshall joe untitled email retrieved may aim-057 macro definitions for lisp timothy p hart kohlbecker eugene friedman daniel felleisen matthias duba bruce hygienic macro expansion doi101145/319838319859 clinger rees macros that work flatt matthew composable compilable macros you want when external link |title= help rafkind jon flatt matthew honu syntactic extension for algebraic notation through enforestation external link |title= help brown university paper on automata macros matthias felleisen ll1 mailing list posting orgass richard j william m waite september base for mobile programming system communications acm new york ny usa acm 507–510 doi 101145/363219363226 waite william m july mobile programming system stage2 communications acm new york ny usa acm 415–421 doi 101145/362686362691 v t e types programming languages actor-based array aspect-oriented class-based concatenative concurrent data-structured dataflow declarative domain-specific dynamic esoteric event-driven extensible functional imperative logic macro metaprogramming+multi-paradigm object-based object-oriented pipeline procedural prototype-based reflective rule-based scripting synchronous templating assembly compiled interpreted machine low-level high-level very high-level first generation second generation third generation fourth generation fifth generation non-english-based visual authority control gnd 4125810-1 retrieved from https//enwikipediaorg/w/indexphptitle=macrocomputerscience&oldid=744702857 categories programming constructs source code automation software hidden categories cs1 errors external links articles containing ancient greek-language text articles needing additional references from june all articles needing additional references wikipedia articles with gnd identifiers navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages العربية català čeština deutsch eesti español فارسی français 한국어 हिन्दी íslenska italiano עברית кыргызча nederlands 日本語 олык марий polski português română русский suomi svenska türkçe українська 中文 edit links this page was last modified on october at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 