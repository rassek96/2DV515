programming language theory from wikipedia free encyclopedia jump navigation search this article includes list references but its sources remain unclear because has insufficient inline citations please help improve this article by introducing more precise citations october learn how when remove this template message lowercase greek letter λ lambda unofficial symbol field programming language theory this usage derives from lambda calculus model computation introduced by alonzo church 1930s widely used by programming language researchers graces cover classic text structure interpretation computer programs title so-called lambda papers written by gerald jay sussman guy steele developers scheme programming language programming language theory plt branch computer science that deals with design implementation analysis characterization classification programming languages their individual features falls within discipline computer science both depending on affecting mathematics software engineering linguistics well-recognized branch computer science active research area with results published numerous journals dedicated plt well general computer science engineering publications contents history o 1950s o 1960s o 1970s o 1980s o 1990s sub-disciplines related fields o formal semantics o type theory o program analysis transformation o comparative programming language analysis o generic metaprogramming o domain-specific languages o compiler construction o run-time systems journals publications conferences see also references further reading external links history some ways history programming language theory predates even development programming languages themselves lambda calculus developed by alonzo church stephen cole kleene 1930s considered by some be world's first programming language even though was intended model computation rather than being means for programmers describe algorithms computer system many modern functional programming languages have been described providing thin veneer over lambda calculus many are easily described terms first programming language be invented was plankalkül which was designed by konrad zuse 1940s but not publicly known until not implemented until first widely known successful programming language was fortran developed from by team ibm researchers led by john backus success fortran led formation committee scientists develop universal computer language result their effort was algol separately john mccarthy mit developed lisp programming language based on lambda calculus first language with origins academia be successful with success these initial efforts programming languages became active topic research 1960s beyond some other key events history programming language theory since then 1950s noam chomsky developed chomsky hierarchy field linguistics discovery which has directly impacted programming language theory other branches computer science 1960s simula language was developed by ole-johan dahl kristen nygaard widely considered be first example object-oriented programming language simula also introduced concept coroutines peter landin first realize church's lambda calculus can be used model programming languages he introduces secd machine which interprets lambda expressions landin introduces j operator essentially form continuation landin introduces iswim abstract computer programming language his article next programming languages influential design languages leading haskell programming language corrado böhm introduced programming language cuch curry-church christopher strachey publishes his influential set lecture notes fundamental concepts programming languages introducing terminology r-values l-values parametric polymorphism ad hoc polymorphism j roger hindley publishes principal type-scheme object combinatory logic later generalized into hindley–milner type inference algorithm tony hoare introduces hoare logic form axiomatic semantics william alvin howard observed that high-level proof system referred natural deduction can be directly interpreted its intuitionistic version typed variant model computation known lambda calculus this became known curry–howard correspondence 1970s dana scott first publishes his work on denotational semantics logic programming prolog were developed thus allowing computer programs be expressed mathematical logic john c reynolds discovers system f had already been discovered by mathematical logician jean-yves girard from sussman steele develop scheme programming language lisp dialect incorporating lexical scoping unified namespace elements from actor model including first-class continuations backus at acm turing award lecture assailed current state industrial languages proposed new class programming languages now known function-level programming languages gordon plotkin introduces programming computable functions abstract typed functional language robin milner introduces hindley–milner type inference algorithm for ml programming language type theory became applied discipline programming languages this application has led tremendous advances type theory over years 1980s gordon plotkin publishes his paper on structured operational semantics gilles kahn published his paper on natural semantics team scientists at xerox parc led by alan kay develop smalltalk object-oriented language widely known for its innovative development environment there emerged process calculi such calculus communicating systems robin milner communicating sequential processes model c r hoare well similar models concurrency such actor model carl hewitt release miranda sparks academic interest lazy-evaluated pure functional programming languages committee was formed define open standard resulting release haskell standard bertrand meyer created methodology design by contract incorporated into eiffel programming language 1990s gregor kiczales jim des rivieres daniel g bobrow published book art metaobject protocol eugenio moggi philip wadler introduced use monads for structuring programs written functional programming languages sub-disciplines related fields there are several fields study which either lie within programming language theory which have profound influence on many these have considerable overlap addition plt makes use many other branches mathematics including computability theory category theory set theory formal semantics main article formal semantics programming languages formal semantics formal specification behaviour computer programs programming languages three common approaches describe semantics meaning computer program are denotational semantics operational semantics axiomatic semantics type theory main article type theory type theory study type systems which are tractable syntactic method for proving absence certain program behaviors by classifying phrases according kinds values they compute many programming languages are distinguished by characteristics their type systems program analysis transformation main articles program analysis program transformation program analysis general problem examining program determining key characteristics such absence classes program errors program transformation process transforming program one form language another form comparative programming language analysis comparative programming language analysis seeks classify programming languages into different types based on their characteristics broad categories programming languages are often known programming paradigms generic metaprogramming metaprogramming generation higher-order programs which when executed produce programs possibly different language subset original language result domain-specific languages domain-specific languages are languages constructed efficiently solve problems particular problem domain compiler construction main article compiler construction compiler theory theory writing compilers more generally translators programs which translate program written one language into another form actions compiler are traditionally broken up into syntax analysis scanning parsing semantic analysis determining what program should do optimization improving performance program indicated by some metric typically execution speed code generation generation output equivalent program some target language often instruction set cpu run-time systems runtime systems refers development programming language runtime environments their components including virtual machines garbage collection foreign function interfaces journals publications conferences conferences are primary venue for presenting research programming languages most well known conferences include symposium on principles programming languages popl conference on programming language design implementation pldi international conference on functional programming icfp international conference on object oriented programming systems languages applications oopsla notable journals that publish plt research include acm transactions on programming languages systems toplas journal functional programming jfp journal functional logic programming higher-order symbolic computation see also sigplan timeline programming languages very high-level programming language references c böhm w gross introduction cuch e r caianiello ed automata theory p 35-64/ benjamin c pierce types programming languages mit press cambridge ma usa further reading see also programming language § further reading semantics programming languages § further reading abadi martín cardelli luca theory objects springer-verlag michael j c gordon programming language theory its implementation prentice hall gunter carl mitchell john c eds theoretical aspects object oriented programming languages types semantics language design mit press harper robert practical foundations for programming languages draft version knuth donald e selected papers on computer languages stanford california center for study language information mitchell john c foundations for programming languages mitchell john c introduction programming language theory o'hearn peter w tennent robert d algol-like languages progress theoretical computer science birkhauser boston pierce benjamin c types programming languages mit press pierce benjamin c advanced topics types programming languages pierce benjamin c et al software foundations external links lambda ultimate community weblog for professional discussion repository documents on programming language theory great works programming languages collected by benjamin c pierce university pennsylvania classic papers programming languages logic collected by karl crary carnegie mellon university programming language research directory by mark leone programming language theory texts online at utrecht university λ-calculus then & now by dana s scott for acm turing centenary celebration grand challenges programming languages panel session at popl retrieved from https//enwikipediaorg/w/indexphptitle=programminglanguagetheory&oldid=747340889 categories programming language theory hidden categories articles lacking in-text citations from october all articles lacking in-text citations navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages বাংলা català español euskara فارسی hrvatski italiano русский türkçe українська tiếng việt 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 