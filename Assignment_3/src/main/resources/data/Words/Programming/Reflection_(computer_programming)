reflection computer programming from wikipedia free encyclopedia jump navigation search computer science reflection ability computer program examine introspect modify its own structure behavior at runtime contents historical background uses implementation examples o ec o ecmascript o go o java o objective-c o delphi o perl o php o python o r o ruby see also references further reading external links historical background earliest computers were programmed their native assembly language which were inherently reflective these original architectures could be programmed by defining instructions data using self-modifying code programming moved compiled higher-level languages such fortran algol cobol but also pascal c many other languages this reflective ability largely disappeared until programming languages with reflection built into their type systems appeared brian cantwell smith's doctoral dissertation introduced notion computational reflection programming languages notion meta-circular interpreter component 3-lisp uses reflection can be used for observing modifying program execution at runtime reflection-oriented program component can monitor execution enclosure code can modify itself according desired goal related that enclosure this typically accomplished by dynamically assigning program code at runtime object-oriented programming languages such java reflection allows inspection classes interfaces fields methods at runtime without knowing names interfaces fields methods at compile time also allows instantiation new objects invocation methods reflection can be used adapt given program different situations dynamically reflection-oriented programming almost always requires additional knowledge framework relational mapping object relevance order take advantage more generic code execution reflection often used part software testing such for runtime creation/instantiation mock objects reflection also key strategy for metaprogramming some object-oriented programming languages such c java reflection can be used override member accessibility rules for example reflection makes possible change value field marked private third-party library's class implementation this section does not cite any sources please help improve this section by adding citations reliable sources unsourced material may be challenged removed january learn how when remove this template message language supporting reflection provides number features available at runtime that would otherwise be difficult accomplish lower-level language some these features are abilities discover modify source code constructions such code blocks classes methods protocols etc first-class object at runtime convert string matching symbolic name class function into reference invocation that class function evaluate string if were source code statement at runtime create new interpreter for language's bytecode give new meaning purpose for programming construct these features can be implemented different ways moo reflection forms natural part everyday programming idiom when verbs methods are called various variables such verb name verb being called this object on which verb called are populated give context call security typically managed by accessing caller stack programmatically since callers list methods by which current verb was eventually called performing tests on callers command invoked by original user allows verb protect itself against unauthorised use compiled languages rely on their runtime system provide information about source code compiled objective-c executable for example records names all methods block executable providing table correspond these with underlying methods selectors for these methods compiled into program compiled language that supports runtime creation functions such common lisp runtime environment must include compiler interpreter reflection can be implemented for languages not having built-in reflection facilities by using program transformation system define automated source code changes examples following code snippets create instance foo class foo invoke its method hello for each programming language normal reflection-based call sequences are shown has been suggested that this article be split into new article titled comparison programming languages reflection discuss may ec following example ec // without reflection foo foo { } foohello // with reflection class fooclass = esystemfindclassthismodule foo instance foo = einstancenewfooclass method m = eclassfindmethodfooclass hello fooclassmodule void void mfunctionfoo ecmascript following example ecmascript therefore also applies javascript actionscript // without reflection new foohello // with reflection // assuming that foo resides this new this // without assumption new eval'foo' // simply eval'new foohello' // using ecmascript 2015's new reflect class reflectconstructfoo go following example go import reflect // without reflection f = foo{} fhello // with reflection ft = reflecttypeoffoo{} fv = reflectnewft m = fvmethodbynamehello if misvalid { mcallnil } java following example java // without reflection foo foo = new foo foohello // with reflection object foo = classfornamecompleteclasspathandfoonewinstance // alternatively object foo = fooclassnewinstance method m = foogetclassgetdeclaredmethodhello new class minvokefoo objective-c following example objective-c—implying either openstep foundation kit framework used // foo class @interface foo nsobject - voidhello @end // sending hello foo instance without reflection foo obj = init] // sending hello foo instance with reflection id obj = init] delphi this delphi example assumes tfoo class has been declared unit called unit1 uses rtti unit1 procedure withoutreflection var foo tfoo begin foo = tfoocreate try foohello finally foofree end end procedure withreflection var rtticontext trtticontext rttitype trttiinstancetype foo tobject begin rttitype = rtticontextfindtype'unit1tfoo' trttiinstancetype foo = rttitypegetmethod'create'invokerttitypemetaclasstype asobject try rttitypegetmethod'hello'invokefoo finally foofree end end this notable example since delphi unmanaged fully natively compiled language unlike most other languages that support reflection its language architecture inherits from strongly-typed pascal but with significant influence from smalltalk compare with other examples here many which are dynamic script languages like perl python php languages with runtime like java c perl following example perl without reflection my $foo = foo->new $foo->hello foo->new->hello with reflection my $class = foo my $constructor = new my $method = hello my $f = $class->$constructor $f->$method $class->$constructor->$method with eval eval new foo->hello php following example php // without reflection $foo = new foo $foo->hello // with reflection $reflector = new reflectionclass'foo' $foo = $reflector->newinstance $hello = $reflector->getmethod'hello' $hello->invoke$foo // using callback $foo = new foo calluserfuncarray$foo 'hello' // using variable variables syntax $classname = 'foo' $foo = new $classname $method = 'hello' $foo->$method python following example python without reflection obj = foo objhello with reflection classname = foo method = hello obj = globals getattrobj method with eval evalfoohello r following example r without reflection assuming foo returns s3-type object that has method hello obj brian cantwell smith procedural reflection programming languages department electrical engineering computer science massachusetts institute technology phd thesis brian c smith reflection semantics procedural language technical report mit-lcs-tr-272 massachusetts institute technology cambridge mass january documents jonathan m sobel daniel p friedman introduction reflection-oriented programming indiana university further reading ira r forman nate forman java reflection action isbn 1-932394-18-4 ira r forman scott danforth putting metaclasses work isbn 0-201-43305-2 external links reflection logic functional object-oriented programming short comparative study introduction reflection-oriented programming brian foote's pages on reflection smalltalk java reflection api tutorial from oracle v t e types programming languages actor-based array aspect-oriented class-based concatenative concurrent data-structured dataflow declarative domain-specific dynamic esoteric event-driven extensible functional imperative logic macro metaprogramming+multi-paradigm object-based object-oriented pipeline procedural prototype-based reflective rule-based scripting synchronous templating assembly compiled interpreted machine low-level high-level very high-level first generation second generation third generation fourth generation fifth generation non-english-based visual retrieved from https//enwikipediaorg/w/indexphptitle=reflectioncomputerprogramming&oldid=747502752 categories programming constructs hidden categories all articles with unsourced statements articles with unsourced statements from july articles needing additional references from january all articles needing additional references articles be split from may all articles be split navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages català čeština deutsch ελληνικά español français 한국어 italiano עברית lietuvių bahasa melayu nederlands 日本語 polski português русский slovenščina српски / srpski українська tiếng việt 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 