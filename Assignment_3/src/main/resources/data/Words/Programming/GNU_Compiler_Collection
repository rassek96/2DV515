gnu compiler collection from wikipedia free encyclopedia jump navigation search cc1 redirects here for other uses see cc1 disambiguation gnu compiler collection developers gnu project initial release may years ago stable release / august months ago preview release / may months ago repository gccgnuorg/viewcvs/gcc/ written c++ originally c operating system cross-platform platform gnu type compiler license gnu gpl 3+ with gcc runtime library exception website gccgnuorg gnu compiler collection gcc compiler system produced by gnu project supporting various programming languages gcc key component gnu toolchain free software foundation fsf distributes gcc under gnu general public license gnu gpl gcc has played important role growth free software both tool example originally named gnu c compiler when only handled c programming language gcc was released was extended compile c++ december that year front ends were later developed for objective-c objective-c++ fortran java ada go among others version openmp specification now supported c c++ compilers much improved implementation openacc 20a specification also supported by default current version supports gnu++14 superset c++14 gnu11 superset c11 with strict standard support also available also provides experimental support for c++17 later gcc has been ported wide variety processor architectures widely deployed tool development both free proprietary software gcc also available for most embedded systems including arm-based amcc freescale power architecture-based chips compiler can target wide variety platforms well being official compiler gnu operating system gcc has been adopted standard compiler by many other modern unix-like computer operating systems including linux bsd family although freebsd os x have moved llvm system versions are also available for microsoft windows other operating systems gcc can compile code for android ios contents history design o front ends o generic gimple o optimization o back end o features languages architectures development c library license uses see also references further reading external links o official o other history effort bootstrap gnu operating system richard stallman asked andrew s tanenbaum author amsterdam compiler kit also known free university compiler kit if he could use that software for gnu when tanenbaum told him that while free university was free compiler was not stallman decided write his own stallman's initial plan was rewrite existing compiler from lawrence livermore laboratory from pastel c with some help from len tower others stallman wrote new c front end for livermore compiler but then realized that required megabytes stack space impossibility on unix system with only kb concluded he would have write new compiler from scratch none pastel compiler code ended up gcc though stallman did use c front end he had written gcc was first released march available by ftp from mit stallman was listed author but cited others for their contributions including jack davidson christopher fraser for idea using rtl intermediate language paul rubin for writing most preprocessor leonard tower for parts parser rtl generator rtl definitions vax machine description described first free software hit by salus gnu compiler arrived just at time when sun microsystems was unbundling its development tools from its operating system selling them separately at higher combined price than previous bundle which led many sun's users buy download gcc instead vendor's tools by gcc supported thirteen computer architectures was outperforming several vendor compilers was shipped by data general next with their workstations was used by lotus development corporation gcc was licensed under gpl programmers wanting work other directions—particularly those writing interfaces for languages other than c—were free develop their own fork compiler provided they meet gpl's terms including its requirements distribute source code multiple forks proved inefficient unwieldy however difficulty getting work accepted by official gcc project was greatly frustrating for many fsf kept such close control on what was added official version gcc 2x that gcc was used one example cathedral development model eric s raymond's essay cathedral bazaar group developers formed experimental/enhanced gnu compiler system egcs merge several experimental forks into single project basis merger was gcc development snapshot taken between releases projects merged included g77 fortran pgcc p5 pentium-optimized gcc many c++ improvements many new architectures operating system variants egcs development proved considerably more vigorous than gcc development so much so that fsf officially halted development on their gcc 2x compiler blessed egcs official version gcc appointed egcs project gcc maintainers april with release gcc july two projects were once again united gcc has since been maintained by varied group programmers from around world under direction steering committee has been ported more kinds processors operating systems than any other compiler gcc has been ported wide variety processor architectures widely deployed tool development both free proprietary software gcc also available for most embedded systems including symbian called gcce arm-based amcc freescale power architecture-based chips compiler can target wide variety platforms including video game consoles such playstation cell spe playstation dreamcast design obtain stable abi like eg linux standard base aims procure compiler version important gcc's external interface follows unix conventions users invoke language-specific driver program gcc for c g++ for c++ etc which interprets command arguments calls actual compiler runs assembler on output then optionally runs linker produce complete executable binary each language compilers separate program that reads source code outputs machine code all have common internal structure per-language front end parses source code that language produces abstract syntax tree tree for short these are if necessary converted middle end's input representation called generic form middle end then gradually transforms program towards its final form compiler optimizations static code analysis techniques such fortifysource compiler directive that attempts discover some buffer overflows are applied code these work on multiple representations mostly architecture-independent gimple representation architecture-dependent rtl representation finally machine code produced using architecture-specific pattern matching originally based on algorithm jack davidson chris fraser gcc was written primarily c except for parts ada front end distribution includes standard libraries for ada c++ java whose code mostly written those languages on some platforms distribution also includes low-level runtime library libgcc written combination machine-independent c processor-specific machine code designed primarily handle arithmetic operations that target processor cannot perform directly may gcc steering committee decided allow use c++ compiler compile gcc compiler was intended be written c plus subset features from c++ particular this was decided so that gcc's developers could use destructors generics features c++ august gcc steering committee announced that gcc now uses c++ its implementation language this means that build gcc from sources c++ compiler required that understands iso/iec c++03 standard front ends each front end uses parser produce abstract syntax tree given source file due syntax tree abstraction source files any different supported languages can be processed by same back end gcc started out using lalr parsers generated with bison but gradually switched hand-written recursive-descent parsers for c++ for c objective-c currently all front ends use hand-written recursive-descent parsers until recently tree representation program was not fully independent processor being targeted meaning tree was somewhat different for different language front ends front ends could provide their own tree codes this was simplified with introduction generic gimple two new forms language-independent trees that were introduced with advent gcc generic more complex based on gcc 3x java front end's intermediate representation gimple simplified generic which various constructs are lowered multiple gimple instructions c c++ java front ends produce generic directly front end other front ends instead have different intermediate representations after parsing convert these generic either case so-called gimplifier then converts this more complex form into simpler ssa-based gimple form that common language for large number powerful language- architecture-independent global function scope optimizations generic gimple generic intermediate representation language used middle end while compiling source code into executable binaries subset called gimple targeted by all front ends gcc middle stage gcc does all code analysis optimization working independently both compiled language target architecture starting from generic representation expanding register transfer language rtl generic representation contains only subset imperative programming constructs optimized by middle end transforming source code gimple complex expressions are split into three-address code using temporary variables this representation was inspired by simple representation proposed mccat compiler by laurie j hendren for simplifying analysis optimization imperative programs optimization optimization can occur during any phase compilation however bulk optimizations are performed after syntax semantic analysis front end before code generation back end thus common even though somewhat contradictory name for this part compiler middle end exact set gcc optimizations varies from release release develops but includes standard algorithms such loop optimization jump threading common subexpression elimination instruction scheduling so forth rtl optimizations are less importance with addition global ssa-based optimizations on gimple trees rtl optimizations have much more limited scope have less high-level information some these optimizations performed at this level include dead code elimination partial redundancy elimination global value numbering sparse conditional constant propagation scalar replacement aggregates array dependence based optimizations such automatic vectorization automatic parallelization are also performed profile-guided optimization also possible back end behavior gcc's back end partly specified by preprocessor macros functions specific target architecture for instance define its endianness word size calling conventions front part back end uses these help decide rtl generation so although gcc's rtl nominally processor-independent initial sequence abstract instructions already adapted target at any moment actual rtl instructions forming program representation have comply with machine description target architecture machine description file contains rtl patterns along with operand constraints code snippets output final assembly constraints indicate that particular rtl pattern might only apply for example certain hardware registers for example allow immediate operand offsets only limited size eg … bit offsets etc during rtl generation constraints for given target architecture are checked order issue given snippet rtl must match one more rtl patterns machine description file satisfy constraints for that pattern otherwise would be impossible convert final rtl into machine code towards end compilation valid rtl reduced strict form which each instruction refers real machine registers pattern from target's machine description file forming strict rtl complicated task important step register allocation where real hardware registers are chosen replace initially assigned pseudo-registers this followed by reloading phase any pseudo-registers that were not assigned real hardware register are 'spilled' stack rtl perform this spilling generated likewise offsets that are too large fit into actual instruction must be broken up replaced by rtl sequences that will obey offset constraints final phase machine code built by calling small snippet code associated with each pattern generate real instructions from target's instruction set using final registers offsets addresses chosen during reload phase assembly-generation snippet may be just string which case simple string substitution registers offsets and/or addresses into string performed assembly-generation snippet may also be short block c code performing some additional work but ultimately returning string containing valid assembly code features some features gcc include link-time optimization optimizes across object file boundaries directly improve linked binary link-time optimization relies on intermediate file containing serialization some gimple representation included object file file generated alongside object file during source compilation each source compilation generates separate object file link-time helper file when object files are linked compiler executed again uses helper files optimize code across separately compiled object files plugins can extend gcc compiler directly plugins allow stock compiler be tailored specific needs by external code loaded plugins for example plugins can add replace even remove middle-end passes operating on gimple representations several gcc plugins have already been published notably gcc python plugin which links against libpython allows one invoke arbitrary python scripts from inside compiler aim allow gcc plugins be written python melt plugin provides high-level lisp-like language extend gcc c++ transactional memory when compiling with -fgnu-tm languages standard compiler releases since include front ends for c gcc c++ g++ objective-c objective-c++ fortran gfortran java gcj ada gnat go gccgo popular parallel language extension openmp also supported version added support for cilk plus since version there preliminary support for openacc fortran front end was g77 before version which only supports fortran newer versions g77 dropped favor new gnu fortran front end retaining most g77's language extensions that supports fortran large parts fortran fortran well front-end for chill was dropped due lack maintenance third-party front ends exist for pascal gpc modula-2 modula-3 pl/i d gdc vhdl ghdl few experimental branches exist support additional languages such gcc upc compiler for unified parallel c architectures gcc target processor families version include alpha arm avr blackfin epiphany gcc h8/300 hc12 ia-32 x86 ia-64 intel itanium mips motorola pa-risc pdp-11 powerpc r8c / m16c / m32c sparc spu superh system/390 / zseries vax x86-64 lesser-known target processors supported standard release have included 68hc11 a29k cr16 c6x d30v dsp16xx etrax cris fr-30 fr-v intel i960 ip2000 m32r mcore mil-std-1750a mmix mn10200 mn10300 motorola ns32k romp rl78 stormy16 v850 xtensa additional processors have been supported by gcc versions maintained separately from fsf version cortus aps3 arc avr32 c166 c167 d10v eisc esi-risc hexagon latticemico32 latticemico8 mep microblaze motorola msp430 nec sx architecture nios ii nios openrisc pdp-10 pic24/dspic pic32 propeller risc-v saturn hp48xgcc system/370 tigcc m68k variant tricore z8000 zpu gcj java compiler can target either native machine language architecture java virtual machine's java bytecode when retargeting gcc new platform bootstrapping often used development current stable version gcc which was released on august version gcc implemented c++ gcc supports many new objective-c features such declared synthesized properties dot syntax fast enumeration optional protocol methods method/protocol/class attributes class extensions new gnu objective-c runtime api also supports go programming language includes libquadmath library which provides quadruple-precision mathematical functions on targets supporting float128 datatype library used provide real16 type gnu fortran on such targets gcc uses many standard tools its build including perl flex bison other common tools addition currently requires three additional libraries be present order build gmp mpc mpfr trunk concentrates major part development efforts where new features are implemented tested c library by default gcc uses gnu c library glibc while musl alternative for linux android with bionic c library also officially supported for aarch64 arm microblaze mips mips64 powerpc powerpc64 sh i386 x32 x8664 targets gcc defaults musl libc if built with target triplet matching -linux-musl pattern license ] this section needs expansion you can help by adding april gcc runtime exception permits compilation proprietary free software programs with gcc usage free software plugins availability this exception does not imply any general presumption that third-party software unaffected by copyleft requirements license gcc uses ] this section needs expansion you can help by adding april several companies make business out supplying supporting gcc ports various platforms see also free software portal computer programming portal list compilers mingw c++ concepts extension c++ standard this extension supported exclusively by gcc references b gcc releases gnu project retrieved gcc releases – gnu project – free software foundation fsf b gcc allows c++ – some degree h june gcc runtime library exception retrieved programming languages supported by gcc gnu project retrieved b c gcc release series openacc b linux board support packages retrieved von hagen william definitive guide gcc definitive guides 2nd ed apress p xxvii isbn 978-1-4302-0219-6 so he wrote vuck's author asking if gnu could use evidently vuck's developer was uncooperative responding that university was free but that compiler was not b c stallman richard september about gnu project gnu project retrieved october puzo jerome e ed february gnu's zoo gnu's bulletin free software foundation retrieved richard m stallman forwarded by leonard h tower jr march gnu c compiler beta test release newsgroup complangc retrieved october stallman richard m june contributors gnu cc using porting gnu compiler collection gcc free software foundation inc p retrieved june salus peter h chapter sun gcc daemon gnu penguin groklaw garfinkel simson l august get ready for gnu software computerworld b henkel-wallace david august new compiler project merge existing gcc forks retrieved may pentium compiler faq short history gcc development gcc steering committee linux information project linfo retrieved gcc has been ported ie modified run on more than platforms which more than for any other compiler symbian gcc improvement project retrieved setting up gcc cross-compiler ps2stuff archived from original on december retrieved sh4 g++ guide archived from original on retrieved security features compile time buffer checks fortifysource fedoraprojectorg retrieved languages used make gcc gcc internals gccorg retrieved march email by richard stallman on emacs-devel gcc release series changes new features fixes retrieved october gcc release series changes new features fixes gcc release series changes new features fixes generic gnu compiler collection internals gimple gnu compiler collection internals mccat at wayback machine archived august laurie j hendren novillo diego december from source binary inner workings gcc red hat magazine profile-guided optimization demonstrated here plugins gcc online documentation retrieved july starynkevitch basile gcc plugins thru melt example pdf retrieved about gcc melt retrieved july transactional memory gcc gcc front ends gnuorg retrieved november gcc release series patch] remove chill gccgnuorg retrieved july gdc project on bitbucket retrieved july gcc upc gcc unified parallel c www gccupcorg retrieved external link |publisher= help hexagon project wiki sx-gcc port gcc nec sx vector cpu gnu compiler for java programming language retrieved gcc release series gcc release series changes new features fixes gnu c library glibc gnu c library used c library gnu system gnu/linux systems bionic musl - room for cooperation pdf but there no need throw away existing bionic abi compatibility important musl libc going be released real soon used alongside existing android userspace musl bridges gap between full-fledged linux systems android providing necessary library foundation run standard c c++ software while retaining license freedom developers have come expect taking rust everywhere with rustup today’s rust depends on libc on most linuxes that means glibc it’s technically challenging fully statically link glibc which presents difficulties when using produce truly standalone binary fortunately alternative exists musl gcc runtime exception fsf retrieved fsf service directory further reading using gnu compiler collection gcc free software foundation gnu compiler collection gcc internals free software foundation introduction gcc network theory ltd revised august isbn 0-9541617-9-3 arthur griffith gcc complete reference mcgrawhill / osborne isbn 0-07-222405-3 external links wikimedia commons has media related gcc wikibooks has book on topic gnu c compiler internals official official website gcc release timeline gcc development plan other gcc optimisations collection gcc architecture internals documents at iit bombay kerner sean michael march new gcc heavy on optimization internetnewscom kerner sean michael april open source gcc older faster internetnewscom from source binary inner workings gcc by diego novillo red hat magazine december paper on generic gimple marketing cygnus support essay covering gcc development for 1990s with monthly reports for inside cygnus engineering section near end egcs announcement egcs features list fear forking essay by rick moen recording seven well-known forks including gcc/egcs one v t e gnu project history gnu manifesto free software foundation o europe o india o latin america history free software licenses gnu general public license gnu lesser general public license affero general public license gnu free documentation license gpl linking exception software gnu variants hurd linux-libre glibc bash coreutils findutils build system gcc binutils gdb grub gnome gnustep gimp gnu emacs gnu texmacs gnu octave gnu r gsl gmp gnu electric gnu archimedes gnunet gnu privacy guard gnuzilla icecat gnu health gnumed gnu lilypond gnu go gnu chess gnash guix guix system distribution more public speakers alexandre oliva benjamin mako hill bradley m kuhn eben moglen federico heinz georg c f greve john sullivan loïc dachary matt lee nagarjuna g ricardo galli richard stallman robert j chassell other topics gnu/linux naming controversy revolution os free software foundation anti-windows campaigns defective by design v t e free open-source software general alternative terms for free software comparison open-source closed-source software comparison source code hosting facilities free software free software project directories gratis versus libre long-term support open-source software open-source software development outline software packages audio bioinformatics codecs collaboration configuration management device drivers o graphics o wireless geophysics health mathematics operating systems programming languages routing statistics television video games web applications o content management systems o e-commerce word processors android apps ios apps commercial trademarked formerly proprietary community free software movement history open-source software movement organizations events licenses apache apsl artistic beerware boost bsd cc0 cddl epl gnu gpl gnu lgpl isc mit mpl ms-pl/rl wtfpl zlib license types standards comparison free open-source software licenses contributor license agreement copyfree copyleft debian free software guidelines definition free cultural works free license free software definition open source definition open-source license permissive free software licence public domain viral license challenges binary blob digital rights management hardware restrictions license proliferation mozilla software rebranding proprietary software sco/linux controversies secure boot software patents software security trusted computing related topics cathedral bazaar forking microsoft open specification promise revolution os book category commons portal retrieved from https//enwikipediaorg/w/indexphptitle=gnucompilercollection&oldid=750147575 categories software c compilers c++ compilers compilers cross-platform free software fortran compilers free compilers interpreters gnu project software java development tools pascal compilers software using gpl license unix programming tools hidden categories webarchive template wayback links cs1 errors external links use mdy dates from march pages using deprecated image syntax all articles with unsourced statements articles with unsourced statements from october all articles lacking reliable references articles lacking reliable references from april articles with unsourced statements from january articles be expanded from april all articles be expanded articles using small message boxes pages using isbn magic links navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version other projects wikimedia commons wikibooks languages العربية български bosanski català чӑвашла čeština dansk deutsch eesti español esperanto euskara فارسی français galego 한국어 հայերեն हिन्दी hrvatski italiano עברית ქართული latina lietuvių magyar മലയാളം nederlands 日本語 norsk bokmål polski português română русский slovenčina slovenščina српски / srpski suomi svenska తెలుగు ไทย türkçe українська tiếng việt 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 