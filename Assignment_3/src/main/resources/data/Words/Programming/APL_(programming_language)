apl programming language from wikipedia free encyclopedia jump navigation search not be confused with address programming language apl programming language family redirects here for programming languages that were influenced by apl see categoryapl programming language family apl paradigm array functional structured modular designed by kenneth e iverson developer kenneth e iverson first appeared typing discipline dynamic major implementations dyalog apl ibm apl2 apl2000 sharp apl aplx nars2000 gnu apl dialects a+ dyalog apl aplnext eli j influenced by mathematical notation influenced go j k mathematica matlab nial ppl q s sac antlang this article contains apl source code without proper rendering support you may see question marks boxes other symbols instead apl symbols promotional material for apl from apl named after book programming language programming language developed 1960s by kenneth e iverson its central datatype multidimensional array uses large range special graphic symbols represent most functions operators leading very concise code has been important influence on development concept modeling spreadsheets functional programming computer math packages has also inspired several other programming languages still used today for certain applications contents history o apl2 o microcomputers o extensions design execution o interpreters o compilers o matrix optimizations terminology syntax examples o hello world o exponentiation o pick lottery numbers o prime numbers o sorting o game life o html tags removal character set use standardization see also references further reading external links history mathematical notation for manipulating arrays which developed into apl programming language was developed by iverson at harvard university starting published his programming language preface states its premise applied mathematics largely concerned with design analysis explicit procedures for calculating exact approximate values various functions such explicit procedures are called algorithms programs because effective notation for description programs exhibits considerable syntactic structure called programming language he began work for ibm working with adin falkoff created apl based on notation he had developed this notation was used inside ibm for short research reports on computer systems such burroughs b5000 its stack mechanism when stack machines versus register machines were being evaluated by ibm for upcoming computers also iverson used his notation draft chapter programming language written for book he was writing with fred brooks automatic data processing which would be published early first attempt use notation describe complete computer system happened after falkoff discussed with dr william c carter his work standardization instruction set for machines that later became ibm system/360 family herbert hellerman working at ibm systems research institute implemented part notation on ibm computer was used by students special high school course on calculating transcendental functions by series summation students tested their code hellerman's lab this implementation portion notation was called pat personalized array translator falkoff iverson edward h sussenguth jr all working at ibm used notation for formal description ibm system/360 series machine architecture functionality which resulted paper published ibm systems journal after this was published team turned their attention implementation notation on computer system one motivations for this focus implementation was interest john l lawrence who had new duties with science research associates educational company bought by ibm lawrence asked iverson his group help utilize language tool for development use computers education after lawrence m breed philip s abrams stanford university joined team at ibm research they continued their prior work on implementation programmed fortran iv for portion notation which had been done for ibm computer running under ibsys operating system this work was finished late later known ivsys iverson system basis this implementation was described detail by abrams stanford university technical report interpreter for iverson notation this was formally supervised by niklaus wirth like hellerman's pat system earlier this implementation did not include apl character set but used special english reserved words for functions operators system was later adapted for time-sharing system by november had been reprogrammed for ibm system/360 model computer running time sharing mode was used internally at ibm ibm typeballs one ocr with clip €2 coin for scale key development ability use apl effectively before widespread use crt terminals was development special ibm selectric typewriter interchangeable typeball with all special apl characters on this was used on paper printing terminal workstations using selectric typewriter typeball mechanism such ibm ibm terminal keycaps could be placed over normal keys show which apl characters would be entered typed when that key was struck for first time programmer could actually type see real apl characters used iverson's notation not be forced use awkward english keyword representations them falkoff iverson had special apl selectric typeballs designed late although no apl computer system was available use them iverson cited falkoff inspiration for idea using ibm selectric typeball for apl character set programmer's view ibm keyboard layout with apl typeball print head inserted some apl symbols even with apl characters on typeball still had be typed by over-striking two existing typeball characters example would be grade up character which had be made from delta shift-h sheffer stroke shift-m this was necessary because apl character set was larger than characters allowed on selectric typeball first apl interactive login creation apl workspace was by larry breed using ibm terminal at ibm mohansic labs near thomas j watson research center home apl yorktown heights new york ibm was chiefly responsible for introduction apl marketplace apl was first available for ibm apl\1130 would run little 8k 16-bit words memory used dedicated megabyte hard disk apl gained its foothold on mainframe timesharing systems from late 1960s through early 1980s part because would run on lower-specification systems that were not equipped with dynamic address translation hardware additional improvements performance for selected ibm system/370 mainframe systems included apl assist microcode which some support for apl execution was included actual firmware opposed apl being exclusively software product somewhat later suitably performing hardware was finally becoming available mid- late-1980s many users migrated their applications personal computer environment early ibm apl interpreters for ibm ibm hardware implemented their own multi-user management instead relying on host services thus they were timesharing systems their own right first introduced apl\360 system was multi-user interpreter ability programmatically communicate with operating system for information setting interpreter system variables was done through special privileged i-beam functions using both monadic dyadic operations ibm released aplsv which was continuation same product but which offered shared variables means access facilities outside apl system such operating system files mid-1970s ibm mainframe interpreter was even adapted for use on ibm desktop computer which had small crt apl keyboard when most other small computers time only offered basic 1980s vsapl program product enjoyed widespread usage with cms tso vspc music/sp cics users 1973-1974 dr patrick e hagerty directed implementation university maryland apl interpreter for sperry univac series mainframe computers at time sperry had nothing student alan stebbens was assigned task implementing internal function several timesharing firms sprang up 1960s 1970s that sold apl services using modified versions ibm apl\360 interpreter north america better-known ones were i p sharp associates stsc time sharing resources tsr computer company tcc compuserve also entered fray with apl interpreter based on modified version digital equipment corp carnegie mellon's which ran on dec's ki kl bit machines compuserve's apl was available both its commercial market consumer information service with advent first less expensive mainframes such ibm later personal computer timesharing industry had all but disappeared by mid-1980s sharp apl was available from i p sharp associates first on timesharing basis 1960s later program product starting around sharp apl was advanced apl implementation with many language extensions such packages ability put one more objects into single variable file system nested arrays shared variables apl interpreters were available from other mainframe mini-computer manufacturers well notably burroughs cdc data general dec harris hewlett-packard siemens ag xerox others garth foster syracuse university sponsored regular meetings apl implementers' community at syracuse's minnowbrook conference center blue mountain lake new york later years eugene mcdonnell organized similar meetings at asilomar conference grounds near monterey california at pajaro dunes near watsonville california sigapl special interest group association for computing machinery continues support apl community iverson received turing award for his work on apl filmography videos over years apl has been subject more than few films videos some these include chasing men who stare at arrays catherine lathwell's film diaries film synopsis - people who accept significantly different ways thinking challenge status quo result created invention that subtly changes world no one knows about canadian started all… i want everyone know about origins apl - - youtube youtube video uploaded by catherine lathwell talk show style interview with original developers apl years apl youtube by graeme robertson uploaded by mindofziggi history apl quick introduction apl powerful programming language currently finding new life due its ability create implement systems web-based otherwise apl demonstration youtube uploaded by imperial college london live demonstration computer language apl programming language by professor bob spence imperial college london apl2 starting early 1980s ibm apl development under leadership dr jim brown implemented new version apl language that contained its primary enhancement concept nested arrays where array can contain other arrays well new language features which facilitated integration nested arrays into program workflow ken iverson no longer control development apl language left ibm joined i p sharp associates where one his major contributions was directing evolution sharp apl be more accordance with his vision other vendors were busy developing apl interpreters for new hardware notably unix-based microcomputers apl2 was almost always standard chosen for new apl interpreter developments even today most apl vendors their users cite apl2 compatibility selling point for those products apl2 for ibm mainframe computers still available ibm cites its use for problem solving system design prototyping engineering scientific computations expert systems for teaching mathematics other subjects visualization database access was first available for cms tso apl2 workstation edition windows os/2 aix linux solaris followed much later early 1990s microcomputers first microcomputer implementation apl was on intel 8008-based mcm/70 first general purpose personal computer size arrays along any dimension could not be larger than machine was quite slow but very convenient for education purposes ibm's own ibm microcomputer offered apl one two built-in rom-based interpreted languages for computer complete with keyboard display that supported all special symbols used language while was very slow operated its screen only like typewriter its follower had more acceptable performances read-write addressable text screen graphics could be printed on external matrix printer dna systems introduced apl interpreter for their tso operating system which ran timesharing on ibm digital scientific meta-4 general automation ga 18/30 computer hardware chi 21/30 videobrain family computer released only had one programming language available for that was dialect apl called apl/s small apl for intel called empl was released softronics apl with most functions full apl for 8080-based cp/m systems was released canadian firm telecompute integrated systems inc released business-oriented apl interpreter known tis apl for z80-based systems featured full set file functions for apl plus full screen input switching right left arguments for most dyadic operators by introducing ~ prefix all single character dyadic functions such - / vanguard apl was available for z80 cp/m-based processors late 1970s tcc released apl68000 early 1980s for motorola 68000-based processors this system being basis for microapl limited's aplx product i p sharp associates released version their apl interpreter for ibm pc pc-xt/370 for ibm pc emulator was written that facilitated reusing much ibm mainframe code arguably best known apl interpreter for ibm personal computer was stsc's aplplus/pc commodore superpet introduced included apl interpreter developed by university waterloo early 1980s analogic corporation developed apl machine which was array processing computer designed be programmed only apl there were actually three processing units user's workstation ibm pc where programs were entered edited motorola processor that ran apl interpreter analogic array processor that executed primitives at time its introduction apl machine was likely fastest apl system available although technological success apl machine was marketing failure initial version supported single process at time at time project was discontinued design had been completed allow multiple users aside unusual aspect apl machine was that library workspaces was organized such that single function variable that was shared by many workspaces existed only once library several members apl machine project had previously spent number years with burroughs implementing apl\700 at one stage was claimed by bill gates his open letter hobbyists microsoft corporation planned release version apl but these plans never materialized early publication rodnay zaks from sybex was microprogrammed apl implementation isbn 0-89588-005-9 which complete source listing for microcode for digital scientific corporation meta microprogrammable processor implementing apl this topic was also subject his phd thesis william yerazunis wrote partial version apl prime computer fortran extended with graphics primitives released this was also subject his masters thesis extensions various implementations apl by aplx dyalog et al include extensions for object-oriented programming support for net xml-array conversion primitives graphing operating system interfaces lambda expressions design unlike traditionally structured programming languages apl code typically structured chains monadic dyadic functions operators acting on arrays apl has many nonstandard primitives functions operators that are indicated by single symbol combination few symbols all primitives are defined have same precedence always associate right hence apl read best understood from right-to-left early apl implementations circa so did not have programming loop- flow control structures such do while loops if-then-else constructions instead they used array operations use structured programming constructs was often not necessary since operation could be carried out on entire array single statement for example iota function ι can replace for-loop iteration ιn when applied scalar positive integer yields one-dimensional array vector n more recent implementations apl generally include comprehensive control structures so that data structure program control flow can be clearly cleanly separated apl environment called workspace workspace user can define programs data ie data values exist also outside programs user can also manipulate data without having define program examples below apl interpreter first types six spaces before awaiting user's input its own output starts column one n ← assigns vector values {4 7} variable n array create operation equivalent yet more concise apl expression would be n ← + ⍳4 multiple values are stored array n operation performed without formal loops control flow language n display contents n currently array vector n+4 now added all elements vector n creating 4-element vector {8 11} above apl's interpreter displays result because expression's value was not assigned variable with ← +/n apl displays sum components vector n ie = + + + using very compact notation read +/ plus over slight change would be multiply over m ← +/3+⍳4 m these operations can be combined into single statement remembering that apl evaluates expressions right left first ⍳4 creates array then added each component which are summed together result stored variable m finally displayed conventional mathematical notation equivalent m = ∑ i = i + {\displaystyle \displaystyle m=\sum \limits {i=1}^{4}i+3} - remember that mathematical expressions are not read right-to-left user can save workspace with all values programs execution status apl well known for its use set non-ascii symbols which are extension traditional arithmetic algebraic notation having single character names for simd vector functions one way that apl enables compact formulation algorithms for data transformation such computing conway's game life one line code nearly all versions apl theoretically possible express any computable function one expression that one line code because unusual character set many programmers use special keyboards with apl keytops write apl code although there are various ways write apl code using only ascii characters practice almost never done this may be thought support iverson's thesis about notation tool thought most if not all modern implementations use standard keyboard layouts with special mappings input method editors access non-ascii characters historically apl font has been distinctive with uppercase italic alphabetic characters upright numerals symbols most vendors continue display apl character set custom font advocates apl claim that examples so-called write-only code badly written almost incomprehensible code are almost invariably examples poor programming practice novice mistakes which can occur any language advocates apl also claim that they are far more productive with apl than with more conventional computer languages that working software can be implemented far less time with far fewer programmers than using other technology they also may claim that because compact terse apl lends itself well larger-scale software development complexity because number lines code can be dramatically reduced many apl advocates practitioners also view standard programming languages such cobol java being comparatively tedious apl often found where time-to-market important such with trading systems iverson later designed j programming language which uses ascii with digraphs instead special symbols execution because apl's core objects are arrays lends itself well parallelism parallel computing massively parallel applications very-large-scale integration vlsi interpreters aplnext formerly apl2000 offers advanced apl interpreter that operates under linux unix windows supports windows automation supports calls operating system user defined dlls has advanced apl file system represents current level apl language development apl2000's product advanced continuation stsc's successful aplplus/pc aplplus/386 product line dyalog apl advanced apl interpreter that operates under aix linux including on raspberry pi macos microsoft windows dyalog has extensions apl language which include new object-oriented features numerous language enhancements plus consistent namespace model used for both its microsoft automation interface well native namespaces for windows platform dyalog apl offers tight integration with net plus limited integration with microsoft visual studio development platform ibm offers version ibm apl2 for ibm aix linux sun solaris windows systems this product continuation apl2 offered for ibm mainframes ibm apl2 was arguably most influential apl system which provided solid implementation standard for next set extensions language focusing on nested arrays nars2000 open-source apl interpreter written by bob smith well-known apl developer implementor from stsc 1970s 1980s nars2000 contains advanced features new datatypes runs natively under windows 32- 64-bit versions runs under linux apple macos with wine microapl limited offers aplx full-featured bit interpreter for linux microsoft windows macos systems core language closely modelled on ibm's apl2 with various enhancements aplx includes close integration with net java ruby r effective july microapl withdrew aplx from commercial sale dyalog began hosting aplx website including download area documentation soliton incorporated offers sax interpreter which stands for sharp pl for unix for unix linux systems this further development i p sharp associates' sharp apl product unlike most other apl interpreters kenneth e iverson had some influence way nested arrays were implemented sharp apl sax nearly all other apl implementations followed course set by ibm with apl2 thus some important details sharp apl differ from other implementations openapl open source implementation apl published by branko bratkovic based on code by ken thompson bell laboratories together with contributions by others licensed under gnu general public license runs on unix systems including linux on x86 sparc other cpus gnu apl free implementation iso standard hence similar apl2 runs on gnu/linux on windows using cygwin uses unicode internally gnu apl was written by jürgen sauermann compilers apl programs are normally interpreted less often compiled reality most apl compilers translated source apl lower level language such c leaving machine-specific details lower level compiler compilation apl programs was frequently discussed topic conferences although some newer enhancements apl language such nested arrays have rendered language increasingly difficult compile idea apl compilation still under development today past apl compilation was regarded means achieve execution speed comparable other mainstream languages especially on mainframe computers several apl compilers achieved some levels success though comparatively little development effort spent on apl over years went perfecting compilation into machine code case when moving apl programs from one vendor's apl interpreter another apl programs invariably will require changes their content depending on compiler variable declarations might be needed certain language features would need be removed avoided apl programs would need be cleaned up some way some features language such execute function expression evaluator various reflection introspection functions from apl such ability return function's text materialize new function from text are simply not practical implement machine code compilation commercial compiler was brought market by stsc mid-1980s add-on ibm's vsapl program product unlike more modern apl compilers this product produced machine code that would execute only interpreter environment was not possible eliminate interpreter component compiler could compile many scalar vector operations machine code but would rely on apl interpreter's services perform some more advanced functions rather than attempt compile them however dramatic speedups did occur especially for heavily iterative apl code around same time book apl compiler by timothy budd appeared print this book detailed construction apl translator aplc written c which performed certain optimizations such loop fusion specific needs array language source language was apl-like that few rules apl language were changed relaxed permit more efficient compilation translator would emit c code which could then be compiled run outside apl workspace another compiler also named aplc was later created by samuel w sirlin based on budd's work burroughs/unisys aplb interpreter was first use dynamic incremental compilation produce code for apl-specific virtual machine recompiled on-the-fly identifiers changed their functional meanings addition removing parsing some error checking from main execution path such compilation also streamlines repeated entry exit user-defined functional operands this avoids stack setup take-down for function calls made by apl's built-in operators such reduce each array contraction definition program transformation which reduces array size while preserving correct output this technique has been used past reduce memory requirement program which can be important out-of-core computing embedded systems 'improving data locality by array contraction' reducing virtual memory requirements apex research apl compiler available under gnu public license per snake island research inc apex compiles flat apl subset iso n8485 into sac functional array language with parallel semantics currently runs under linux apex-generated code uses loop fusion 'array contraction' special-case algorithms not generally available interpreters eg upgrade permutation matrix/vector achieve level performance comparable that fortran aplnext visualapl system departure from conventional apl system that visualapl true net language which fully interoperable with other net languages such vbnet c visualapl inherently object-oriented unicode-based while visualapl incorporates most features standard apl implementations visualapl language extends standard apl be net-compliant visualapl hosted standard microsoft visual studio ide such invokes compilation manner identical that other net languages by producing common intermediate language cil code utilizes microsoft just-in-time compiler jit support 32-bit 64-bit hardware substantial performance speed-ups over standard apl have been reported especially when optional strong typing function arguments used apl-to-c translator available from causeway graphical systems this product was designed allow apl code translated equivalent c run completely outside apl environment causeway compiler requires run-time library array functions some speedup sometimes dramatic visible but happens on account optimisations inherent microsoft's net framework matrix optimizations apl was unique speed with which could perform complicated matrix operations for example very large matrix multiplication would take only few seconds on machine that was much less powerful than those today ref history supercomputing because operates on arrays performs operations like matrix inversion internally well written apl can be surprisingly fast there were both technical economic reasons for this advantage commercial interpreters delivered highly tuned linear algebra library routines very low interpretive overhead was incurred per-array—not per-element apl response time compared favorably runtimes early optimizing compilers ibm provided microcode assist for apl on number ibm370 mainframes phil abrams' much-cited paper apl machine illustrated how apl could make effective use lazy evaluation where calculations would not actually be performed until results were needed then only those calculations strictly required obvious easy implement lazy evaluation j-vector when monadic iota encountered code kept representation instead being expanded memory future operations j-vectors contents are loop's induction register not reads from memory although such techniques were not widely used by commercial interpreters they exemplify language's best survival mechanism not specifying order scalar operations exact contents memory standardized by ansi working group x3j10 apl remains highly data-parallel this gives language implementers immense freedom schedule operations efficiently possible computer innovations such cache memory simd execution became commercially available apl programs are ported with almost no extra effort spent re-optimizing low-level details terminology apl makes clear distinction between functions operators functions take arrays variables constants expressions arguments return arrays results operators similar higher-order functions take functions arrays arguments derive related functions for example sum function derived by applying reduction operator addition function applying same reduction operator maximum function which returns larger two numbers derives function which returns largest group vector numbers j language iverson substituted terms verb for function adverb conjunction for operator apl also identifies those features built into language represented by symbol fixed combination symbols primitives most primitives are either functions operators coding apl largely process writing non-primitive functions some versions apl operators however few primitives are considered be neither functions nor operators most noticeably assignment some words used apl literature have meanings that differ from those both mathematics generality computer science term description function operation mapping that takes zero one right two left & right arguments which may be scalars arrays more complicated structures may return similarly complex result function may be primitive built-in represented by single glyph defined named ordered collection program statements derived combination operator with its arguments array data valued object zero more orthogonal dimensions row-major order which each item primitive scalar datum another array niladic not taking requiring any arguments monadic requiring only one argument on right for function on left for operator unary dyadic requiring both left right argument binary ambivalent monadic capable use monadic dyadic context permitting its left argument be elided operator operation mapping that takes one left two left & right function array valued arguments operands derives function operator may be primitive built-in represented by single glyph defined named ordered collection program statements syntax main article apl syntax symbols apl has explicit representations functions operators syntax thus providing basis for clear explicit statement extended facilities language well tools for experimentation upon them examples hello world this displays hello world 'hello world' 'hello world' sample user session on youtube design theme apl define default actions some cases that would produce syntax errors most other programming languages 'hello world' string constant above displays because display default action on any expression for which no action specified explicitly eg assignment function parameter exponentiation another example this theme that exponentiation apl written 2⋆3 which indicates raising power this would be written 2^3 some other languages fortran python however if no base specified with statement ⋆3 apl ^3 other languages most other programming languages one would have syntax error apl however assumes missing base be natural logarithm constant e so interpreting ⋆3 271828⋆3 pick lottery numbers this following immediate-mode expression generates typical set pick lottery numbers six pseudo-random integers ranging from guaranteed non-repeating displays them sorted ascending order x above does lot concisely although seems complex beginning apler combines following apl functions also called primitives glyphs first be executed apl executes from rightmost leftmost dyadic function named deal when dyadic that returns vector consisting select number left argument this case random integers ranging from specified maximum right argument this case which if said maximum ≥ vector length guaranteed be non-repeating thus generate/create random integers ranging from 1-40 this vector then assigned ← variable x because needed later this vector then sorted ascending order by monadic ⍋ function which has its right argument everything right up next unbalanced close-bracket close-parenthesis result ⍋ indices that will put its argument into ascending order then output ⍋ applied variable x which we saved earlier puts items x into ascending sequence since there no function left left-most x tell apl what do with result simply outputs display on single line separated by spaces without needing any explicit instruction do that also has monadic equivalent called roll which simply returns single random integer between its sole operand inclusive thus role-playing game program might use expression roll twenty-sided die prime numbers following expression finds all prime numbers from r both time space calculation complexity o r {\displaystyle or^{2}\\} big o notation ~r∊r∘×r/r←1↓ιr executed from right left this means iota ι creates vector containing integers from r if r = at beginning program ιr drop first element this vector ↓ function ie so 1↓ιr set r new vector ← assignment primitive ie / reduction operator dyadic binary interpreter first evaluates its left argument entirely parentheses generate outer product r multiplied by r ie matrix that multiplication table r by r °× operator ie build vector same length r with each place where corresponding number r outer product matrix ∈ set inclusion element epsilon operator ie logically negate not values vector change zeros ones ones zeros ∼ logical not tilde operator ie select items r for which corresponding element / reduction operator ie note this assumes apl origin ie indices start with apl can be set use origin so that ι6 which convenient for some calculations sorting following expression sorts word list stored matrix x according word length x game life following function life written dyalog apl takes boolean matrix calculates new generation according conway's game life demonstrates power apl implement complex algorithm very little code but also very hard follow unless one has advanced knowledge apl life←{↑1 ⍵∨∧3 4=+/¯1 1∘⊖¯1 1∘⌽⊂⍵} html tags removal following example also dyalog first line assigns some html code variable txt then uses apl expression remove all html tags txt←'this emphasized text' ⎕←{⍵/⍨~{⍵∨≠\⍵}⍵∊''}txt this returns text this emphasized text character set main articles apl codepage syntax symbols apl has been both criticized praised for its choice unique non-standard character set some who learn become ardent adherents suggesting that there some weight behind iverson's idea that notation used does make difference beginning there were few terminal devices even display monitors that could reproduce apl character set—the most popular ones employing ibm selectric print mechanism used with special apl type element one early apl line terminals line-mode operation only not full screen was texas instruments ti model circa with full apl character set which featured half full duplex telecommunications modes for interacting with apl time-sharing service remote mainframe run remote computer job called rje over time with universal use high-quality graphic displays printing devices unicode support apl character font problem has largely been eliminated however entering apl characters requires use input method editors keyboard mappings virtual/on-screen apl symbol sets easy-reference printed keyboard cards which can frustrate beginners accustomed other programming languages with beginners who have no prior experience with other programming languages study involving high school students found that typing using apl characters did not hinder students any measurable way defense apl community apl requires less coding type keyboard mappings become memorized over time also special apl keyboards are manufactured use today are freely available downloadable fonts for operating system platforms such microsoft windows reported productivity gains assume that one will spend enough time working apl make memorization symbols their semantics keyboard mappings worthwhile use apl has long had select mathematically inclined curiosity-driven user base who reference its powerful symbolic nature one symbol/character can perform entire sort another can perform regression for example was still popular financial pre-modeling applications insurance applications simulations mathematical applications apl has been used wide variety contexts for many varied purposes including artificial intelligence robotics newsletter titled quote-quad dedicated apl was published from 1970s until by sigapl section association for computing machinery quote-quad name apl character used for text input output before advent full-screen systems until late mid-1980s systems were written such that user entered instructions his own business specific vocabulary apl time-sharing vendors delivered applications this form on i p sharp timesharing system workspace called magic offered access financial airline data plus sophisticated for time graphing reporting another example graphpak workspace supplied with ibm's apl then apl2 because its matrix operations apl was for some time quite popular for computer graphics programming where graphic transformations could be encoded matrix multiplications one first commercial computer graphics houses digital effects based new york city produced apl graphics product known visions which was used create television commercials reportedly animation for film tron digital effects' use apl was informally described at number sigapl conferences late 1980s examples discussed included early uk channel tv logo/ident interest apl has declined from peak mid-1980s this appears partly due lack smooth migration pathways from higher performing memory-intensive mainframe implementations low-cost personal computer alternatives - apl implementations for computers before intel released late 1980s were only suitable for small applications another important reason for decline lack low cost standardized robust compiled apl executables - usable across multiple computer hardware os platforms there are several apl version permutations across various apl implementations particularly differences between ibm's apl2 apl2000's apl+ versions another practical limitation that apl has fallen behind modern integrated computing environments with respect debugging capabilities test-driven development consequently while apl remains eminently suitable for small-to-medium-sized programs productivity gains for larger projects involving teams developers would be questionable growth end-user computing tools such microsoft excel microsoft access has indirectly eroded potential apl usage these are frequently appropriate platforms for what may have been apl applications 1970s 1980s some apl users migrated j programming language which offers some advanced features lastly decline was also due part growth matlab gnu octave scilab these scientific computing array-oriented platforms provide interactive computing experience similar apl but more closely resemble conventional programming languages such fortran use standard ascii other apl users continue wait for very low-cost standardized broad-hardware-usable apl implementation notwithstanding this decline apl finds continued use certain fields such accounting research pre-hardcoded modeling dna identification technology symbolic mathematical expression learning remains inspiration its current user base well for other languages standardization apl has been standardized by ansi working group x3j10 iso/iec joint technical committee subcommittee working group core apl language specified iso extended apl language specified iso/iec see also a+ programming language apl ebcdic code page apl shared variables i p sharp associates tk solver ibm type-iii library ibm iverson award j programming language k programming language q programming language from kx systems lyapas scientific time sharing corporation soliton incorporated eli programming language rpl programming language references nested arrays research system - nars2000 experimental apl interpreter nars2000 sudley place software retrieved july gnu apl directoryfsforg free software directory retrieved september pike rob hello gophers retrieved b bibliography apl j jsoftwarecom retrieved b kx systems — interview with arthur whitney — jan kxcom retrieved b growth matlab — cleve moler pdf archived from original pdf on retrieved b about q'nial nialcom retrieved b iverson kenneth e programming language wiley isbn 0-471-43014-5 mcintyre donald b language intellectual tool from hieroglyphics apl ibm systems journal 554–581 doi101147/sj3040554 retrieved january acm award citation – john backus awardsacmorg retrieved aplx version – from viewpoint experimental physicist vector vectororguk archived from original on january retrieved bergquist gary future apl insurance world acm sigapl apl quote quad new york ny 16–21 doi 101145/347194347203 issn 0163-6006 iverson kenneth e automatic data processing chapter programming language draft copy for brooks iverson book automatic data processing brooks fred iverson kenneth automatic data processing john wiley & sons inc hellerman h experimental personalized array translator system communications acm july falkoff adin d iverson kenneth e evolution apl acm sigplan notices 1978-08 abrams philip s interpreter for iverson notation technical report cs-tr-66-47 department computer science stanford university august haigh thomas biographies kenneth e iverson ieee annals history computing b breed larry first apl terminal session apl quote quad association for computing machinery volume number september p2-4 adin falkoff - computer history museum iverson credited him for choosing name apl introduction ibm golf-ball typewriter with replacement typehead which provided famous character set represent programs larry breed august how we got apl\1130 vector british apl association issn 0955-1433 apl\1130 manual may remembering apl quadibloccom retrieved falkoff adin iverson kenneth e apl\360 users guide ibm research thomas j watson research center yorktown heights ny august apl\360 terminal system ibm research thomas j watson research center march b pakin sandra apl\360 reference manual science research associates inc isbn 0-574-16135-x falkoff adin d iverson kenneth ethe design apl ibm journal research development volume number july these environmental defined functions were based on use still another class functions—called i-beams because shape symbol used for them—which provide more general facility for communication between apl programs less abstract parts system i-beam functions were first introduced by system programmers allow them execute system/360 instructions from within apl programs thus use apl direct aid their programming activity obvious convenience functions this kind which appeared be part language led introduction monadic i-beam function for direct use by anyone various arguments this function yielded information about environment such available space time day minker jack january beginning computing computer sciences at university maryland pdf section university maryland p archived from original pdf on june retrieved may stebbens alan how all began sigapl home page sigaplorg retrieved turing award citation awardsacmorg retrieved lathwell catherine chasing men who stare at arrays catherine lathwell retrieved january external link |website= help lathwell catherine origins apl - - youtube catherine lathwell on youtube retrieved january external link |website= help robertson graeme years apl - video graeme robertson/youtube retrieved january external link |website= help spence bob apl demonstration imperial college london retrieved january external link |website= help hui roger remembering ken iverson keiapl retrieved january external link |website= help acm am turing award kenneth e iverson - citation acm retrieved january external link |website= help acm sigplan apl2 early years acm retrieved january external link |website= help micro apl overview apl system micro apl retrieved january external link |website= help robertson graeme personal view apl2010 vector - journal british apl association retrieved january external link |website= help rodriguez p rojas j alfonseca m burgos j i expert system chemical synthesis written apl2/pc acm sigapl apl quote quad 299–303 doi101145/7514475185 retrieved january ibm apl2 programming language for problem solving visualization database access ibm retrieved january external link |website= help falkoff adin d ibm family apl systems pdf ibm systems journal ibm 416–432 doi101147/sj3040416 retrieved videobrain family computer popular science november advertisement higgins donald s pc/370 virtual machine acm sigsmall/pc notes volume issue august pp23 - yahoo group apl-l april zaks rodnay microprogrammed apl implementation phd thesis university california berkeley june zaks rodnay microprogrammed apl fifth ieee computer conference proceedings sep p william yerazunis partial implementation apl with graphics primitives for prime computers retrieved b microapl operators microapl retrieved january external link |website= help primitive functions primitive functions retrieved january external link |website= help workspace workspace retrieved january external link |website= help example catpadnet archived from original on retrieved apl symbols entering apl symbols retrieved january external link |website= help dickey lee list apl transliteration schemes iverson ke notation tool thought communications acm 444-465 august batenburg apl efficiency retrieved january external link |website= help vaxman apl great programming pdf retrieved january external link |website= help janko wolfgang may investigation into efficiency using apl for programming inference machine acm digital library 450–456 doi101145/38428228372 retrieved january borealis why apl retrieved january external link |website= help sigapl what apl sigapl retrieved january external link |website= help ju dz-ching ching wai-mee exploitation apl data parallelism on shared-memory mimd machine newsletter acm sigplan notices 61–72 doi101145/109625109633 retrieved january hsu aaron w bowman william j revisiting apl modern era pdf indiana university / princeton retrieved january external link |website= help ching w-m ju d execution automatically parallelized apl programs on rp3 ibm journal research & development 5/6 767–777 doi 101147/rd3550767 retrieved january blelloch guy e sabot gary w compiling collection-oriented languages onto massively parallel computers carnegie mellon university / thinking machines corp 1–31 citeseerx collection oriented languages include apl apl2 jendrsczok johannes hoffmann rolf ediger patrick keller j ̈org implementing apl-like data parallel functions on gca machine pdf fernuni-hagende pp 1–6 retrieved january gca - global cellular automation inherently massively parallel 'apl has been chosen because ability express matrix vector' structures external link |website= help brenner ibm tjwatson research center norman vlsi circuit design using apl with fortran subroutines acm sigapl apl quote quad acm sigapl 77–79 doi101145/800058801079 isbn retrieved january apl for interactiveness ease coding gamble dj hobson rf towards graphics/procedural environment for constructing vlsi module generators communications computers signal processing conference proceeding ieee pacific rim conference on victoria bc canada ieee 606–611 doi101109/pacrim198948437 vlsi module generators are described apl c examples interpreted compiled languages can be interfaced advanced graphics display dyalog ltd's website aplx has been withdrawn from commercial sale but can be downloaded free charge microaplcom retrieved october weigang jim may introduction stsc's apl compiler apl quote quad apl85 conference acm apl compiler message from jim weigang complangapl newsgroup apr timothy budd apl compiler springer-verlag isbn 0-387-96643-9 ftp area for associate professor timothy budd samuel w sirlin apl c compiler project song yonghong xu rong wang cheng li zhiyuan improving data locality by array contraction pdf purdue university retrieved february array contraction program transformation which reduces array size while preserving correct output this paper we present aggressive array-contraction technique study its impact on memory system performance this technique called controlled sfc combines loop shifting controlled loop fusion maximize opportunities for array contraction within given loop nesting controlled fusion scheme used apex project martha llama apl computer language marthallama retrieved january external link |website= help lee robert s two implementations apl pc magazine retrieved january iverson kenneth e dictionary apl jsoftware / iverson estate retrieved january external link |website= help b c d e f apl concepts microaplcouk retrieved nested array theory nialcom retrieved b c programmera i apl bohman fröberg studentlitteratur isbn 91-44-13162-3 iverson kenneth e apl syntax semantics ip sharp assoc retrieved january external link |website= help dyalog apl/w producing standalone 'hello world' program apl dyalog-apltrainer retrieved january external link |website= help microapl apl primitives microapl retrieved january external link |website= help nars2000 apl font - extra apl glyphs nars2000 retrieved january external link |website= help fox ralph l systematically random numbers sigapl retrieved january external link |website= help texas instruments ti full page ad introducing new set characters computerworld retrieved january dyalog apl fonts keyboards dyalog retrieved january external link |website= help smith bob nars2000 keyboard bob smith / nars2000 retrieved january external link |website= help microapl ltd introduction apl - apl symbols microapl ltd retrieved january external link |website= help brown james hawks brent trimble ray extending apl character set acm sigapl apl quote quad 41–46 doi 101145/166198166203 retrieved january kromberg morten unicode support for apl vector journal british apl association retrieved january external link |website= help hsu aaron computer science outreach education with apl dyalog ltd retrieved july dyalog inc apl fonts keyboards zarri gian piero using apl artificial intelligence environment acm sigapl retrieved january fordyce k sullivan g artificial intelligence development aids apl quote quad apl conf proc 106–113 doi101145/255315255347 kromberg morten robot programming apl retrieved january external link |website= help kromberg morten robot controlled by dyalog apl youtube / dyalog apl retrieved january external link |website= help quote-quad newsletter archived february at wayback machine iverson ken apl programming language retrieved january external link |website= help mccormick brad about apl external link |website= help brenner charles dna identification technology apl presentation at apl user conference retrieved january external link |website= help brenner charles there's dna everywhere - opportunity for apl youtube retrieved january external link |website= help further reading apl machine stanford doctoral dissertation by philip abrams personal history apl article by michael s montalbano mcintyre donald b language intellectual tool from hieroglyphics apl pdf ibm systems journal 554–581 doi101147/sj3040554 archived from original pdf on may iverson kenneth e personal view apl pdf ibm systems journal 582–593 doi101147/sj3040582 archived from original pdf on february programming language by kenneth e iverson apl exposition by kenneth e iverson brooks frederick p kenneth iverson automatic data processing system/360 edition isbn 0-471-10605-4 askoolum ajay august system building with apl + win wiley isbn 978-0-470-03020-2 falkoff adin d iverson kenneth e sussenguth edward h formal description system/360 pdf ibm systems journal new york 198–261 doi 101147/sj320198 archived from original pdf on february history programming languages chapter banon gerald jean francis bases da computacao grafica rio de janeiro campus p lepage wilbur r applied apl programming prentice hall mougin philippe ducasse stephane november oopal integrating array programming objectoriented programming pdf proceeding oopsla '03 proceedings 18th annual acm sigplan conference on object-oriented programing systems languages applications 65–77 doi101145/949343949312 dyalog limited september introduction object oriented programming for apl programmers pdf dyalog limited external links wikimedia commons has media related apl programming language sigapl - sigplan chapter on array programming languages apl wiki apl2c source links apl compilers tryaplorg online apl primer vector journal british apl association apl at dmoz dyalog apl ibm apl2 apl2000 nars2000 gnu apl openapl retrieved from https//enwikipediaorg/w/indexphptitle=aplprogramminglanguage&oldid=752213133 categories net programming languages apl programming language family array programming languages command shells dynamic programming languages dynamically typed programming languages functional languages ibm software programming languages programming languages created programming languages with iso standard hidden categories cs1 errors external links webarchive template wayback links pages using isbn magic links all articles with unsourced statements articles with unsourced statements from april articles with unsourced statements from december all articles with specifically marked weasel-worded phrases articles with specifically marked weasel-worded phrases from march articles with unsourced statements from september articles with unsourced statements from july wikipedia articles needing clarification from june all articles with dead external links articles with dead external links from june commons category with local link same on wikidata articles with dmoz links navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version other projects wikimedia commons wikiquote languages aragonés беларуская български čeština dansk deutsch eesti español esperanto فارسی français gaeilge galego 한국어 italiano magyar मराठी bahasa melayu nederlands 日本語 norsk bokmål ਪੰਜਾਬੀ polski português română русский slovenčina српски / srpski srpskohrvatski / српскохрватски suomi svenska тоҷикӣ українська 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 