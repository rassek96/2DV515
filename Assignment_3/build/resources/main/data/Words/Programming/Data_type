data type from wikipedia free encyclopedia jump navigation search this article about data types computer science programming for their use statistics see statistical data type not be confused with data structure not be confused with abstract data type computer science computer programming data type simply type classification data which tells compiler interpreter how programmer intends use data most programming languages support various types data for example real integer boolean data type provides set values from which expression ie variable function may take its values type defines operations that can be done on data meaning data way values that type can be stored contents overview definition type classes data types o primitive data types + machine data types + boolean type + numeric types o composite types + enumerations + string text types o other types + pointers references + function types o abstract data types o utility types type systems see also references further reading overview data types are used within type systems which offer various ways defining implementing using them different type systems ensure varying degrees type safety almost all programming languages explicitly include notion data type though different languages may use different terminology common data types include integers booleans characters floating-point numbers alphanumeric strings for example java programming language int type represents set 32-bit integers ranging value from well operations that can be performed on integers such addition subtraction multiplication colors on other hand are represented by three bytes denoting amounts each red green blue one string representing that color's name allowable operations include addition subtraction but not multiplication most programming languages also allow programmer define additional data types usually by combining multiple elements other types defining valid operations new data type for example programmer might create new data type named complex number that would include real imaginary parts data type also represents constraint placed upon interpretation data type system describing representation interpretation structure values objects stored computer memory type system uses data type information check correctness computer programs that access manipulate data most data types statistics have comparable types computer programming vice versa shown following table statistics programming real-valued interval scale floating-point real-valued ratio scale count data usually non-negative integer binary data boolean categorical data enumerated type random vector list array random matrix two-dimensional array random tree tree definition type parnas shore & weiss identified five definitions type that were used—sometimes implicitly—in literature types including behavior align more closely with object-oriented models whereas structured programming model would tend not include code are called plain old data structures five types are syntactic type purely syntactic label associated with variable when declared such definitions type do not give any semantic meaning types representation type defined terms its composition more primitive types—often machine types representation behaviour type defined its representation set operators manipulating these representations value space type set possible values which variable can possess such definitions make possible speak about disjoint unions cartesian products types value space behaviour type set values which variable can possess set functions that one can apply these values definition terms representation was often done imperative languages such algol pascal while definition terms value space behaviour was used higher-level languages such simula clu classes data types primitive data types main article primitive data type machine data types all data computers based on digital electronics represented bits alternatives on lowest level smallest addressable unit data usually group bits called byte usually octet which bits unit processed by machine code instructions called word typically bits most instructions interpret word binary number such that 32-bit word can represent unsigned integer values from − {\displaystyle 2^{32}-1} signed integer values from − {\displaystyle -2^{31}} − {\displaystyle 2^{31}-1} because two's complement machine language machine doesn't need distinguish between these unsigned signed data types for most part there specific set arithmetic instructions that use different interpretation bits word floating-point number machine data types need be exposed made available systems low-level programming languages allowing fine-grained control over hardware c programming language for instance supplies integer types various widths such short long if corresponding native type does not exist on target platform compiler will break them down into code using types that do exist for instance if 32-bit integer requested on bit platform compiler will tacitly treat array two bit integers several languages allow binary hexadecimal literals for convenient manipulation machine data higher level programming machine data types are often hidden abstracted implementation detail that would render code less portable if exposed for instance generic numeric type might be supplied instead integers some specific bit-width boolean type boolean type represents values true false although only two values are possible they are rarely implemented single binary digit for efficiency reasons many programming languages do not have explicit boolean type instead interpreting for instance false other values true boolean data simply refers logical structure how language interpreted machine language this case boolean refers logic false true always non zeroespecially one which known boolean numeric types such integer data types whole numbers may be sub-typed according their ability contain negative values eg unsigned c c++ may also have small number predefined subtypes such short long c/c++ allow users freely define subranges such eg pascal/ada floating point data types usually represent values high-precision fractional values rational numbers mathematically but are sometimes misleadingly called reals evocative mathematical real numbers they usually have predefined limits on both their maximum values their precision output these values are often represented decimal number format fixed point data types are convenient for representing monetary values they are often implemented internally integers leading predefined limits bignum arbitrary precision numeric types lack predefined limits they are not primitive types are used sparingly for efficiency reasons composite types main article composite type composite types are derived from more than one primitive type this can be done number ways ways they are combined are called data structures composing primitive type into compound type generally results new type eg array-of-integer different type integer array stores number elements same type specific order they are accessed randomly using integer specify which element required although elements may be almost any type arrays may be fixed-length expandable o list similar array but its contents are strung together by series references next element record also called tuple struct records are among simplest data structures record value that contains other values typically fixed number sequence typically indexed by names elements records are usually called fields members union union type definition will specify which number permitted primitive types may be stored its instances eg float long integer contrast with record which could be defined contain float integer whereas union there only one type allowed at time o tagged union also called variant variant record discriminated union disjoint union contains additional field indicating its current type for enhanced type safety set abstract data structure that can store certain values without any particular order no repeated values values themselves are not retrieved from sets rather one tests value for membership obtain boolean not object contains number data fields like record also number subroutines for accessing modifying them called methods many others are possible but they tend be further variations compounds above enumerations main article enumerated type enumerated type has distinct values which can be compared assigned but which do not necessarily have any particular concrete representation computer's memory compilers interpreters can represent them arbitrarily for example four suits deck playing cards may be four enumerators named club diamond heart spade belonging enumerated type named suit if variable v declared having suit its data type one can assign any those four values some implementations allow programmers assign integer values enumeration values even treat them type-equivalent integers string text types such alphanumeric character letter alphabet digit blank space punctuation mark etc alphanumeric strings sequence characters they are typically used represent words text character string types can store sequences characters from character set such ascii since most character sets include digits possible have numeric string such however many languages treat these belonging different type numeric value character string types can have different subtypes according required character width original 7-bit wide ascii was found be limited superseded by 16-bit sets which can encode wide variety non-latin alphabets hebrew chinese other symbols strings may be either stretch-to-fit fixed size even same programming language they may also be subtyped by their maximum size note strings are not primitive all languages for instance c they may be composed from arrays characters other types types can be based on derived from basic types explained above some languages such c functions have type derived from type their return value pointers references main non-composite derived type pointer data type whose value refers directly points another value stored elsewhere computer memory using its address primitive kind reference everyday terms page number book could be considered piece data that refers another one pointers are often stored format similar integer however attempting dereference look up pointer whose value was never valid memory address would cause program crash ameliorate this potential problem pointers are considered separate type type data they point even if underlying representation same function types main article function type ] this section needs expansion you can help by adding october abstract data types main article abstract data type any type that does not specify implementation abstract data type for instance stack which abstract type can be implemented array contiguous block memory containing multiple values linked list set non-contiguous memory blocks linked by pointers abstract types can be handled by code that does not know care what underlying types are contained them programming that agnostic about concrete data types called generic programming arrays records can also contain underlying types but are considered concrete because they specify how their contents elements are laid out memory examples include queue first-in first-out list variations are deque priority queue set can store certain values without any particular order with no repeated values stack last-in first out data structure tree hierarchical structure graph hash dictionary map associative array more flexible variation on record which name-value pairs can be added deleted freely smart pointer abstract counterpart pointer both are kinds references utility types for convenience high-level languages may supply ready-made real world data types for instance times dates monetary values memory even where language allows them be built from primitive types type systems main article type system type system associates types with each computed value by examining flow these values type system attempts prove that no type errors can occur type system question determines what constitutes type error but type system generally seeks guarantee that operations expecting certain kind value are not used with values for which that operation does not make sense compiler may use static type value optimize storage needs choice algorithms for operations on value many c compilers float data type for example represented bits accord with ieee specification for single-precision floating point numbers they will thus use floating-point-specific microprocessor operations on those values floating-point addition multiplication etc depth type constraints manner their evaluation affect typing language programming language may further associate operation with varying concrete algorithms on each type case type polymorphism type theory study type systems although concrete type systems programming languages originate from practical issues computer architecture compiler implementation language design type systems may be variously static dynamic strong weak typing so forth see also c data types data dictionary functional programming kind type theory for mathematical models types type system for different choices programming language typing references type at free on-line dictionary computing shaffer ca data structures algorithms further reading parnas david l shore john e weiss david abstract types defined classes variables proceedings conference on data abstraction definition structure 149–154 doi101145/800237807133 cardelli luca wegner peter december on understanding types data abstraction polymorphism pdf acm computing surveys new york ny usa acm 471–523 doi 101145/60416042 issn 0360-0300 cleaveland j craig introduction data types addison-wesley isbn v t e data types uninterpreted bit byte trit tryte word bit array numeric arbitrary-precision bignum complex decimal fixed point floating point o double precision o extended precision o half precision o long double o minifloat o octuple precision o quadruple precision o single precision integer o signedness interval rational text character string o null-terminated pointer address o physical o virtual reference composite algebraic data type o generalized array associative array class dependent equality inductive list object o metaobject option type product record set union o tagged other boolean bottom type collection enumerated type exception function type opaque data type recursive data type semaphore stream top type type class unit type void related topics abstract data type data structure generic kind o metaclass parametric polymorphism primitive data type protocol o interface subtyping type constructor type conversion type system see also platform-dependent independent units information authority control gnd 4011149-0 retrieved from https//enwikipediaorg/w/indexphptitle=datatype&oldid=748798353 categories data types programming language concepts hidden categories wikipedia articles needing clarification from august all articles with specifically marked weasel-worded phrases articles with specifically marked weasel-worded phrases from august articles be expanded from october all articles be expanded articles using small message boxes wikipedia articles with gnd identifiers navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version other projects wikimedia commons languages العربية asturianu беларуская тарашкевіца‎ български català čeština dansk deutsch eesti ελληνικά español esperanto فارسی français 한국어 íslenska italiano עברית қазақша latviešu lietuvių magyar bahasa melayu nederlands 日本語 norsk bokmål polski português română русский simple english slovenčina slovenščina српски / srpski svenska தமிழ் తెలుగు türkçe українська tiếng việt 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 