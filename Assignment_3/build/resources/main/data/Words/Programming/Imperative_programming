imperative programming from wikipedia free encyclopedia jump navigation search this article needs additional citations for verification please help improve this article by adding citations reliable sources unsourced material may be challenged removed october learn how when remove this template message programming paradigms action agent-oriented array-oriented automata-based concurrent computing o relativistic programming data-driven declarative contrast imperative o constraint + constraint logic concurrent constraint logic o dataflow + flow-based + cell-oriented spreadsheets + reactive o functional + functional logic + purely functional o logic + abductive logic + answer set + concurrent logic + functional logic + inductive logic dynamic end-user programming event-driven o service-oriented o time-driven expression-oriented feature-oriented function-level contrast value-level generic imperative contrast declarative o literate o procedural inductive programming language-oriented o natural language programming o discipline-specific o domain-specific o grammar-oriented + dialecting o intentional metaprogramming o automatic o reflective + attribute-oriented o homoiconic o template + policy-based non-structured contrast structured o array nondeterministic parallel computing o process-oriented point-free style o concatenative semantic structured contrast non-structured o block-structured o modular contrast monolithic o object-oriented + actor-based + class-based + concurrent + prototype-based + by separation concerns aspect-oriented role-oriented subject-oriented o recursive value-level contrast function-level probabilistic concept v t e computer science imperative programming programming paradigm that uses statements that change program's state much same way that imperative mood natural languages expresses commands imperative program consists commands for computer perform imperative programming focuses on describing how program operates term often used contrast declarative programming which focuses on what program should accomplish without specifying how program should achieve result contents imperative procedural programming rationale foundations imperative programming history imperative object-oriented languages see also notes references imperative procedural programming procedural programming type imperative programming which program built from one more procedures also termed subroutines functions terms are often used synonyms but use procedures has dramatic effect on how imperative programs appear how they are constructed heavily-procedural programming which state changes are localized procedures restricted explicit arguments returns from procedures form structured programming from 1960s onwards structured programming modular programming general have been promoted techniques improve maintainability overall quality imperative programs concepts behind object-oriented programming attempt extend this approach procedural programming could be considered step towards declarative programming programmer can often tell simply by looking at names arguments return types procedures related comments what particular procedure supposed do without necessarily looking at details how achieves its result at same time complete program still imperative since fixes statements be executed their order execution large extent rationale foundations imperative programming hardware implementation almost all computers imperative nearly all computer hardware designed execute machine code which native computer written imperative style from this low-level perspective program state defined by contents memory statements are instructions native machine language computer higher-level imperative languages use variables more complex statements but still follow same paradigm recipes process checklists while not computer programs are also familiar concepts that are similar style imperative programming each step instruction physical world holds state since basic ideas imperative programming are both conceptually familiar directly embodied hardware most computer languages are imperative style assignment statements imperative paradigm perform operation on information located memory store results memory for later use high-level imperative languages addition permit evaluation complex expressions which may consist combination arithmetic operations function evaluations assignment resulting value memory looping statements while loops do while loops for loops allow sequence statements be executed multiple times loops can either execute statements they contain predefined number times they can execute them repeatedly until some condition changes conditional branching statements allow sequence statements be executed only if some condition met otherwise statements are skipped execution sequence continues from statement following them unconditional branching statements allow execution sequence be transferred another part program these include jump called goto many languages switch subprogram subroutine procedure call which usually returns next statement after call early development high-level programming languages introduction block enabled construction programs which group statements declarations could be treated if they were one statement this alongside introduction subroutines enabled complex structures be expressed by hierarchical decomposition into simpler procedural structures many imperative programming languages such fortran basic c are abstractions assembly language history imperative object-oriented languages earliest imperative languages were machine languages original computers these languages instructions were very simple which made hardware implementation easier but hindered creation complex programs fortran developed by john backus at international business machines ibm starting was first major programming language remove obstacles presented by machine code creation complex programs fortran was compiled language that allowed named variables complex expressions subprograms many other features now common imperative languages next two decades saw development many other major high-level imperative programming languages late 1950s 1960s algol was developed order allow mathematical algorithms be more easily expressed even served operating system's target language for some computers mumps carried imperative paradigm logical extreme by not having any statements at all relying purely on commands even extent making if else commands independent each other connected only by intrinsic variable named $test cobol basic were both attempts make programming syntax look more like english 1970s pascal was developed by niklaus wirth c was created by dennis ritchie while he was working at bell laboratories wirth went on design modula-2 oberon for needs united states department defense jean ichbiah team at honeywell began designing ada after 4-year project define requirements for language specification was first published with revisions 2005–06 1980s saw rapid growth interest object-oriented programming these languages were imperative style but added features support objects last two decades 20th century saw development many such languages smalltalk-80 originally conceived by alan kay was released by xerox palo alto research center parc drawing from concepts another object-oriented language—simula which considered world's first object-oriented programming language developed 1960s—bjarne stroustrup designed c++ object-oriented language based on c design c++ began first implementation was completed late 1980s 1990s notable imperative languages drawing on object-oriented concepts were perl released by larry wall python released by guido van rossum visual basic visual c++ which included microsoft foundation class library mfc released by microsoft respectively php released by rasmus lerdorf java released by sun microsystems ruby released by yukihiro matz matsumoto microsoft's net framework imperative at its core are its main target languages vbnet c that run on however microsoft's f functional language also runs on see also computer science portal functional programming comparison programming paradigms declarative programming contrast programming paradigms object-oriented programming reactive programming history programming languages list imperative programming languages categoryprocedural programming languages lists additional imperative programming languages notes reconfigurable computing notable exception references michael stevens programming paradigms overview c - comp3610 - principles programming languages object-oriented programming pdf australian national university p archived from original on retrieved object oriented programming extends concept modularity by introducing objects line feed character |quote= at position help bruce eckel thinking java pearson education p isbn 978-0-13-187248-6 pratt terrence w marvin v zelkowitz programming languages design implementation 3rd ed englewood cliffs nj prentice hall sebesta robert w concepts programming languages 3rd ed reading mass addison-wesley publishing company originally based on article 'imperative programming' by stan seibert from nupedia licensed under gnu free documentation license v t e types programming languages actor-based array aspect-oriented class-based concatenative concurrent data-structured dataflow declarative domain-specific dynamic esoteric event-driven extensible functional imperative logic macro metaprogramming+multi-paradigm object-based object-oriented pipeline procedural prototype-based reflective rule-based scripting synchronous templating assembly compiled interpreted machine low-level high-level very high-level first generation second generation third generation fourth generation fifth generation non-english-based visual authority control lccn sh2009011030 retrieved from https//enwikipediaorg/w/indexphptitle=imperativeprogramming&oldid=751696742 categories programming paradigms hidden categories cs1 errors invisible characters articles needing additional references from october all articles needing additional references wikipedia articles with lccn identifiers navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages العربية беларуская тарашкевіца‎ български bosanski català čeština deutsch eesti ελληνικά español esperanto euskara فارسی français galego 한국어 italiano עברית bahasa melayu nederlands 日本語 norsk bokmål polski português română русиньскый русский slovenčina српски / srpski srpskohrvatski / српскохрватски suomi svenska தமிழ் ไทย українська 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 