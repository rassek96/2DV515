bcpl from wikipedia free encyclopedia jump navigation search this article about programming language for library system see baltimore county public library this article needs additional citations for verification please help improve this article by adding citations reliable sources unsourced material may be challenged removed may learn how when remove this template message bcpl paradigm procedural imperative structured designed by martin richards first appeared years ago typing discipline typeless everything word influenced by cpl influenced b c go bcpl basic combined programming language procedural imperative structured computer programming language designed by martin richards university cambridge originally intended for writing compilers for other languages bcpl no longer common use however its influence still felt because stripped down syntactically changed version bcpl called b was language on which c programming language was based this led many c programmers give bcpl humorous backronym before c programming language bcpl was first brace programming language braces survived syntactical changes have become common means denoting program source code statements practice on limited keyboards day source programs often used sequences $ $ place symbols { } single-line '//' comments bcpl which were not adopted by c reappeared c++ later c99 contents design uses implementations examples references further reading external links design bcpl was response difficulties with its predecessor combined programming language cpl created during early 1960s richards created bcpl by removing those features full language which make compilation difficult first compiler implementation for ibm under compatible time-sharing system ctss was written while richards was visiting project mac at massachusetts institute technology mit spring language was first described paper presented spring joint computer conference was designed so that small simple compilers could be written for reputedly some compilers could be run kilobytes further richards compiler itself written bcpl was easily portable bcpl was thus popular choice for bootstrapping system major reason for compiler's portability lay its structure was split into two parts front end parsed source generated o-code for virtual machine back end took o-code translated into code for target machine only 1/5 compiler's code needed be rewritten support new machine task that usually took between man-months this approach became common practice later eg pascal java but richards bcpl compiler was first define virtual machine for this purpose language unusual having only one data type word fixed number bits usually chosen align with architecture's machine word adequate capacity represent any valid storage address for many machines time this data type was 16-bit word this choice later proved be significant problem when bcpl was used on machines which smallest addressable item was not word but byte on machines with larger word sizes 32-bit 64-bit words which allowed them manage large address spaces interpretation any value was determined by operators used process values for example + added two values together treating them integers indirected through value effectively treating pointer order for this work implementation provided no type checking hungarian notation was developed help programmers avoid inadvertent type errors mismatch between bcpl's word orientation byte-oriented hardware was addressed several ways one was providing standard library routines for packing unpacking words into byte strings later two language features were added bit-field selection operator infix byte indirection operator denoted by '%' character bcpl handles bindings spanning separate compilation units unique way there are no user-declarable global variables instead there global vector which similar blank common fortran all data shared between different compilation units comprises scalars pointers vectors stored pre-arranged place global vector thus header files files included during compilation using get directive become primary means synchronizing global data between compilation units containing global directives that present lists symbolic names each paired with number that associates name with corresponding numerically addressed word global vector well variables global vector also contains bindings for external procedures this makes dynamic loading compilation units very simple achieve instead relying on link loader underlying implementation effectively bcpl gives programmer control linking process global vector also made very simple replace augment standard library routines program could save pointer from global vector original routine replace with pointer alternative version alternative might call original part its processing this could be used quick ad-hoc debugging aid philosophy bcpl can be summarised by quoting from book bcpl language its compiler philosophy bcpl not one tyrant who thinks he knows best lays down law on what what not allowed rather bcpl acts more servant offering his services best his ability without complaint even when confronted with apparent nonsense programmer always assumed know what he doing not hemmed by petty restrictions design philosophy bcpl strongly influenced b which turn influenced c there are rumours that bcpl actually stood for bootstrap cambridge programming language however cpl was never created since development stopped at bcpl acronym was reinterpreted for bcpl book uses implementations bcpl language which original hello world program was written first mud was also written bcpl mud1 several operating systems were written partially wholly bcpl for example tripos earliest versions amigados part amigaos bcpl was also initial language used seminal xerox parc alto project first modern personal computer among other projects bravo document preparation system was written bcpl early compiler bootstrapped by starting with paper tape o-code martin richards's atlas compiler targeted ict series two machines had different word-lengths vs bits different character encodings different packed string representations—and successful bootstrapping increased confidence practicality method by late implementations existed for honeywell honeywell ibm pdp-10 tx-2 cdc univac pdp-9 kdf atlas dialect bcpl was implemented at bbn without using intermediate o-code initial implementation was cross-compiler hosted on bbn's tenex pdp-10s directly targeted pdp-11s used bbn's implementation second generation imps used arpanet there was also version produced for bbc micro mid-1980s by richards computer products company started by john richards brother dr martin richards bbc domesday project made use language versions bcpl for amstrad cpc amstrad pcw computers were also released by uk software house arnor ltd macbcpl was released for apple macintosh by topexpress ltd kensington england implementations bcpl existed for at least architectures language gradually fell out favor c became popular on non-unix systems examples these complete compilable examples are from martin richards′ bcpl distribution print factorials get libhdr let start = valof $ for i = do writef%n = %i4n i facti resultis $ factn = n = -> n factn - count solutions n queens problem get libhdr global $ count all $ let tryld row rd be test row = all then count = count + else $ let poss = all & ~ld | row | rd until poss = do $ let p = poss & -poss poss = poss - p tryld + p > $ $ let start = valof $ all = for i = do $ count = try0 writef%i2-queens problem has %i5 solutionsn i count all = all + $ resultis $ references pike rob hello gophers retrieved expert c programming deep c secrets by peter van der linden prentice hall bcpl jargon file further reading martin richards bcpl reference manual memorandum m-352 project mac cambridge ma usa july martin richards bcpl - tool for compiler writing systems programming proceedings spring joint computer conference vol pp 557–566 martin richards arthur evans robert f mabee bcpl reference manual mac tr-141 project mac cambridge ma usa martin richards c whitby-strevens bcpl language its compiler cambridge university press isbn 0-521-28681-6 external links martin richards' bcpl distribution martin richards' bcpl reference manual by dennis m ritchie including his commentary about bcpl's influence on c bcpl entry jargon file nordier & associates' x86 port arnorbcpl manual retrieved from https//enwikipediaorg/w/indexphptitle=bcpl&oldid=709632641 categories procedural programming languages structured programming languages systems programming languages programming languages created university cambridge computer laboratory hidden categories articles needing additional references from may all articles needing additional references all articles with unsourced statements articles with unsourced statements from february pages using isbn magic links navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages العربية বাংলা català čeština dansk deutsch español فارسی français galego 한국어 հայերեն bahasa indonesia italiano nederlands 日本語 norsk bokmål polski português русский suomi svenska 中文 edit links this page was last modified on march at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 