literate programming from wikipedia free encyclopedia jump navigation search not be confused with natural language programming literate programming by donald knuth seminal book on literate programming literate programming approach programming introduced by donald knuth which program given explanation program logic natural language such english interspersed with snippets macros traditional source code from which compilable source code can be generated literate programming paradigm conceived by knuth represents move away from writing programs manner order imposed by computer instead enables programmers develop programs order demanded by logic flow their thoughts literate programs are written uninterrupted exposition logic ordinary human language much like text essay which macros are included hide abstractions traditional source code literate programming lp tools are used obtain two representations from literate source file one suitable for further compilation execution by computer tangled code another for viewing formatted documentation which said be woven from literate source while first generation literate programming tools were computer language-specific later ones are language-agnostic exist above programming languages contents history philosophy concept o advantages o contrast with documentation generation workflow example tools see also references further reading history philosophy literate programming was first introduced by donald e knuth main intention behind this approach was treat program literature understandable human beings this approach was implemented at stanford university part research on algorithms digital typography this implementation was further called “web” by donald knuth since he believed that was one few three-letter words english that hadn’t already been applied computer however correctly resembles complicated nature software delicately pieced together from simple materials concept literate programming writing out program logic human language with included separated by primitive markup code snippets macros macros literate source file are simply title-like explanatory phrases human language that describe human abstractions created while solving programming problem hiding chunks code lower-level macros these macros are similar algorithms pseudocode typically used teaching computer science these arbitrary explanatory phrases become precise new operators created on fly by programmer forming meta-language on top underlying programming language preprocessor used substitute arbitrary hierarchies rather interconnected 'webs' macros produce compilable source code with one command tangle documentation with another weave preprocessor also provides ability write out content macros add already created macros any place text literate program source file thereby disposing need keep mind restrictions imposed by traditional programming languages interrupt flow thought advantages according knuth literate programming provides higher-quality programs since forces programmers explicitly state thoughts behind program making poorly thought-out design decisions more obvious knuth also claims that literate programming provides first-rate documentation system which not add-on but grown naturally process exposition one's thoughts during program's creation resulting documentation allows author restart his own thought processes at any later time allows other programmers understand construction program more easily this differs from traditional documentation which programmer presented with source code that follows compiler-imposed order must decipher thought process behind program from code its associated comments meta-language capabilities literate programming are also claimed facilitate thinking giving higher bird's eye view code increasing number concepts mind can successfully retain process applicability concept programming on large scale that commercial-grade programs proven by edition tex code literate program contrast with documentation generation literate programming very often misunderstood refer only formatted documentation produced from common file with both source code comments – which properly called documentation generation – voluminous commentaries included with code this backwards well-documented code documentation extracted from code follows structure code with documentation embedded code literate programming code embedded documentation with code following structure documentation this misconception has led claims that comment-extraction tools such perl plain old documentation java javadoc systems are literate programming tools however because these tools do not implement web abstract concepts hiding behind system natural-language macros provide ability change order source code from machine-imposed sequence one convenient human mind they cannot properly be called literate programming tools sense intended by knuth workflow implementing literate programming consists two steps weaving generating comprehensive document about program its maintenance tangling generating machine executable code weaving tangling are done on same source so that they are consistent with each other example classic example literate programming literate implementation standard unix wc word counting program knuth presented cweb version this example chapter his literate programming book same example was later rewritten for noweb literate programming tool this example provides good illustration basic elements literate programming creation macros following snippet wc literate program shows how arbitrary descriptive phrases natural language are used literate program create macros which act new operators literate programming language hide chunks code other macros mark-up notation consists double angle brackets > that indicate macros @ symbol which indicates end code section noweb file > symbol stands for root topmost node literate programming tool will start expanding web macros from actually writing out expanded source code can be done from any section subsection ie piece code designated >= with equal sign so one literate program file can contain several files with machine source code purpose wc count lines words and/or characters list files number lines file /more explanations/ here then overview file wcc that defined by noweb program wcnw >= > > > > > @ we must include standard i/o definitions since we want send formatted output stdout stderr >= include @ unraveling chunks can be done any place literate program text file not necessarily order they are sequenced enclosing chunk but demanded by logic reflected explanatory text that envelops whole program program web—macros are not just section names macros are not same section names standard documentation literate programming macros can hide any chunk code behind themselves be used inside any low-level machine language operators often inside logical operators such if while case this illustrated by following snippet wc literate program present chunk which does counting was actually one simplest write we look at each character change state if begins ends word >= while { > c = ptr++ if c > ' ' && c >= can be grown later any place file by simply writing >= adding more content following snippet illustrates plus added by document formatter for readability not code grand totals must be initialized zero at beginning program if we made these variables local main we would have do this initialization explicitly however c globals are automatically zeroed rather``statically zeroed'' get >+= long totwordcount totlinecount totcharcount / total number words lines chars / @ record train thought documentation for literate program produced part writing program instead comments provided side notes source code literate program contains explanation concepts on each level with lower level concepts deferred their appropriate place which allows for better communication thought snippets literate wc above show how explanation program its source code are interwoven such exposition ideas creates flow thought that like literary work knuth wrote novel which explains code computer strategy game colossal cave adventure tools first published literate programming environment was web introduced by donald knuth for his tex typesetting system uses pascal its underlying programming language tex for typesetting documentation complete commented tex source code was published knuth's tex program volume b his 5-volume computers typesetting knuth had privately used literate programming system called doc early he was inspired by ideas pierre-arnoul de marneffe free cweb written by knuth silvio levy web adapted for c c++ runs on most operating systems can produce tex pdf documentation there are various other implementations literate programming concept axiom which evolved from scratchpad computer algebra system developed by ibm now being developed by tim daly one developer scratchpad axiom totally written literate program noweb independent programming language source code well known for its simplicity given need using only two text markup conventions two tool invocations allows for text formatting html rather than going through tex system literate modern literate programming system like noweb works with any programming language but produces pretty-printed syntax-highlighted html tries retain all advantages cweb including output formatted like cweb other notable advantages compared with older tools include being based on markdown generating well-formatted tangled code see external links funnelweb another lp tool that can produce html documentation output has more complicated markup with @ escaping any funnelweb command but has many more flexible options like noweb independent programming language source code nuweb can translate single lp source into any number code files any mix languages together with documentation latex does single invocation does not have separate weave tangle commands does not have extensibility noweb but can use listings package latex provide pretty-printing hyperref package provide hyperlinks pdf output also has extensive indexing cross-referencing facilities including cross-references from generated code back documentation both automatically generated comments strings that code can use report its behaviour vimes type-checker for z notation which shows use nuweb practical application around lines nuweb source are translated into nearly lines c/c++ code over pages documentation see external links molly lp tool written perl which aims modernize scale with folding html virtual views on code uses noweb markup for literate source files see external links codnar inverse literate programming tool available ruby gem see external links instead machine-readable source code being extracted out literate documentation sources literate documentation extracted out normal machine-readable source code files this allows these source code files be edited maintained usual approach similar that used by popular api documentation tools such javadoc such tools however generate api reference documentation while codnar generates linear narrative describing code similar that created by classical lp tools codnar can co-exist with api documentation tools allowing both reference manual linear narrative be generated from same set source code files leo text editor outlining editor which supports optional noweb cweb markup author leo mixes two different approaches first leo outlining editor which helps with management large texts second leo incorporates some ideas literate programming which its pure form ie way used by knuth web tool tools like noweb possible only with some degree inventiveness use editor way not exactly envisioned by its author modified @root nodes however this other extensions @file nodes make outline programming text management successful easy some ways similar literate programming haskell programming language has native support for semi-literate programming generally inspired by cweb but with significantly reduced functionality simpler implementation when aiming for tex output one writes plain latex file where source code marked by given surrounding environment latex can be set up handle that environment while haskell compiler looks for right markers identify haskell statements compile removing tex documentation if they were comments however described above this not literate programming sense intended by knuth haskell's functional modular nature makes literate programming directly language somewhat easier but not nearly powerful one web tools where tangle can reorganize arbitrary ways web literate programming system uses algol underlying programming language although there nothing pre-processor 'tang' force use that language emacs org-mode for literate programming through babel which allows embedding blocks source code from multiple programming languages within single text document blocks code can share data with each other display images inline be parsed into pure source code using noweb reference syntax coffeescript supports literate mode which enables programs be compiled from source document written markdown with indented blocks code wolfram language formerly known mathematica written notebooks which combine text with code swift programming language created by apple inc can be edited playgrounds which provide interactive programming environment that evaluates each statement displays live results code edited playgrounds also allow user add markup language along with code that provide headers inline formatting images julia programming language supports ijulia mode development which - inspired by ipython - works format notebooks which combine text graphs etc with written code see also sweave knitr – examples use noweb-like literate programming tool inside r language for creation dynamic statistical reports self-documenting code – source code that can be easily understood without documentation references b c v w x y z knuth donald e literate programming pdf computer journal british computer society 97–111 doi 101093/comjnl/27297 retrieved january i had feeling that top-down bottom-up were opposing methodologies one more suitable for program exposition other more suitable for program creation but after gaining experience with web i have come realize that there no need choose once for all between top-down bottom-up because program best thought web instead tree hierarchical structure present but most important thing about program its structural relationships complex piece software consists simple parts simple relations between those parts programmer's task state those parts those relationships whatever order best for human comprehension not some rigidly determined order like top-down bottom-up — donald e knuth literate programming if one remembers that first version tool was called web amusing literary reference hidden by knuth these names becomes obvious oh what tangled web we weave when first we practise deceive – sir walter scott canto vi stanza marmion epic poem about battle flodden – actual citation appeared epigraph may article by jon bentley donald knuth one classical programming pearls columns communications acm vol num on p365 web's macros are allowed have at most one parameter again i did this interests simplicity because i noticed that most applications multiple parameters could fact be reduced one-parameter case for example suppose that you want define something like other words name one macro can usefully be parameter another macro this particular trick makes possible — donald e knuth literate programming b knuth donald e binstock andrew april interview with donald knuth retrieved january yet me literate programming certainly most important thing that came out tex project not only has enabled me write maintain programs faster more reliably than ever before been one my greatest sources joy since 1980s-it has actually been indispensable at times some my major programs such mmix meta-simulator could not have been written with any other methodology that i've ever heard complexity was simply too daunting for my limited brain handle without literate programming whole enterprise would have flopped miserably literate programming what you need rise above ordinary level achievement another surprising thing that i learned while using web was that traditional programming languages had been causing me write inferior programs although i hadn't realized what i was doing my original idea was that web would be merely tool for documentation but i actually found that my web programs were better than programs i had been writing other languages — donald e knuth literate programming thus web language allows person express programs stream consciousness order tangle able scramble everything up into arrangement that pascal compiler demands this feature web perhaps its greatest asset makes web-written program much more readable than same program written purely pascal even if latter program well commented fact that there's no need be hung up on question top-down versus bottom-up since programmer can now view large program web be explored psychologically correct order perhaps greatest lesson i have learned from my recent experiences — donald e knuth literate programming b dominus mark-jason march pod not literate programming perlcom archived from original on january i chose name web partly because was one few three-letter words english that hadn't already been applied computers but time went on i've become extremely pleased with name because i think that complex piece software indeed best regarded web that has been delicately pieced together from simple materials we understand complicated system by understanding its simple parts by understanding simple relations between those parts their immediate neighbors if we express program web ideas we can emphasize its structural properties natural satisfying way — donald e knuth literate programming b c d ramsey norman may example noweb retrieved january game also known advent was originally written by crowther about lines fortran code knuth recast into web idiom available at literateprogrammingcom on knuth's website de marneffe pierre arnoul december holon programming – report pmar 73-23 university de liège service d'informatique ream edward k september leo's home page retrieved april hughes john january why functional programming matters pdf institutionen för datavetenskap chalmers tekniska högskola retrieved march sian mountbatten web literate programming with algol retrieved january jeremy ashkenas literate coffeescript retrieved november milestones computer science information technology by edwin d reilly p markup formatting reference markup overview developerapplecom retrieved further reading sewell wayne weaving program literate programming web van nostrand reinhold isbn 0-442-31946-0 knuth donald e literate programming california stanford university center for study language information isbn 978-0-937073-80-3 guari eitan m tex & latex drawing literate programming mcgraw hill isbn 0-07-911616-7 includes software nørmark kurt august literate programming – issues problems university aalborg schulte eric january multi-language computing environment for literate programming reproducible research journal statistical software external link |title= help v t e donald knuth publications art computer programming complexity songs computers typesetting concrete mathematics surreal numbers things computer scientist rarely talks about selected papers series software tex metafont mixal mix mmix gnu mdk fonts ams euler computer modern concrete roman literate programming web cweb algorithms knuth's algorithm x knuth–bendix completion algorithm knuth–morris–pratt algorithm knuth shuffle robinson–schensted–knuth correspondence trabb pardo–knuth algorithm generalization dijkstra's algorithm knuth's simpath algorithm other dancing links knuth reward check knuth prize man boy test quater-imaginary base -yllion potrzebie system weights measures retrieved from https//enwikipediaorg/w/indexphptitle=literateprogramming&oldid=750823922 categories literate programming hidden categories cs1 errors external links articles with example code navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages català deutsch español فارسی français 한국어 հայերեն 日本語 polski português русский 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 