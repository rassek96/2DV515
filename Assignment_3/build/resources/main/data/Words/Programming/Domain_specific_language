domain-specific language from wikipedia free encyclopedia   redirected from domain specific language jump navigation search programming paradigms action agent-oriented array-oriented automata-based concurrent computing o relativistic programming data-driven declarative contrast imperative o constraint + constraint logic concurrent constraint logic o dataflow + flow-based + cell-oriented spreadsheets + reactive o functional + functional logic + purely functional o logic + abductive logic + answer set + concurrent logic + functional logic + inductive logic dynamic end-user programming event-driven o service-oriented o time-driven expression-oriented feature-oriented function-level contrast value-level generic imperative contrast declarative o literate o procedural inductive programming language-oriented o natural language programming o discipline-specific o domain-specific o grammar-oriented + dialecting o intentional metaprogramming o automatic o reflective + attribute-oriented o homoiconic o template + policy-based non-structured contrast structured o array nondeterministic parallel computing o process-oriented point-free style o concatenative semantic structured contrast non-structured o block-structured o modular contrast monolithic o object-oriented + actor-based + class-based + concurrent + prototype-based + by separation concerns aspect-oriented role-oriented subject-oriented o recursive value-level contrast function-level probabilistic concept v t e domain-specific language dsl computer language specialized particular application domain this contrast general-purpose language gpl which broadly applicable across domains there wide variety dsls ranging from widely used languages for common domains such html for web pages down languages used by only one few pieces software such emacs lisp for gnu emacs xemacs dsls can be further subdivided by kind language include domain-specific markup languages domain-specific modeling languages more generally specification languages domain-specific programming languages special-purpose computer languages have always existed computer age but term domain-specific language has become more popular due rise domain-specific modeling simpler dsls particularly ones used by single application are sometimes informally called mini-languages line between general-purpose languages domain-specific languages not always sharp language may have specialized features for particular domain but be applicable more broadly conversely may principle be capable broad application but practice used primarily for specific domain for example perl was originally developed text-processing glue language for same domain awk shell scripts but was mostly used general-purpose programming language later on by contrast postscript turing complete language principle can be used for any task but practice narrowly used page description language contents use overview o design implementation o programming tools domain-specific language topics o usage patterns o design goals o idioms examples o game maker language o unix shell scripts o coldfusion markup language o erlang otp o filtermeister o mediawiki templates o software engineering uses o metacompilers o unreal engine before version other games o rules engines for policy automation o statistical modelling languages o generate model services multiple programming languages o other examples advantages disadvantages see also references further reading external links use design use appropriate dsls key part domain engineering by using language suitable domain at hand – this may consist using existing dsl gpl developing new dsl language-oriented programming considers creation special-purpose languages for expressing problems standard part problem solving process creating domain-specific language with software support rather than reusing existing language can be worthwhile if language allows particular type problem solution be expressed more clearly than existing language would allow type problem question reappears sufficiently often pragmatically dsl may be specialized particular problem domain particular problem representation technique particular solution technique other aspect domain overview domain-specific language created specifically solve problems particular domain not intended be able solve problems outside although that may be technically possible contrast general-purpose languages are created solve problems many domains domain can also be business area some examples business areas include domain-specific language for life insurance policies developed internally large insurance enterprise domain-specific language for combat simulation domain-specific language for salary calculation domain-specific language for billing domain-specific language somewhere between tiny programming language scripting language often used way analogous programming library boundaries between these concepts are quite blurry much like boundary between scripting languages general-purpose languages design implementation domain-specific languages are languages often declared syntaxes grammars with very specific goals design implementation domain-specific language can be one visual diagramming language such those created by generic eclipse modeling system programmatic abstractions such eclipse modeling framework textual languages for instance command line utility grep has regular expression syntax which matches patterns lines text sed utility defines syntax for matching replacing regular expressions often these tiny languages can be used together inside shell perform more complex programming tasks line between domain-specific languages scripting languages somewhat blurred but domain-specific languages often lack low-level functions for filesystem access interprocess control other functions that characterize full-featured programming languages scripting otherwise many domain-specific languages do not compile byte-code executable code but various kinds media objects graphviz exports postscript gif jpeg etc where csound compiles audio files ray-tracing domain- specific language like pov compiles graphics files computer language like sql presents interesting case can be deemed domain-specific language because specific specific domain sql's case accessing managing relational databases often called from another application but sql has more keywords functions than many scripting languages often thought language its own right perhaps because prevalence database manipulation programming amount mastery required be expert language further blurring this line many domain-specific languages have exposed apis can be accessed from other programming languages without breaking flow execution calling separate process can thus operate programming libraries programming tools some domain-specific languages expand over time include full-featured programming tools which further complicates question whether language domain-specific not good example functional language xslt specifically designed for transforming one xml graph into another which has been extended since its inception allow particularly its version for various forms filesystem interaction string date manipulation data typing model-driven engineering many examples domain-specific languages may be found like ocl language for decorating models with assertions qvt domain-specific transformation language however languages like uml are typically general purpose modeling languages summarize analogy might be useful very little language like knife which can be used thousands different ways from cutting food cutting down trees domain-specific language like electric drill powerful tool with wide variety uses but specific context namely putting holes things general purpose language complete workbench with variety tools intended for performing variety tasks domain-specific languages should be used by programmers who looking at their current workbench realize they need better drill find that particular domain-specific language provides exactly that domain-specific language topics usage patterns there are several usage patterns for domain-specific languages processing with standalone tools invoked via direct user operation often on command line from makefile eg grep for regular expression matching sed lex yacc graphviz tool set etc domain-specific languages which are implemented using programming language macro systems which are converted expanded into host general purpose language at compile-time read-time embedded internal domain-specific languages implemented libraries which exploit syntax their host general purpose language subset thereof while adding domain-specific language elements data types routines methods macros etc eg embedded sql linq domain-specific languages which are called at runtime from programs written general purpose languages like c perl perform specific function often returning results operation host programming language for further processing generally interpreter virtual machine for domain-specific language embedded into host application eg format strings regular expression engine domain-specific languages which are embedded into user applications eg macro languages within spreadsheets which are used execute code that written by users application dynamically generated by application both many domain-specific languages can be used more than one way dsl code embedded host language may have special syntax support such regexes sed awk perl javascript may be passed strings design goals adopting domain-specific language approach software engineering involves both risks opportunities well-designed domain-specific language manages find proper balance between these domain-specific languages have important design goals that contrast with those general-purpose languages domain-specific languages are less comprehensive domain-specific languages are much more expressive their domain domain-specific languages should exhibit minimal redundancy idioms programming idioms are methods imposed by programmers handle common development tasks eg ensure data saved before window closed edit code whenever command-line parameters change because they affect program behavior general purpose programming languages rarely support such idioms but domain-specific languages can describe them eg script can automatically save data domain-specific language can parameterize command line input examples examples domain-specific languages include html logo for pencil-like drawing verilog vhdl hardware description languages matlab gnu octave for matrix programming mathematica maple maxima for symbolic mathematics specification description language for reactive distributed systems spreadsheet formulas macros sql for relational database queries yacc grammars for creating parsers regular expressions for specifying lexers generic eclipse modeling system for creating diagramming languages csound for sound music synthesis input languages graphviz grgen software packages used for graph layout graph rewriting game maker language gml scripting language used by gamemaker studio domain-specific language targeted at novice programmers easily be able learn programming while language serves blend multiple languages including delphi c++ basic there lack structures data types other features full-fledged programming language many built-in functions are sandboxed for purpose easy portability language primarily serves make easy for anyone pick up language develop game unix shell scripts unix shell scripts give good example domain-specific language for data organization they can manipulate data files user input many different ways domain abstractions notations include streams such stdin stdout operations on streams such redirection pipe these abstractions combine make robust language describe flow organization data language consists simple interface script for running controlling processes that perform small tasks these tasks represent idioms organizing data into desired format such tables graphs charts etc these tasks consist simple control-flow string manipulation mechanisms that cover lot common usages like searching replacing string files counting occurrences strings frequency counting even though unix scripting languages are turing complete they differ from general purpose languages practice scripting languages are used weave together small unix tools such awk eg gawk ls sort wc coldfusion markup language coldfusion's associated scripting language another example domain-specific language for data-driven websites this scripting language used weave together languages services such java net c++ sms email email servers http ftp exchange directory services file systems for use websites coldfusion markup language cfml includes set tags that can be used coldfusion pages interact with data sources manipulate data display output cfml tag syntax similar html element syntax erlang otp erlang open telecom platform was originally designed for use inside ericsson domain-specific language language itself offers platform libraries create finite state machines generic servers event managers that quickly allow engineer deploy applications support libraries that have been shown industry benchmarks outperform other languages intended for mixed set domains such c c++ language now officially open source can be downloaded from their website filtermeister filtermeister programming environment with programming language that based on c for specific purpose creating photoshop -compatible image processing filter plug-ins filtermeister runs photoshop plug-in itself can load execute scripts compile export them independent plug-ins although filtermeister language reproduces significant portion c language function library contains only those features which can be used within context photoshop plug-ins adds number specific features only useful this specific domain mediawiki templates template feature mediawiki embedded domain-specific language whose fundamental purpose support creation page templates transclusion inclusion by reference mediawiki pages into other mediawiki pages detailed description that domain-specific language can be found at corresponding article at wikimedia foundation's meta-wiki software engineering uses there has been much interest domain-specific languages improve productivity quality software engineering domain-specific language could possibly provide robust set tools for efficient software engineering such tools are beginning make their way into development critical software systems software cost reduction toolkit example this toolkit suite utilities including specification editor create requirements specification dependency graph browser display variable dependencies consistency checker catch missing cases well-formed formulas specification model checker theorem prover check program properties against specification invariant generator that automatically constructs invariants based on requirements newer development language-oriented programming integrated software engineering methodology based mainly on creating optimizing using domain-specific languages metacompilers for more details on this topic see metacompiler complementing language-oriented programming well all other forms domain-specific languages are class compiler writing tools called metacompilers metacompiler not only useful for generating parsers code generators for domain-specific languages but metacompiler itself compiles domain-specific metalanguage specifically designed for domain metaprogramming besides parsing domain-specific languages metacompilers are useful for generating wide range software engineering analysis tools meta-compiler methodology often found program transformation systems metacompilers that played significant role both computer science computer industry include meta-ii its descendent treemeta unreal engine before version other games unreal unreal tournament unveiled language called unrealscript this allowed for rapid development modifications compared competitor quake using id tech engine id tech engine used standard c code meaning c had be learned properly applied while unrealscript was optimized for ease use efficiency similarly development more recent games introduced their own specific languages one more common example lua for scripting rules engines for policy automation various business rules engines have been developed for automating policy business rules used both government private industry ilog oracle policy automation dtrules drools others provide support for dsls aimed support various problem domains dtrules goes so far define interface for use multiple dsls within rule set purpose business rules engines define representation business logic human readable fashion possible this allows both subject matter experts developers work with understand same representation business logic most rules engines provide both approach simplifying control structures for business logic for example using declarative rules decision tables coupled with alternatives programming syntax favor dsls statistical modelling languages statistical modellers have developed domain-specific languages such bugs jags stan these languages provide syntax for describing bayesian model generate method for solving using simulation generate model services multiple programming languages generate object handling services based on interface description language for domain specific language such javascript for web applications html for documentation c++ for high performance code etc this done by cross language frameworks such apache thrift google protocol buffers other examples other prominent examples domain-specific languages include emacs lisp game description language opengl shading language advantages disadvantages some advantages domain-specific languages allow solutions be expressed idiom at level abstraction problem domain idea domain experts themselves may understand validate modify often even develop domain-specific language programs however this seldom case domain-specific languages allow validation at domain level long language constructs are safe any sentence written with them can be considered safe domain-specific languages can help shift development business information systems from traditional software developers typically larger group domain-experts who despite having less technical expertise have deeper knowledge domain some disadvantages cost learning new language vs its limited applicability cost designing implementing maintaining domain-specific language well tools required develop with ide finding setting maintaining proper scope difficulty balancing trade-offs between domain-specificity general-purpose programming language constructs potential loss processor efficiency compared with hand-coded software proliferation similar non-standard domain-specific languages for example dsl used within one insurance company versus dsl used within another insurance company non-technical domain experts can find hard write modify dsl programs by themselves increased difficulty integrating dsl with other components system compared integrating with general-purpose language low supply experts particular dsl tends raise labor costs harder find code examples see also this see also section may contain excessive number suggestions please ensure that only most relevant links are given that they are not red links that any links are not already this article december learn how when remove this template message architecture description language cognitive dimensions notations combinator library domain analysis domain-specific entertainment language domain-specific modeling domain-specific multimodeling configuration file fluent interface metacompiler metalinguistic abstraction metamodeling model-driven engineering multi-paradigm programming language programming domain programming paradigm specification description language probabilistic programming language ppl references b marjan mernik jan heering anthony m sloane when how develop domain-specific languages acm computing surveys 374316–344 2005doi101145/11188901118892 b diomidis spinellis notable design patterns for domain specific languages journal systems software 56191–99 february doi 101016/s0164-12120000089-3 data definition by linux information project linfo wwwlinfoorg retrieved shorre dv meta ii syntax-oriented compiler writing language proceedings 19th acm national conference pp 41301–413011 c stephen carr david luther sherian erdmann 'the tree-meta compiler-compiler system meta compiler system for univac general electric 645' university utah technical report radc-tr-69-83 b freudenthal margus january domain specific languages customs information system ieee software doi 101109/ms2009152 aram michael neumann gustaf multilayered analysis co-development business information systems pdf journal internet services applications doi 101186/s13174-015-0030-8 miotto eric on integration domain-specific scientific bodies knowledge model driven engineering pdf this article includes list references but its sources remain unclear because has insufficient inline citations please help improve this article by introducing more precise citations september learn how when remove this template message further reading dunlavey building better applications theory efficient software development international thomson publishing isbn 0-442-01740-5 constance heitmeyer using scr toolset specify software requirements proceedings second ieee workshop on industrial strength formal specification techniques boca raton fl oct marjan mernik jan heering anthony m sloane when how develop domain-specific languages acm computing surveys 374316–344 doi101145/11188901118892 diomidis spinellis notable design patterns for domain specific languages journal systems software 56191–99 february doi 101016/s0164-12120000089-3 terence parr definitive antlr reference building domain-specific languages isbn 978-0-9787392-5-6 james larus spending moore's dividend issn 0001-0782 communications acm volume issue may werner schuster june what's ruby dsl what isn't c4media retrieved martin fowler domain specific languages isbn 978-0-321-71294-3 marco brambilla jordi cabot manuel wimmer model driven software engineering practice foreword by richard soley omg chairman morgan & claypool usa synthesis lectures on software engineering pages isbn paperback isbn external links minilanguages art unix programming by eric s raymond martin fowler on domain-specific languages language workbenches also video presentation domain-specific languages annotated bibliography one day compilers building small domain-specific language using ocaml usenix association conference on domain-specific languages dsl '97 2nd conference on domain-specific languages dsl '99 internal domain-specific languages jeqn example internal domain-specific language for modeling simulation extended queueing networks articles external dsls with eclipse technology building domain-specific languages over language framework citeseerx using acceleo with gmf generating presentations from mindmap dsl modeler uml vs domain-specific languages sagar sen et al meta-model pruning citeseerx v t e types programming languages actor-based array aspect-oriented class-based concatenative concurrent data-structured dataflow declarative domain-specific dynamic esoteric event-driven extensible functional imperative logic macro metaprogramming+multi-paradigm object-based object-oriented pipeline procedural prototype-based reflective rule-based scripting synchronous templating assembly compiled interpreted machine low-level high-level very high-level first generation second generation third generation fourth generation fifth generation non-english-based visual authority control gnd 7585264-0 retrieved from https//enwikipediaorg/w/indexphptitle=domain-specificlanguage&oldid=751044820 categories domain-specific programming languages programming language classification hidden categories all articles with unsourced statements articles with unsourced statements from september wikipedia articles needing clarification from march articles with unsourced statements from september articles with excessive see also sections from december articles lacking in-text citations from september all articles lacking in-text citations wikipedia articles with gnd identifiers pages using isbn magic links navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages čeština deutsch español فارسی français 한국어 italiano magyar 日本語 norsk bokmål polski português русский српски / srpski suomi українська 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 