programming paradigm from wikipedia free encyclopedia   redirected from multi-paradigm programming language jump navigation search this article about classification programming languages for definition term programming model see programming model for use term project management methodology see software development § programming paradigm this article needs additional citations for verification please help improve this article by adding citations reliable sources unsourced material may be challenged removed february learn how when remove this template message programming paradigms action agent-oriented array-oriented automata-based concurrent computing o relativistic programming data-driven declarative contrast imperative o constraint + constraint logic concurrent constraint logic o dataflow + flow-based + cell-oriented spreadsheets + reactive o functional + functional logic + purely functional o logic + abductive logic + answer set + concurrent logic + functional logic + inductive logic dynamic end-user programming event-driven o service-oriented o time-driven expression-oriented feature-oriented function-level contrast value-level generic imperative contrast declarative o literate o procedural inductive programming language-oriented o natural language programming o discipline-specific o domain-specific o grammar-oriented + dialecting o intentional metaprogramming o automatic o reflective + attribute-oriented o homoiconic o template + policy-based non-structured contrast structured o array nondeterministic parallel computing o process-oriented point-free style o concatenative semantic structured contrast non-structured o block-structured o modular contrast monolithic o object-oriented + actor-based + class-based + concurrent + prototype-based + by separation concerns aspect-oriented role-oriented subject-oriented o recursive value-level contrast function-level probabilistic concept v t e programming paradigms are way classify programming languages according style computer programming features various programming languages determine which programming paradigms they belong result some languages fall into only one paradigm while others fall into multiple paradigms some paradigms are concerned mainly with implications for execution model language such allowing side effects whether sequence operations defined by execution model other paradigms are concerned mainly with way that code organized such grouping code into units along with state that modified by code yet others are concerned mainly with style syntax grammar common programming paradigms include imperative which allows side effects functional which disallows side effects declarative which does not state order which operations execute object-oriented which groups code together with state code modifies procedural which groups code into functions logic which has particular style execution model coupled particular style syntax grammar symbolic programming which has particular style syntax grammar for example languages that fall into imperative paradigm have two main features they state order which operations occur with constructs that explicitly control that order they allow side effects which state can be modified at one point time within one unit code then later read at different point time inside different unit code communication between units code not explicit meanwhile object-oriented programming code organized into objects that contain state that only modified by code that part object most object-oriented languages are also imperative languages contrast languages that fit declarative paradigm do not state order which execute operations instead they supply number operations that are available system along with conditions under which each allowed execute implementation language's execution model tracks which operations are free execute chooses order on its own contents overview history o machine code o procedural languages o object-oriented programming o further paradigms multi-paradigm see also references external links overview overview various programming paradigms according peter van roy just software engineering process defined by differing methodologies so programming languages models computation are defined by differing paradigms some languages are designed support one paradigm smalltalk supports object-oriented programming haskell supports functional programming while other programming languages support multiple paradigms such object pascal c++ java c scala visual basic common lisp scheme perl python ruby oz f for example programs written c++ object pascal can be purely procedural purely object-oriented can contain elements both other paradigms software designers programmers decide how use those paradigm elements object-oriented programming programs are treated set interacting objects functional programming programs are treated sequence stateless function evaluations when programming computers systems with many processors process-oriented programming programs are treated sets concurrent processes acting on logically shared data structures many programming paradigms are well known for techniques they forbid for those they enable for instance pure functional programming disallows use side-effects while structured programming disallows use goto statement partly for this reason new paradigms are often regarded doctrinaire overly rigid by those accustomed earlier styles yet avoiding certain techniques can make easier understand program behavior prove theorems about program correctness programming paradigms can also be compared with programming models which allow invoking external execution model by using only api programming models can also be classified into paradigms based on features execution model for parallel computing using programming model instead language common reason that details parallel hardware leak into abstractions used program hardware this causes programmer have map patterns algorithm onto patterns execution model which have been inserted due leakage hardware into abstraction consequence no one parallel programming language maps well all computation problems thus more convenient use base sequential language insert api calls parallel execution models via programming model such parallel programming models can be classified according abstractions that reflect hardware such shared memory distributed memory with message passing notions place visible code so forth these can be considered flavors programming paradigm that apply only parallel languages programming models some programming language researchers criticise notion paradigms classification programming languages eg krishnamurthi they argue that many programming languages cannot be strictly classified into one paradigm but rather include features from several paradigms history different approaches programming have developed over time being identified such either at time retrospectively early approach consciously identified such structured programming advocated since mid 1960s concept programming paradigm such dates at least turing award lecture robert w floyd entitled paradigms programming which cites notion paradigm used by thomas kuhn his structure scientific revolutions machine code lowest level programming paradigms are machine code which directly represents instructions contents program memory sequence numbers assembly language where machine instructions are represented by mnemonics memory addresses can be given symbolic labels these are sometimes called first- second-generation languages 1960s assembly languages were developed support library copy quite sophisticated conditional macro generation preprocessing abilities call subroutines external variables common sections globals enabling significant code re-use isolation from hardware specifics via use logical operators such read/write/get/put assembly was still used for time critical systems often embedded systems gives most direct control what machine does procedural languages next advance was development procedural languages these third-generation languages first described high-level languages use vocabulary related problem being solved for example common business oriented language cobol – uses terms like file move copy formula translation fortran – using mathematical language terminology was developed mainly for scientific engineering problems algorithmic language algol – focused on being appropriate language define algorithms while using mathematical language terminology targeting scientific engineering problems just like fortran programming language one pl/i – hybrid commercial-scientific general purpose language supporting pointers beginners all purpose symbolic instruction code basic – was developed enable more people write programs c – general-purpose programming language initially developed by dennis ritchie between at at&t bell labs all these languages follow procedural paradigm that they describe step by step exactly procedure that should according particular programmer at least be followed solve specific problem efficacy efficiency any such solution are both therefore entirely subjective highly dependent on that programmer's experience inventiveness ability object-oriented programming main article object-oriented programming following widespread use procedural languages object-oriented programming oop languages were created such simula smalltalk c++ c eiffel java these languages data methods manipulate are kept one unit called object only way that another object user can access data via object's methods thus inner workings object may be changed without affecting any code that uses object there still some controversy raised by alexander stepanov richard stallman other programmers concerning efficacy oop paradigm versus procedural paradigm need for every object have associative methods leads some skeptics associate oop with software bloat attempt resolve this dilemma came through polymorphism because object-oriented programming considered paradigm not language possible create even object-oriented assembler language high level assembly hla example this that fully supports advanced data types object-oriented assembly language programming – despite its early origins thus differing programming paradigms can be seen rather like motivational memes their advocates rather than necessarily representing progress from one level next precise comparisons efficacy competing paradigms are frequently made more difficult because new differing terminology applied similar entities processes together with numerous implementation distinctions across languages further paradigms literate programming form imperative programming structures programs human-centered web hypertext essay documentation integral program program structured following logic prose exposition rather than compiler convenience independent imperative branch declarative programming paradigms were developed these languages computer told what problem not how solve problem – program structured set properties find expected result not procedure follow given database set rules computer tries find solution matching all desired properties archetype declarative language fourth generation language sql family functional languages logic programming functional programming subset declarative programming programs written using this paradigm use functions blocks code intended behave like mathematical functions functional languages discourage changes value variables through assignment making great deal use recursion instead logic programming paradigm views computation automated reasoning over body knowledge facts about problem domain are expressed logic formulae programs are executed by applying inference rules over them until answer problem found set formulae proved inconsistent symbolic programming paradigm that describes programs able manipulate formulas program components data programs can thus effectively modify themselves appear learn making them suited for applications such artificial intelligence expert systems natural language processing computer games languages that support this paradigm include lisp prolog multi-paradigm see also comparison multi-paradigm programming languages multi-paradigm programming language programming language that supports more than one programming paradigm design goal such languages allow programmers use most suitable programming style associated language constructs for given job considering that no single paradigm solves all problems easiest most efficient way one example c which includes imperative object-oriented paradigms together with certain level support for functional programming with features like delegates allowing functions be treated first-order objects type inference anonymous functions language integrated query other examples are f scala which provide similar functionality c but also include full support for functional programming including currying pattern matching algebraic data types lazy evaluation tail recursion immutability etc perhaps most extreme example oz which has subsets that adhere logic oz descends from logic programming functional object-oriented dataflow concurrent other paradigms oz was designed over ten-year period combine harmonious way concepts that are traditionally associated with different programming paradigms lisp while often taught functional language known for its malleability thus its ability engulf many paradigms see also computer programming portal architecture description language comparison programming languages comparison programming paradigms domain-specific language mindset modeling language programming domain type system turing completeness von neumann programming languages references nørmark kurt overview four main programming paradigms aalborg university may retrieved september frans coenen characteristics declarative programming languages cgicsclivacuk retrieved b michael covington csci/arti 4540/6540 first lecture on symbolic programming lisp pdf university georgia retrieved peter van roy programming paradigms for dummies what every programmer should know pdf infouclacbe retrieved frank rubin march 'goto considered harmful' considered harmful pdf communications acm 195–196 doi 101145/214748315722 archived from original pdf on march krishnamurthi shriram november teaching programming languages post-linnaean age sigplan acm pp 81–83 not floyd r w paradigms programming communications acm doi101145/359138359140 mode inheritance cloning hooks & oop google groups discussion business glossary symbolic programming definition allbusinesscom retrieved multi-paradigm programming language developermozillaorg retrieved october external links classification principal programming paradigms how programming paradigms evolve get adopted software engineering v t e types сomputer languages types architecture description hardware description knowledge representation markup modeling programming language query specification stylesheet transformation see also categorylists computer languages categorylists programming languages list programming languages by type v t e software engineering fields computer programming requirements engineering software deployment software design software maintenance software testing systems analysis formal methods concepts data modeling enterprise architecture functional specification modeling language orthogonality programming paradigm software software archaeology software architecture software configuration management software development methodology software development process software quality software quality assurance software verification validation structured analysis orientations agile aspect-oriented object orientation ontology service orientation sdlc models developmental agile eup executable uml incremental model iterative model prototype model rad up scrum spiral model v-model waterfall model xp other spice cmmi data model er model function model information model metamodeling object model systems model view model languages idef uml sysml software engineers victor basili kent beck grady booch fred brooks barry boehm ward cunningham tom demarco edsger w dijkstra martin fowler c r hoare watts humphrey michael jackson ivar jacobson stephen j mellor bertrand meyer david parnas winston w royce james rumbaugh niklaus wirth edward yourdon mohamed fayad related fields computer science computer engineering project management risk management systems engineering category commons v t e major fields computer science note this template roughly follows acm computing classification hardware printed circuit board peripheral integrated circuit very-large-scale integration energy consumption electronic design automation computer systems organization computer architecture embedded system real-time computing dependability networks network architecture network protocol network components network scheduler network performance evaluation network service software organization interpreter middleware virtual machine operating system software quality software notations tools programming paradigm programming language compiler domain-specific language modeling language software framework integrated development environment software configuration management software library software repository software development software development process requirements analysis software design software construction software deployment software maintenance programming team open-source model theory computation model computation formal language automata theory computational complexity theory logic semantics algorithms algorithm design analysis algorithms randomized algorithm computational geometry mathematics computing discrete mathematics probability statistics mathematical software information theory mathematical analysis numerical analysis information systems database management system information storage systems enterprise information system social information systems geographic information system decision support system process control system multimedia information system data mining digital library computing platform digital marketing world wide web information retrieval security cryptography formal methods security services intrusion detection system hardware security network security information security application security human–computer interaction interaction design social computing ubiquitous computing visualization accessibility concurrency concurrent computing parallel computing distributed computing multithreading multiprocessing artificial intelligence natural language processing knowledge representation reasoning computer vision automated planning scheduling search methodology control method philosophy artificial intelligence distributed artificial intelligence machine learning supervised learning unsupervised learning reinforcement learning multi-task learning machine learning algorithms cross-validation graphics animation rendering image manipulation graphics processing unit mixed reality virtual reality image compression solid modeling applied computing e-commerce enterprise software computational mathematics computational physics computational chemistry computational biology computational social science computational engineering computational healthcare digital art electronic publishing cyberwarfare electronic voting video game word processing operations research educational technology document management computer science portal programming v t e programming language generations 1gl 2gl 3gl 4gl 5gl v t e programming languages comparison timeline history assembly basic c c++ c cobol fortran go haskell java javascript js lisp lua objective-c pascal perl php python ruby shell smalltalk swift visual basic net vbnet more category comparison lists o alphabetical o categorical o generational o non-english-based v t e types programming languages actor-based array aspect-oriented class-based concatenative concurrent data-structured dataflow declarative domain-specific dynamic esoteric event-driven extensible functional imperative logic macro metaprogramming+multi-paradigm object-based object-oriented pipeline procedural prototype-based reflective rule-based scripting synchronous templating assembly compiled interpreted machine low-level high-level very high-level first generation second generation third generation fourth generation fifth generation non-english-based visual v t e major fields computer science note this template roughly follows acm computing classification hardware printed circuit board peripheral integrated circuit very-large-scale integration energy consumption electronic design automation computer systems organization computer architecture embedded system real-time computing dependability networks network architecture network protocol network components network scheduler network performance evaluation network service software organization interpreter middleware virtual machine operating system software quality software notations tools programming paradigm programming language compiler domain-specific language modeling language software framework integrated development environment software configuration management software library software repository software development software development process requirements analysis software design software construction software deployment software maintenance programming team open-source model theory computation model computation formal language automata theory computational complexity theory logic semantics algorithms algorithm design analysis algorithms randomized algorithm computational geometry mathematics computing discrete mathematics probability statistics mathematical software information theory mathematical analysis numerical analysis information systems database management system information storage systems enterprise information system social information systems geographic information system decision support system process control system multimedia information system data mining digital library computing platform digital marketing world wide web information retrieval security cryptography formal methods security services intrusion detection system hardware security network security information security application security human–computer interaction interaction design social computing ubiquitous computing visualization accessibility concurrency concurrent computing parallel computing distributed computing multithreading multiprocessing artificial intelligence natural language processing knowledge representation reasoning computer vision automated planning scheduling search methodology control method philosophy artificial intelligence distributed artificial intelligence machine learning supervised learning unsupervised learning reinforcement learning multi-task learning machine learning algorithms cross-validation graphics animation rendering image manipulation graphics processing unit mixed reality virtual reality image compression solid modeling applied computing e-commerce enterprise software computational mathematics computational physics computational chemistry computational biology computational social science computational engineering computational healthcare digital art electronic publishing cyberwarfare electronic voting video game word processing operations research educational technology document management computer science portal retrieved from https//enwikipediaorg/w/indexphptitle=programmingparadigm&oldid=750226234multi-paradigm categories programming paradigms programming language classification programming language topics hidden categories articles needing additional references from february all articles needing additional references navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages العربية български bosanski català čeština dansk deutsch eesti ελληνικά español esperanto euskara فارسی français galego 한국어 bahasa indonesia italiano עברית latina latviešu magyar македонски bahasa melayu mirandés nederlands 日本語 norsk bokmål polski português română русский scots shqip simple english српски / srpski srpskohrvatski / српскохрватски suomi svenska ไทย türkçe українська اردو tiếng việt 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 