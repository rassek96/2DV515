prolog from wikipedia free encyclopedia jump navigation search this article about programming language for narrative device see prologue for other uses see prologue disambiguation prolog paradigm logic programming designed by alain colmerauer first appeared filename extensions pl pro p major implementations bprolog ciao eclipse gnu prolog jekejeke prolog logic programming associates poplog prolog p quintus sicstus strawberry swi-prolog tuprolog xsb yap-prolog dialects iso prolog edinburgh prolog influenced by planner influenced clojure visual prolog mercury oz erlang strand kl0 kl1 datalog chr xsb prolog at wikibooks prolog general-purpose logic programming language associated with artificial intelligence computational linguistics prolog has its roots first-order logic formal logic unlike many other programming languages prolog declarative program logic expressed terms relations represented facts rules computation initiated by running query over these relations language was first conceived by group around alain colmerauer marseille france early 1970s first prolog system was developed by colmerauer with philippe roussel prolog was one first logic programming languages remains most popular among such languages today with several free commercial implementations available language has been used for theorem proving expert systems well its original intended field use natural language processing modern prolog environments support creating graphical user interfaces well administrative networked applications prolog well-suited for specific tasks that benefit from rule-based logical queries such searching databases voice control systems filling templates contents syntax semantics o data types o rules facts o execution o loops recursion o negation programming prolog o hello world o compiler optimization o quicksort design patterns higher-order programming modules parsing meta-interpreters reflection turing completeness implementation o iso prolog o compilation o tail recursion o term indexing o hashing o tabling o implementation hardware limitations extensions o types o modes o constraints o object-orientation o graphics o concurrency o web programming o adobe flash o other interfaces other languages history use industry see also o related languages references further reading external links syntax semantics main article prolog syntax semantics prolog program logic expressed terms relations computation initiated by running query over these relations relations queries are constructed using prolog's single data type term relations are defined by clauses given query prolog engine attempts find resolution refutation negated query if negated query can be refuted ie instantiation for all free variables found that makes union clauses singleton set consisting negated query false follows that original query with found instantiation applied logical consequence program this makes prolog other logic programming languages particularly useful for database symbolic mathematics language parsing applications because prolog allows impure predicates checking truth value certain special predicates may have some deliberate side effect such printing value screen because this programmer permitted use some amount conventional imperative programming when logical paradigm inconvenient has purely logical subset called pure prolog well number extralogical features data types prolog's single data type term terms are either atoms numbers variables compound terms atom general-purpose name with no inherent meaning examples atoms include x red 'taco' 'some atom' numbers can be floats integers variables are denoted by string consisting letters numbers underscore characters beginning with upper-case letter underscore variables closely resemble variables logic that they are placeholders for arbitrary terms compound term composed atom called functor number arguments which are again terms compound terms are ordinarily written functor followed by comma-separated list argument terms which contained parentheses number arguments called term's arity atom can be regarded compound term with arity zero examples compound terms are truckyear'mazda' 'personfriends'zelda special cases compound terms list ordered collection terms denoted by square brackets with terms separated by commas case empty list for example strings sequence characters surrounded by quotes equivalent list numeric character codes generally local character encoding unicode if system supports unicode for example be not be rules facts prolog programs describe relations defined by means clauses pure prolog restricted horn clauses there are two types clauses facts rules rule form head - body read head true if body true rule's body consists calls predicates which are called rule's goals built-in predicate /2 meaning 2-arity operator with name denotes conjunction goals /2 denotes disjunction conjunctions disjunctions can only appear body not head rule clauses with empty bodies are called facts example fact cattom which equivalent rule cattom - true built-in predicate true/0 always true given above fact one can ask tom cat - cattom yes what things are cats - catx x = tom clauses with bodies are called rules example rule animalx - catx if we add that rule ask what things are animals - animalx x = tom due relational nature many built-in predicates they can typically be used several directions for example length/2 can be used determine length list lengthlist l given list list well generate list skeleton given length lengthx also generate both list skeletons their lengths together lengthx l similarly append/3 can be used both append two lists appendlista listb x given lists lista listb well split given list into parts appendx y list given list list for this reason comparatively small set library predicates suffices for many prolog programs general purpose language prolog also provides various built-in predicates perform routine activities like input/output using graphics otherwise communicating with operating system these predicates are not given relational meaning are only useful for side-effects they exhibit on system for example predicate write/1 displays term on screen execution execution prolog program initiated by user's posting single goal called query logically prolog engine tries find resolution refutation negated query resolution method used by prolog called sld resolution if negated query can be refuted follows that query with appropriate variable bindings place logical consequence program that case all generated variable bindings are reported user query said have succeeded operationally prolog's execution strategy can be thought generalization function calls other languages one difference being that multiple clause heads can match given call that case system creates choice-point unifies goal with clause head first alternative continues with goals that first alternative if any goal fails course executing program all variable bindings that were made since most recent choice-point was created are undone execution continues with next alternative that choice-point this execution strategy called chronological backtracking for example motherchildtrude sally fatherchildtom sally fatherchildtom erica fatherchildmike tom siblingx y - parentchildz x parentchildz y parentchildx y - fatherchildx y parentchildx y - motherchildx y this results following query being evaluated true - siblingsally erica yes this obtained follows initially only matching clause-head for query siblingsally erica first one so proving query equivalent proving body that clause with appropriate variable bindings place ie conjunction parentchildzsally parentchildzerica next goal be proved leftmost one this conjunction ie parentchildz sally two clause heads match this goal system creates choice-point tries first alternative whose body fatherchildz sally this goal can be proved using fact fatherchildtom sally so binding z = tom generated next goal be proved second part above conjunction parentchildtom erica again this can be proved by corresponding fact since all goals could be proved query succeeds since query contained no variables no bindings are reported user query with variables like - fatherchildfather child enumerates all valid answers on backtracking notice that with code stated above query - siblingsally sally also succeeds one would insert additional goals describe relevant restrictions if desired loops recursion iterative algorithms can be implemented by means recursive predicates negation built-in prolog predicate \+/1 provides negation failure which allows for non-monotonic reasoning goal \+ illegalx rule legalx - \+ illegalx evaluated follows prolog attempts prove illegalx if proof for that goal can be found original goal ie \+ illegalx fails if no proof can be found original goal succeeds therefore \+/1 prefix operator called not provable operator since query - \+ goal succeeds if goal not provable this kind negation sound if its argument ground ie contains no variables soundness lost if argument contains variables proof procedure complete particular query - legalx can now not be used enumerate all things that are legal programming prolog prolog loading code referred consulting prolog can be used interactively by entering queries at prolog prompt - if there no solution prolog writes no if solution exists then printed if there are multiple solutions query then these can be requested by entering semi-colon there are guidelines on good programming practice improve code efficiency readability maintainability here follow some example programs written prolog hello world example query - write'hello world' nl hello world true - compiler optimization any computation can be expressed declaratively sequence state transitions example optimizing compiler with three optimization passes could be implemented relation between initial program its optimized form programoptimizedprog0 prog - optimizationpass1prog0 prog1 optimizationpass2prog1 prog2 optimizationpass3prog2 prog equivalently using dcg notation programoptimized --> optimizationpass1 optimizationpass2 optimizationpass3 quicksort quicksort sorting algorithm relating list its sorted version partition partition pivot smalls bigs - x @ smalls = partitionxs pivot rest bigs bigs = partitionxs pivot smalls rest quicksort --> quicksort --> { partitionxs x smaller bigger } quicksortsmaller quicksortbigger design patterns design pattern general reusable solution commonly occurring problem software design prolog design patterns go under various names skeletons techniques cliches program schemata logic description schemata alternative design patterns higher order programming higher-order programming main articles higher-order logic higher-order programming higher-order predicate predicate that takes one more other predicates arguments although support for higher-order programming takes prolog outside domain first-order logic which does not allow quantification over predicates iso prolog now has some built-in higher-order predicates such call/1 call/2 call/3 findall/3 setof/3 bagof/3 furthermore since arbitrary prolog goals can be constructed evaluated at run-time easy write higher-order predicates like maplist/2 which applies arbitrary predicate each member given list sublist/3 which filters elements that satisfy given predicate also allowing for currying convert solutions from temporal representation answer substitutions on backtracking spatial representation terms prolog has various all-solutions predicates that collect all answer substitutions given query list this can be used for list comprehension for example perfect numbers equal sum their proper divisors perfectn - between1 inf n u n // findalld between1ud n mod d == ds sumlistds n this can be used enumerate perfect numbers also check whether number perfect another example predicate maplist applies predicate p all corresponding positions pair lists maplist maplistp - callp x y maplistp xs ys when p predicate that for all x pxy unifies y with single unique value maplistp xs ys equivalent applying map function functional programming ys = mapfunction xs higher-order programming style prolog was pioneered hilog λprolog modules for programming large prolog provides module system module system standardised by iso however not all prolog compilers support modules there are compatibility problems between module systems major prolog compilers consequently modules written on one prolog compiler will not necessarily work on others parsing main articles prolog syntax semantics § definite clause grammars definite clause grammar there special notation called definite clause grammars dcgs rule defined via -->/2 instead -/2 expanded by preprocessor expandterm/2 facility analogous macros other languages according few straightforward rewriting rules resulting ordinary prolog clauses most notably rewriting equips predicate with two additional arguments which can be used implicitly thread state around analogous monads other languages dcgs are often used write parsers list generators they also provide convenient interface difference lists meta-interpreters reflection prolog homoiconic language provides many facilities for reflection its implicit execution strategy makes possible write concise meta-circular evaluator also called meta-interpreter for pure prolog code solvetrue solvesubgoal1subgoal2 - solvesubgoal1 solvesubgoal2 solvehead - clausehead body solvebody where true represents empty conjunction clausehead body unifies with clauses database form head - body since prolog programs are themselves sequences prolog terms -/2 infix operator that are easily read inspected using built-in mechanisms like read/1 possible write customized interpreters that augment prolog with domain-specific features for example sterling shapiro present meta-interpreter that performs reasoning with uncertainty reproduced here with slight modifications330 solvetrue - solvesubgoal1subgoal2 certainty - solvesubgoal1 certainty1 solvesubgoal2 certainty2 certainty mincertainty1 certainty2 solvegoal - builtingoal goal solvehead certainty - clausecfhead body certainty1 solvebody certainty2 certainty certainty1 certainty2 this interpreter uses table built-in prolog predicates form builtina b builtinreadx % etc clauses represented clausecfhead body certainty given those can be called solvegoal certainty execute goal obtain measure certainty about result turing completeness pure prolog based on subset first-order predicate logic horn clauses which turing-complete turing completeness prolog can be shown by using simulate turing machine turingtape0 tape - performq0 ls tape0 rs reversels ls1 appendls1 rs tape performqf ls ls rs rs - performq0 ls0 ls rs0 rs - symbolrs0 sym rsrest onceruleq0 sym q1 newsym action actionaction ls0 ls1 rs1 performq1 ls1 ls rs1 rs symbol b symbol sym rs actionleft ls0 ls rs0 rs - leftls0 ls rs0 rs actionstay ls ls rs rs actionright ls0 rs left rs0 left ls rs simple example turing machine specified by facts ruleq0 q0 right ruleq0 b qf stay this machine performs incrementation by one number unary encoding loops over any number cells appends additional at end example query result - turing ts ts = this illustrates how any computation can be expressed declaratively sequence state transitions implemented prolog relation between successive states interest implementation further information comparison prolog implementations iso prolog iso prolog standard consists two parts iso/iec 13211-1 published aims standardize existing practices many implementations core elements prolog has clarified aspects language that were previously ambiguous leads portable programs there are two corrigenda cor12007 cor22012 iso/iec 13211-2 published adds support for modules standard standard maintained by iso/iec jtc1/sc22/wg17 working group ansi x3j17 us technical advisory group for standard compilation for efficiency prolog code typically compiled abstract machine code often influenced by register-based warren abstract machine wam instruction set some implementations employ abstract interpretation derive type mode information predicates at compile time compile real machine code for high performance devising efficient implementation methods for prolog code field active research logic programming community various other execution methods are employed some implementations these include clause binarization stack-based virtual machines tail recursion prolog systems typically implement well-known optimization method called tail call optimization tco for deterministic predicates exhibiting tail recursion more generally tail calls clause's stack frame discarded before performing call tail position therefore deterministic tail-recursive predicates are executed with constant stack space like loops other languages term indexing main article term indexing finding clauses that are unifiable with term query linear number clauses term indexing uses data structure that enables sub-linear-time lookups indexing only affects program performance does not affect semantics most prologs only use indexing on first term indexing on all terms expensive but techniques based on field-encoded words superimposed codewords provide fast indexing across full query head hashing some prolog systems such lpa prolog swi-prolog now implement hashing help handle large datasets more efficiently this tends yield very large performance gains when working with large corpora such wordnet tabling some prolog systems bprolog xsb yap b-prolog ciao implement memoization method called tabling which frees user from manually storing intermediate results subgoals encountered query evaluation are maintained table along with answers these subgoals if subgoal re-encountered evaluation reuses information from table rather than re-performing resolution against program clauses tabling space-time tradeoff execution time can be reduced by using more memory store intermediate results implementation hardware during fifth generation computer systems project there were attempts implement prolog hardware with aim achieving faster execution with dedicated architectures furthermore prolog has number properties that may allow speed-up through parallel execution more recent approach has been compile restricted prolog programs field programmable gate array however rapid progress general-purpose hardware has consistently overtaken more specialised architectures limitations although prolog widely used research education prolog other logic programming languages have not had significant impact on computer industry general most applications are small by industrial standards with few exceeding lines code programming large considered be complicated because not all prolog compilers support modules there are compatibility problems between module systems major prolog compilers portability prolog code across implementations has also been problem but developments since have meant portability within family edinburgh/quintus derived prolog implementations good enough allow for maintaining portable real-world applications software developed prolog has been criticised for having high performance penalty compared conventional programming languages particular prolog's non-deterministic evaluation strategy can be problematic when programming deterministic computations when even using don't care non-determinism where single choice made instead backtracking over all possibilities cuts other language constructs may have be used achieve desirable performance destroying one prolog's main attractions ability run programs backwards forwards prolog not purely declarative because constructs like cut operator procedural reading prolog program needed understand order clauses prolog program significant execution strategy language depends on other logic programming languages such datalog are truly declarative but restrict language result many practical prolog programs are written conform prolog's depth-first search order rather than purely declarative logic programs extensions various implementations have been developed from prolog extend logic programming capabilities numerous directions these include types modes constraint logic programming clp object-oriented logic programming oolp concurrency linear logic llp functional higher-order logic programming capabilities plus interoperability with knowledge bases types prolog untyped language attempts introduce types date back 1980s there are still attempts extend prolog with types type information useful not only for type safety but also for reasoning about prolog programs modes mode specifier interpretation + nonvar on entry - var on entry not specified syntax prolog does not specify which arguments predicate are inputs which are outputs however this information significant recommended that be included comments modes provide valuable information when reasoning about prolog programs can also be used accelerate execution constraints constraint logic programming extends prolog include concepts from constraint satisfaction constraint logic program allows constraints body clauses such axy - x+y>0 suited large-scale combinatorial optimisation problems thus useful for applications industrial settings such automated time-tabling production scheduling most prolog systems ship with at least one constraint solver for finite domains often also with solvers for other domains like rational numbers object-orientation flora-2 object-oriented knowledge representation reasoning system based on f-logic incorporates hilog transaction logic defeasible reasoning logtalk object-oriented logic programming language that can use most prolog implementations back-end compiler multi-paradigm language includes support for both prototypes classes oblog small portable object-oriented extension prolog by margaret mcdougall edcaad university edinburgh objlog was frame-based language combining objects prolog ii from cnrs marseille france prolog++ was developed by logic programming associates first released for ms-dos pcs support for other platforms was added second version was released book about prolog++ by chris moss was published by addison-wesley graphics prolog systems that provide graphics library are swi-prolog visual-prolog lpa prolog for windows b-prolog concurrency prolog-mpi open-source swi-prolog extension for distributed computing over message passing interface also there are various concurrent prolog programming languages web programming some prolog implementations notably swi-prolog ciao support server-side web programming with support for web protocols html xml there are also extensions support semantic web formats such rdf owl prolog has also been suggested client-side language adobe flash cedar free basic prolog interpreter from version above cedar has fca flash cedar app support this provides new platform programming prolog through actionscript other f-logic extends prolog with frames/objects for knowledge representation transaction logic extends prolog with logical theory state-changing update operators has both model-theoretic procedural semantics ow prolog has been created order answer prolog's lack graphics interface interfaces other languages frameworks exist which can bridge between prolog other languages lpa intelligence server allows embedding lpa prolog within c c c++ java vb delphi net lua python other languages exploits dedicated string data-type which lpa prolog provides logic server api allows both extension embedding prolog c c++ java vb delphi net any language/environment which can call dll so implemented for amzi prolog amzi prolog + logic server but api specification can be made available for any implementation jpl bi-directional java prolog bridge which ships with swi-prolog by default allowing java prolog call each other recursively known have good concurrency support under active development interprolog programming library bridge between java prolog implementing bi-directional predicate/method calling between both languages java objects can be mapped into prolog terms vice versa allows development guis other functionality java while leaving logic processing prolog layer supports xsb with support for swi-prolog yap planned for prova provides native syntax integration with java agent messaging reaction rules prova positions itself rule-based scripting rbs system for middleware language breaks new ground combining imperative declarative programming prol embeddable prolog engine for java includes small ide few libraries gnu prolog for java implementation iso prolog java library gnuprolog ciao provides interfaces c c++ java relational databases c-prolog prolog interpreter written managed c can easily be integrated c programs characteristics reliable fairly fast interpreter command line interface windows-interface builtin dcg xml-predicates sql-predicates extendible complete source code available including parser generator that can be used for adding special purpose extensions jekejeke prolog api provides tightly coupled concurrent call-in call-out facilities between prolog java android with marked possibility create individual knowledge base objects can be used embed iso prolog interpreter standalones applets servlets apks etc warren abstract machine for php prolog compiler interpreter php library that can be used standalone within symfony21 framework history name prolog was chosen by philippe roussel abbreviation for programmation en logique french for programming logic was created around by alain colmerauer with philippe roussel based on robert kowalski's procedural interpretation horn clauses was motivated part by desire reconcile use logic declarative knowledge representation language with procedural representation knowledge that was popular north america late 1960s early 1970s according robert kowalski first prolog system was developed by colmerauer phillipe roussel first implementations prolog were interpreters however david h d warren created warren abstract machine early influential prolog compiler which came define edinburgh prolog dialect which served basis for syntax most modern implementations european ai researchers favored prolog while americans favored lisp reportedly causing many nationalistic debates on merits languages much modern development prolog came from impetus fifth generation computer systems project fgcs which developed variant prolog named kernel language for its first operating system pure prolog was originally restricted use resolution theorem prover with horn clauses form h - b1 bn application theorem-prover treats such clauses procedures show/solve h show/solve b1 bn pure prolog was soon extended however include negation failure which negative conditions form notbi are shown by trying failing solve corresponding positive conditions bi subsequent extensions prolog by original team introduced constraint logic programming abilities into implementations use industry prolog has been used watson watson uses ibm's deepqa software apache uima unstructured information management architecture framework system was written various languages including java c++ prolog runs on suse linux enterprise server operating system using apache hadoop framework provide distributed computing prolog used for pattern matching over natural language parse trees developers have stated we required language which we could conveniently express pattern matching rules over parse trees other annotations such named entity recognition results technology that could execute these rules very efficiently we found that prolog was ideal choice for language due its simplicity expressiveness see also comparison prolog implementations logico-linguistic modeling method for building knowledge-based system that uses prolog answer set programming fully declarative approach logic programming association for logic programming related languages gödel language strongly typed implementation concurrent constraint logic programming built on sicstus prolog visual prolog formerly known pdc prolog turbo prolog strongly typed object-oriented dialect prolog which very different from standard prolog turbo prolog was marketed by borland but now developed marketed by danish firm pdc prolog development center that originally produced datalog subset prolog limited relationships that may be stratified does not allow compound terms contrast prolog datalog not turing-complete mercury offshoot prolog geared toward software engineering large with static polymorphic type system well mode determinism system csc graphtalk proprietary implementation warren's abstract machine with additional object-oriented properties some ways prolog subset planner ideas planner were later further developed scientific community metaphor agentspeak variant prolog for programming agent behavior multi-agent systems erlang began life with prolog-based implementation maintains much prolog's unification-based syntax references clocksin william f mellish christopher s programming prolog berlin new york springer-verlag isbn 978-3-540-00678-7 bratko ivan prolog programming for artificial intelligence harlow england new york addison wesley isbn 0-201-40375-7 covington michael natural language processing for prolog programmers englewood cliffs nj prentice hall isbn 978-0-13-629213-5 b lloyd j w foundations logic programming berlin springer-verlag isbn 3-540-13299-6 b kowalski r early years logic programming pdf communications acm doi101145/3504335046 colmerauer roussel p birth prolog pdf acm sigplan notices doi101145/155360155362 see logic programming § history stickel m e prolog technology theorem prover implementation by extended prolog compiler journal automated reasoning 353–380 doi101007/bf00297245 merritt dennis building expert systems prolog berlin springer-verlag isbn 0-387-97016-9 fernando c n pereira stuart m shieber prolog natural language analysis microtome b adam lally paul fodor march natural language processing with prolog ibm watson system association for logic programming see also watson computer covington michael bagnara roberto o'keefe richard wielemaker jan price simon coding guidelines for prolog theory practice logic programming 889–927 arxiv doi101017/s1471068411000391 kirschenbaum m sterling ls applying techniques skeletons constructing logic programs ed jmj jacquet 27–140 sterling leon patterns for prolog programming computational logic logic programming beyond lecture notes computer science / lecture notes artificial intelligence pp 17–26 doi101007/3-540-45628-715 isbn 978-3-540-43959-2 d barker-plummer cliche programming prolog m bruynooghe editor proc second workshop on meta-programming logic pages 247--256 dept comp sci katholieke univ leuven gegg-harrison t s representing logic program schemata prolog procs twelfth international conference on logic programming pp 467–481 deville yves logic programming systematic program development wokingham england addison-wesley isbn 0-201-17576-2 b naish lee higher-order logic programming prolog report department computer science university melbourne retrieved with regard prolog variables variables only head are implicitly universally quantified those only body are implicitly existentially quantified retrieved b c iso/iec information technology — programming languages — prolog international organization for standardization geneva iso/iec 13211-2 modules b paulo moura logtalk association logic programming newsletter vol n august b shapiro ehud y sterling leon art prolog advanced programming techniques cambridge mass mit press isbn 0-262-19338-8 ed-dbali deransart pierre l cervoni prolog standard reference manual berlin springer isbn 3-540-59304-7 cs1 maint multiple names authors list link iso/iec 13211-11995/cor12007 iso/iec 13211-11995/cor wg17 working group x3j17 committee david h d warren abstract prolog instruction set technical note sri international menlo park ca october van roy p despain m high-performance logic programming with aquarius prolog compiler computer doi101109/2108055 graf peter term indexing springer isbn 978-3-540-61040-3 wise michael j powers david m w indexing prolog clauses via superimposed code words field encoded words international symposium on logic programming pp 203–210 colomb robert m enhancing unification prolog through clause indexing journal logic programming doi 101016/0743-10669190004-9 swift t tabling for non‐monotonic programming annals mathematics artificial intelligence 3/4 201–200 doi 101023/a1018990308362 zhou neng-fa sato taisuke efficient fixpoint computation linear tabling pdf proceedings 5th acm sigplan international conference on principles practice declarative programming 275–283 swift t warren d s xsb extending prolog with tabled logic programming theory practice logic programming doi101017/s1471068411000500 abe s bandoh t yamaguchi s kurosawa k kiriyama k high performance integrated prolog processor ipp proceedings 14th annual international symposium on computer architecture - isca '87 p doi101145/3035030362 isbn robinson ian prolog processor based on pattern matching memory device third international conference on logic programming lecture notes computer science springer pp 172–179 doi101007/3-540-16492-873 isbn 978-3-540-16492-0 taki k nakajima k nakashima h ikeda m performance architectural evaluation psi machine acm sigplan notices doi101145/3620536195 gupta g pontelli e ali k m carlsson m hermenegildo m v parallel execution prolog programs survey acm transactions on programming languages systems doi 101145/504083504085 b logic programming for real world zoltan somogyi fergus henderson thomas conway richard o'keefe proceedings ilps'95 postconference workshop on visions for future logic programming prolog database jan wielemaker vıtor santos costa portability prolog programs theory case-studies ciclops-wlpe workshop b kiselyov oleg kameyama yukiyoshi re-thinking prolog proc 31st meeting japan society for software science technology torkel franzen declarative vs procedural association logic programming newsletter vol dantsin evgeny eiter thomas gottlob georg voronkov andrei complexity expressive power logic programming acm computing surveys 374–425 doi101145/502807502810 mycroft o'keefe r polymorphic type system for prolog artificial intelligence doi 101016/0004-37028490017-1 pfenning frank types logic programming cambridge mass mit press isbn 0-262-16131-1 schrijvers tom santos costa vitor wielemaker jan demoen bart towards typed prolog maria garcia de la banda enrico pontelli logic programming 24th international conference iclp udine italy december 9-13 proceedings lecture notes computer science pp 693–697 doi 101007/978-3-540-89982-259 isbn b apt k r marchiori e reasoning about prolog programs from modes through types assertions formal aspects computing doi101007/bf01213601 o'keefe richard craft prolog cambridge mass mit press isbn 0-262-15039-5 michael covington et al coding guidelines for prolog arxiv09112899 roy p demoen b willems y d improving execution speed compiled prolog with modes clause selection determinism tapsoft '87 lecture notes computer science p doi101007/bfb0014976 isbn 3-540-17611-x jaffar j constraint logic programming survey journal logic programming 19-20 503–581 doi 101016/0743-10669490033-7 colmerauer alain opening prolog iii universe byte august wallace m constraint logic programming computational logic logic programming beyond lecture notes computer science pp 512–556 doi101007/3-540-45628-719 isbn xpce graphics library prolog-mpi appslumiilv retrieved ehud shapiro family concurrent logic programming languages acm computing surveys september wielemaker j huang z van der meij l swi-prolog web theory practice logic programming doi 101017/s1471068407003237 jan wielemaker michiel hildebrand jacco van ossenbruggen s heymans polleres e ruckhaus d pearse g gupta eds using {prolog} fundament for applications on semantic web pdf proceedings 2nd workshop on applications logic programming web semantic web semantic web services ceur workshop proceedings porto portugal ceur-wsorg pp 84–98 processing owl2 ontologies using thea application logic programming vangelis vassiliadis jan wielemaker chris mungall proceedings 5th international workshop on owl experiences directions owled chantilly va united states october 23–24 loke s w davison secure prolog-based mobile code theory practice logic programming doi 101017/s1471068401001211 pountain dick october pop snap byte p retrieved october further reading blackburn patrick bos johan striegnitz kristina learn prolog now isbn 1-904987-17-6 ivan bratko prolog programming for artificial intelligence isbn 0-201-40375-7 william f clocksin christopher s mellish programming prolog using iso standard springer 5th ed isbn 978-3-540-00678-7 this edition updated for iso prolog previous editions described edinburgh prolog william f clocksin clause effect prolog programming for working programmer springer isbn 978-3-540-62971-9 michael covington donald nute andre vellino prolog programming depth isbn 0-13-138645-x michael covington natural language processing for prolog programmers isbn 978-0-13-629213-5 m s dawe cmdawe prolog for computer sciences springer verlag iso/iec information technology — programming languages — prolog international organization for standardization geneva feliks kluźniak stanisław szpakowicz with contribution by janusz s bień prolog for programmers academic press inc london available under creative commons license at isbn 0-12-416521-4 richard o'keefe craft prolog isbn 0-262-15039-5 robert smith john gibson aaron sloman 'poplog's two-level virtual machine support for interactive languages' research directions cognitive science volume artificial intelligence eds d sleeman n bernsen lawrence erlbaum associates pp 203–231 leon sterling ehud shapiro art prolog advanced programming techniques isbn 0-262-19338-8 david h d warren luis m pereira fernando pereira prolog - language its implementation compared with lisp acm sigart bulletin archive issue proceedings symposium on artificial intelligence programming languages pp – external links wikibooks has more on topic prolog complangprolog faq prolog iso standard decsystem-10 prolog user’s manual plain text describes typical edinburgh prolog prolog tutorial by jrfisher runnable examples by lloyd allison on-line guide prolog programming by roman bartak prolog logic programming by dr peter hancox adventure prolog online tutorial by dennis merritt building expert systems prolog online book by dennis merritt literate programming prolog object oriented language prolog oolp other extensions by richard katz amzi prolog + logic server™ by dennis merritt prolog tutorial i by clive spenser lpa prolog tutorial ii by clive spenser lpa jiprolog by ugo chirico v t e iso standards by standard number list iso standards / iso romanizations / iec standards 1–9999 o o o o o o o o o o o o o o o o o o o 1073-1 o o o 8820-5 o o o o o o o o o -8-i o o o o o o o o 9000/9001 10000–19999 10118-3 o o o o o tr 12234-2 o o 13406-2 o o o o o o o o o o o wip 16612-2 ts 19775-1 19794-5 20000+ series 29199-2 o o o category retrieved from https//enwikipediaorg/w/indexphptitle=prolog&oldid=750738610 categories computer science prolog programming language family logic programming languages declarative programming languages dynamically typed programming languages programming languages with iso standard programming languages created pattern matching programming languages hidden categories articles with inconsistent citation formats cs1 maint multiple names authors list wikipedia articles needing clarification from october all articles with unsourced statements articles with unsourced statements from november articles containing french-language text all articles with specifically marked weasel-worded phrases articles with specifically marked weasel-worded phrases from february pages using isbn magic links navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version other projects wikibooks languages العربية aragonés asturianu azərbaycanca беларуская български català čeština dansk deitsch deutsch eesti ελληνικά español esperanto euskara فارسی français gaeilge galego 한국어 hrvatski ido bahasa indonesia íslenska italiano עברית latviešu lietuvių la lojban magyar македонски bahasa melayu nederlands 日本語 norsk bokmål polski português română русиньскый русский simple english slovenčina slovenščina српски / srpski suomi svenska தமிழ் ไทย тоҷикӣ türkçe українська tiếng việt yorùbá žemaitėška 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 