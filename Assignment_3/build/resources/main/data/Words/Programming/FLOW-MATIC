flow-matic from wikipedia free encyclopedia jump navigation search flow-matic paradigm imperative designed by remington rand grace hopper first appeared platform univac i influenced cobol flow-matic originally known b-0 business language version was first english-like data processing language was developed for univac i at remington rand under grace hopper during period from until had strong influence on development cobol contents development innovations influence sample program notes references development hopper had found that business data processing customers were uncomfortable with mathematical notation late she proposed that data processing problems should be expressed using english keywords but rand management considered idea unfeasible early she her team wrote specification for such programming language implemented prototype flow-matic compiler became publicly available early was substantially complete innovations influence first flow-matic was first programming language express operations using english-like statements second flow-matic was first system distinctly separate description data from operations on its data definition language unlike its executable statements was not english-like rather data structures were defined by filling pre-printed forms flow-matic was major influence design cobol since only its direct descendent aimaco were actual use at time several elements flow-matic were incorporated into cobol defining files advance separating into input output files qualification data-names clause if end data at end clause on file read operations figurative constant zero originally zzzzzz where number z's indicated precision dividing program into sections separating different parts program flow-matic sections included computer environment division directory data division compiler procedure division sample program sample flow-matic program input inventory file-a price file-b output priced-inv file-c unpriced-inv file-d hsp d compare product-no with product-no b if greater go operation if equal go operation otherwise go operation transfer d write-item d jump operation transfer c move unit-price b unit-price c write-item c read-item if end data go operation jump operation read-item b if end data go operation jump operation set operation go operation jump operation test product-no b against zzzzzzzzzzzz if equal go operation otherwise go operation rewind b close-out files c d stop end note that this sample includes only executable statements program compiler section record fields product-no unit-price would have been defined directory section which did not use english-like syntax notes hopper p “i used be mathematics professor at that time i found there were certain number students who could not learn mathematics i then was charged with job making easy for businessmen use our computers i found was not question whether they could learn mathematics not but whether they would they said ‘throw those symbols out — i do not know what they mean i have not time learn symbols’ i suggest reply those who would like data processing people use mathematical symbols that they make them first attempt teach those symbols vice-presidents colonel admiral i assure you that i tried it” hopper p b c sammet p sammet p sperry rand p sammet p hopper p references hopper grace keynote address history programming languages i acm pp 16–20 isbn 0-12-745040-8 hopper grace “automatic programming present status future trends” mechanisation thought processes national physical laboratory symposium her majesty's stationery office pp 155–200 cited knuth donald trabb pardo luis august early development programming languages technical report computer science department school humanities sciences stanford university retrieved sammet jean programming languages history fundamentals prentice-hall p 316–324 isbn 0-13-729988-5 sammet jean early history cobol history programming languages i acm pp 199–243 isbn 0-12-745040-8 sperry rand corporation introducing new language for automatic programming univac flow-matic this article based on material taken from free on-line dictionary computing prior november incorporated under relicensing terms gfdl version later retrieved from https//enwikipediaorg/w/indexphptitle=flow-matic&oldid=711648809 categories procedural programming languages cobol programming languages created 1950s programming languages created hidden categories pages using isbn magic links navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages deutsch español galego 한국어 português edit links this page was last modified on march at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 