switch statement from wikipedia free encyclopedia   redirected from case statement jump navigation search this article needs additional citations for verification please help improve this article by adding citations reliable sources unsourced material may be challenged removed april learn how when remove this template message computer programming languages switch statement type selection control mechanism used allow value variable expression change control flow program execution via multiway branch switch statements exist most high-level imperative programming languages such pascal ada c/c++ c java many other types language using such keywords switch case select inspect switch statements come two main variants structured switch pascal which takes exactly one branch unstructured switch c which functions type goto main reasons for using switch include improving clarity by reducing otherwise repetitive coding if heuristics permit also offering potential for faster execution through easier compiler optimization many cases switch statement c switch age { case printfyou're one break case printfyou're two break case printfyou're three break case printfyou're four break default printfyou're neither break } contents history typical syntax semantics o fallthrough compilation advantages disadvantages alternative uses o exception handling alternatives see also references further reading history his text introduction metamathematics stephen kleene formally proved that case function if-then-else function being its simplest form primitive recursive function where he defines notion definition by cases following manner f function φ defined thus φx1 xn = φ1x1 xn if q1x1 xn φmx1 xn if qmx1 xn φm+1x1 xn otherwise where q1 qm are mutually exclusive predicates φx1 xn shall have value given by first clause which applies primitive recursive φ1 φm+1 q1 qm+1 kleene provides proof this terms boolean-like recursive functions sign-of sg not sign ~sg kleene 1952222-223 first returns if its input positive −1 if its input negative boolos-burgess-jeffrey make additional observation that definition by cases must be both mutually exclusive collectively exhaustive they too offer proof primitive recursiveness this function boolos-burgess-jeffrey 200274-75 if-then-else basis mccarthy formalism its usage replaces both primitive recursion mu-operator typical syntax most languages programmers write switch statement across many individual lines using one two keywords typical syntax involves first line containing basic keyword usually switch case select followed by expression which often referred control expression control variable switch statement subsequent lines defining actual cases values with corresponding sequences statements for execution when match occurs break statement typically follows switch statement end said statement each alternative begins with particular value list values see below that control variable may match which will cause control go corresponding sequence statements value list/range values usually separated from corresponding statement sequence by colon by implication arrow many languages every case must also be preceded by keyword such case when optional default case typically also allowed specified by default else keyword this executes when none other cases match control expression semantics semantically there are two main forms switch statements first form are structured switches pascal where exactly one branch taken cases are treated separate exclusive blocks this functions generalized if–then–else conditional here with any number branches not just two second form are unstructured switches c where cases are treated labels within single block switch functions generalized goto this distinction referred treatment fallthrough which elaborated below fallthrough many languages only matching block executed then execution continues at end switch statement these include pascal family object pascal modula oberon ada etc well modern forms fortran basic dialects influenced by pascal most functional languages many others allow multiple values execute same code avoid needing duplicate code pascal-type languages permit any number values per case given comma-separated list range combination languages derived from c more generally those influenced by fortran's computed goto instead feature fallthrough where control moves matching case then execution continues falls through statements associated with next case source text this also allows multiple values match same point without any special syntax they are just listed with empty bodies values can be special conditioned with code case body practice fallthrough usually prevented with break keyword at end matching body which exits execution switch block but this can cause bugs due unintentional fallthrough if programmer forgets insert break statement this thus seen by many language wart warned against some lint tools syntactically cases are interpreted labels not blocks switch break statements explicitly change control flow some languages influenced by c such javascript retain default fallthrough while others remove fallthrough only allow special circumstances notable variations on this c-family include c which all blocks must be terminated with break unless block empty ie fallthrough used way specify multiple values some cases languages provide optional fallthrough for example perl does not fall through by default but case may explicitly do so using continue keyword this prevents unintentional fallthrough but allows when desired similarly bash defaults not falling through when terminated with but more recent versions allow fallthrough with & instead example switch statement that relies on fallthrough duff's device compilation optimizing compilers such gcc clang may compile switch statement into either branch table binary search through values cases branch table allows switch statement determine with small constant number comparisons which branch execute without having go through list comparisons while binary search takes only logarithmic number comparisons measured number cases switch statement normally only method finding out if this optimization has occurred by actually looking at resultant assembly machine code output that has been generated by compiler therefore seldom if ever done by hll programmers advantages disadvantages this article contains pro con list which sometimes inappropriate please help improve by integrating both sides into more neutral presentation remove this template if you feel that such list appropriate for this article april some languages programming environments use case switch statement considered superior equivalent series if else if statements because easier debug eg setting breakpoints on code vs call table if debugger has no conditional breakpoint capability easier read subjectively easier understand therefore easier maintain fixed depth sequence if else if statements may yield deep nesting making compilation more difficult especially automatically generated code faster execution potential easier verify that all values are handled compilers can issue warning if some enum values are not handled additionally optimized implementation may execute much faster than alternative because often implemented by using indexed branch table for example deciding program flow based on single character's value if correctly implemented vastly more efficient than alternative reducing instruction path lengths considerably when implemented such switch statement essentially becomes perfect hash terms control flow graph switch statement consists two nodes entrance exit plus one edge between them for each option by contrast sequence ifelse ifelse if statements has additional node for every case other than first last together with corresponding edge resulting control flow graph for sequences ifs thus has many more nodes almost twice many edges with these not adding any useful information however simple branches if statements are individually conceptually easier than complex branch switch statement terms cyclomatic complexity both these options increase by k−1 if given k cases when implemented with fall-through default path switch/case statements are frequent source bugs among even experienced programmers given that practice break almost always desired path but not default behavior switch/case construct at least c java alternative uses many languages evaluate expressions inside switch blocks at runtime allowing number less obvious uses for construction this prohibits certain compiler optimizations so more common dynamic scripting languages where enhanced flexibility more important than performance overhead for example php constant can be used variable check against first case statement which evaluates that constant will be executed switchtrue { case $x == 'hello' foo break case $z == 'howdy' break } switch5 { case $x break case $y break } this feature also useful for checking multiple variables against one value rather than one variable against many values cobol also supports this form others forms evaluate statement ruby due its handling === equality statement can be used test for variable’s class case input when array then puts 'input array' when hash then puts 'input hash' end ruby also returns value that can be assigned variable doesn’t actually require case have any parameters acting bit like else if statement catfood = case when catage senior else normal end exception handling number languages implement form switch statement exception handling where if exception raised block separate branch chosen depending on exception some cases default branch if no exception raised also present early example modula-3 which use tryexcept syntax where each except defines case this also found delphi python scala visual basicnet alternatives series if-else conditionals that examine target one value at time fallthrough behavior can be achieved with sequence if conditionals each without else clause lookup table which contains keys case values values part under case statement some languages only actual data types are allowed values lookup table other languages also possible assign functions lookup table values gaining same flexibility real switch statement see control table article for more detail on this lua does not support case/switch statements this lookup technique one way implement switch statements lua language which has no built-in switch some cases lookup tables are more efficient than non-optimized switch statements since many languages can optimize table lookups whereas switch statements are not optimized unless range values small with few gaps non-optimized non-binary search lookup however will almost certainly be slower than either non-optimized switch equivalent multiple if-else statements control table that may be implemented simple lookup table can also be customized accommodate multiple conditions on multiple inputs if required usually exhibits greater 'visual compactness' than equivalent switch that can occupy many statements pattern matching which used implement switch-like functionality many functional languages see also algorithmic efficiency branch table control table duff's device references definition by cases kleene vlad lazarenko from switch statement down machine code switch statement lua further reading stephen kleene 10th reprint introduction metamathematics north-holland publishing company amsterdam nl isbn 0-7204-2103-9 george boolos john burgess richard jeffrey computability logic fourth edition cambridge university press cambridge uk isbn 0-521-00758-5 paperback cf page 74-75 retrieved from https//enwikipediaorg/w/indexphptitle=switchstatement&oldid=750018125 categories conditional constructs hidden categories articles needing additional references from april all articles needing additional references wikipedia articles needing style editing from april articles containing pro con lists all articles with unsourced statements articles with unsourced statements from october pages using isbn magic links navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages dansk español français 한국어 hrvatski íslenska italiano 日本語 polski русский українська edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 