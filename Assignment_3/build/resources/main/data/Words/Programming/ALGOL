algol from wikipedia free encyclopedia jump navigation search this article about programming language family for other uses see algol disambiguation algol paradigm procedural imperative structured designed by bauer bottenbruch rutishauser samelson backus katz perlis wegstein naur vauquois van wijngaarden woodger green mccarthy first appeared influenced most subsequent imperative languages so-called algol-like languages eg simula c cpl pascal ada algol short for algorithmic language family imperative computer programming languages originally developed mid-1950s which greatly influenced many other languages was standard method for algorithm description used by acm textbooks academic sources for more than thirty years sense that most modern languages are algol-like was arguably most influential four high-level programming languages with which was roughly contemporary fortran lisp cobol was designed avoid some perceived problems with fortran eventually gave rise many other programming languages including bcpl b pascal pl/i simula c algol introduced code blocks begin …end pairs for delimiting them was also first language implementing nested function definitions with lexical scope moreover was first programming language which gave detailed attention formal language definition through algol report introduced backus–naur form principal formal grammar notation for language design there were three major specifications algol – originally proposed be called ial for international algebraic language algol – first implemented x1 algol mid-1960 – revised algol – revised – introduced new elements including flexible arrays slices parallelism operator identification various extensibility features niklaus wirth based his own algol w on algol before developing pascal algol-w for ibm was based on proposal for next generation algol but algol committee decided on design that was more complex advanced rather than cleaned simplified algol official algol versions are named after year they were first published algol substantially different from algol was not well received so that general algol means algol dialects thereof fragments algol-like syntax are sometimes still used pseudocode contents important implementations history o algol programming language research o ial implementations timeline properties examples portability issues o code sample comparisons + algol + algol o timeline hello world + algol ial + algol family + algol o timeline algol special characters see also references further reading external links important implementations international algebraic language ial was extremely influential generally considered ancestor most modern programming languages so-called algol-like languages additionally computer science algol object code was simple compact stack-based instruction set architecture mainly used teaching compiler construction other high order languages which algol generally considered first history algol was developed jointly by committee european american computer scientists meeting at eth zurich cf algol specified three different syntaxes reference syntax publication syntax implementation syntax different syntaxes permitted use different keyword names conventions for decimal points commas vs periods for different languages algol was used mostly by research computer scientists united states europe its use commercial applications was hindered by absence standard input/output facilities its description lack interest language by large computer vendors other than burroughs corporation algol did however become standard for publication algorithms had profound effect on future language development john backus developed backus normal form method describing programming languages specifically for algol was revised expanded by peter naur for algol at donald knuth's suggestion renamed backus–naur form peter naur editor algol bulletin i was drawn into international discussions language was selected be member european language design group november this capacity i was editor algol report produced result algol meeting paris january following people attended meeting paris from january friedrich l bauer peter naur heinz rutishauser klaus samelson bernard vauquois adriaan van wijngaarden michael woodger from europe john w backus julien green charles katz john mccarthy alan j perlis joseph henry wegstein from usa alan perlis gave vivid description meeting meetings were exhausting interminable exhilarating one became aggravated when one's good ideas were discarded along with bad ones others nevertheless diligence persisted during entire period chemistry was excellent algol inspired many languages that followed c r hoare remarked here language so far ahead its time that was not only improvement on its predecessors but also on nearly all its successors scheme programming language variant lisp that adopted block structure lexical scope algol also adopted wording revised report on algorithmic language scheme for its standards documents homage algol algol programming language research peter landin noted language algol was first language combine seamlessly imperative effects with call-by-name lambda calculus perhaps most elegant formulation language due john c reynolds best exhibits its syntactic semantic purity reynolds's idealized algol also made convincing methodological argument regarding suitability local effects context call-by-name languages be contrasted with global effects used by call-by-value languages such ml conceptual integrity language made one main objects semantic research along with pcf ml ial implementations timeline date there have been at least augmentations extensions derivations sublanguages algol name year author country description target cpu zmmd-implementation friedrich l bauer heinz rutishauser klaus samelson hermann bottenbruch germany implementation algol z22 later zuse's z23 was delivered with algol compiler x1 algol august edsger w dijkstra jaap zonneveld netherlands first implementation algol electrologica x1 elliott algol 1960s c r hoare uk subject turing lecture elliott & elliott jovial jules schwarz usa dod hol prior ada various see article burroughs algol several variants burroughs corporation with participation by hoare dijkstra others usa basis burroughs now unisys mcp based computers burroughs large systems their midrange well case algol case institute technology usa simula was originally contracted simulation extension case algol univac gogol william mckeeman usa for odin time-sharing system pdp-1 regnecentralen algol peter naur jørn jensen denmark implementation full algol dask at regnecentralen dartmouth algol thomas eugene kurtz et al usa lgp-30 uss algol l petrone italy algol translator g van der mey wl van der poel netherlands staatsbedrijf der posterijen telegrafie en telefonie zebra kidsgrove algol f g duncan uk english electric company kdf9 valgol val schorre usa test meta ii compiler compiler whetstone brian randell l j russell uk atomic power division english electric company precursor ferranti pegasus national physical laboratories ace english electric deuce implementations english electric company kdf9 nu algol norway univac algek ussr minsk-22 алгэк based on algol-60 cobol support for economical tasks algol w niklaus wirth usa proposed successor algol ibm system/360 malgol publ viil m kotli & m rakhendi estonian ssr minsk-22 algams gams group гамс группа автоматизации программирования для машин среднего класса cooperation comecon academies science comecon minsk-22 later es evm besm algol/zam poland polish zam computer simula ole-johan dahl kristen nygaard norway algol with classes univac chinese algol china chinese characters expressed via symbol system dg/l usa dg eclipse family computers s-algol ron morrison uk addition orthogonal datatypes with intended use teaching language pdp-11 with subsequent implementation on java vm burroughs dialects included special bootstrapping dialects such espol newp latter still used for unisys mcp system software properties algol officially defined had no i/o facilities implementations defined their own ways that were rarely compatible with each other contrast algol offered extensive library transput algol parlance for input/output facilities algol allowed for two evaluation strategies for parameter passing common call-by-value call-by-name call-by-name has certain effects contrast call-by-reference for example without specifying parameters value reference impossible develop procedure that will swap values two parameters if actual parameters that are passed are integer variable array that indexed by that same integer variable think passing pointer swapi function now that every time swap referenced reevaluated say i = = so every time swap referenced it'll return other combination values so on similar situation occurs with random function passed actual argument call-by-name known by many compiler designers for interesting thunks that are used implement donald knuth devised man boy test separate compilers that correctly implemented recursion non-local references this test contains example call-by-name algol was defined using two-level grammar formalism invented by adriaan van wijngaarden which bears his name van wijngaarden grammars use context-free grammar generate infinite set productions that will recognize particular algol program notably they are able express kind requirements that many other programming language standards are labelled semantics have be expressed ambiguity-prone natural language prose then implemented compilers ad hoc code attached formal language parser examples portability issues code sample comparisons algol way bold text has be written depends on implementation eg 'integer' including quotation marks for integer this known stropping procedure absmaxa sizen m resulty subscriptsi k value n m array integer n m i k real y comment absolute greatest element matrix size n by m transferred y subscripts this element i k begin integer p q y = i = k = for p = step until n do for q = step until m do if absa > y then begin y = absa i = p k = q end end absmax here's example how produce table using elliott algol floating point algol test' begin real abcd' read d' for a= step d until do begin print punch3££l' b = sina' c = cosa' print punch3samelinealigned16abc' end' end' punch3 sends output teleprinter rather than tape punch sameline suppresses carriage return + line feed normally printed between arguments aligned16 controls format output with digit before after decimal point algol following code samples are algol versions above algol code samples algol reuses algol 60's stropping algol 68's case tokens with bold typeface are reserved words types modes operators proc abs max = real ref real y ref int i kreal comment absolute greatest element matrix size ⌈a by 2⌈a transferred y subscripts this element i k comment begin real y = i = ⌊a k = 2⌊a for p from ⌊a ⌈a do for q from 2⌊a 2⌈a do if abs > y then y = abs i = p k = q fi od od y end abs max note lower ⌊ upper ⌈ bounds array array slicing are directly available programmer floating point algol68 test real abcd printf - sends output file stand out printf$p$ – selects new page printf$pg$enter d readd for step from while a=stepd end even simpler program using display statement begin displayhello world end alternative example using elliott algol i/o follows elliott algol used different characters for open-string-quote close-string-quote program hifolks begin print ‘hello world’ end here's version for elliott algol a104 standard elliott used hole paper tape thus only had upper case code lacked any quote characters so £ uk pound sign was used for open quote question mark for close quote special sequences were placed double quotes eg ££l produced new line on teleprinter hifolks' begin print £hello world£l' end' ict series algol i/o version allowed input from paper tape punched card paper tape 'full' mode allowed lower case output was line printer open close quote characters were represented using '' '' spaces by % 'begin' write text''hello%world'' 'end' algol main article algol algol code was published with reserved words typically lowercase but bolded underlined begin printf$gl$hello world end language algol report input/output facilities were collectively called transput timeline algol special characters this article contains unicode miscellaneous technical characters without proper rendering support you may see question marks boxes other symbols instead something like ₁₀ decimal exponent symbol u+23e8 ttf algols were conceived at time when character sets were diverse evolving rapidly also algols were defined so that only uppercase letters were required ifip – algol language report included several mathematical symbols which are available on modern computers operating systems but unfortunately were not supported on most computing systems at time for instance × ÷ ≤ ≥ ≠ ¬ ∨ ∧ ⊂ ≡ ␣ ⏨ september ascii – ascii character set then early stage development had \ back slash character added order support algol's boolean operators /\ \/ alcor – this character set included unusual ᛭ iron/runic cross character ⏨ decimal exponent symbol for floating point notation gost – soviet standard gost allowed encoding 4-bit 5-bit 6-bit 7-bit characters algol algol report – used existing algol characters further adopted → ↓ ↑ □ ⌊ ⌈ ⎩ ⎧ ○ ⊥ ¢ characters which can be found on ibm keyboard with golf-ball print heads inserted such apl golfball these became available mid-1960s while algol was being drafted report was translated into russian german french bulgarian allowed programming languages with larger character sets eg cyrillic alphabet soviet besm-4 all algol's characters are also part unicode standard most them are available several popular fonts october unicode – ⏨ decimal exponent symbol for floating point notation was added unicode for backward compatibility with historic buran spacecraft algol software see also address programming language atlas autocode coral edinburgh imp jensen's device iswim jovial tron video game neliac simula s-algol scheme programming language references name family sometimes given mixed case algol sometimes all uppercase algol68 for simplicity this article uses algol collected algorithms acm compressed archives algorithms acm o'hearn p w tennent r d september algol-like languages introduction archived from original on november algol programming language university michigan-dearborn backus j w bauer f l green j katz c mccarthy j perlis j rutishauser h samelson k vauquois b wegstein j h van wijngaarden woodger m may naur peter ed report on algorithmic language algol copenhagen doi 101145/367236367262 issn 0001-0782 revised report on algorithmic language algol archived from original on june retrieved june revised report on algorithmic language algol pdf retrieved september knuth donald e backus normal form vs backus naur form communications acm 735–736 doi 101145/355588365140 acm award citation / peter naur hints on programming language design car hoare december page this statement sometimes erroneously attributed edsger w dijkstra also involved implementing first algol compiler r k dybvig et al jonathan rees william clinger hal abelson eds revised3 report on algorithmic language scheme dedicated memory algol retrieved october peter o'hearn robert d tennent algol-like languages birkhauser boston inc cambridge ma usa encyclopedia computer languages archived from original on september retrieved january computer museum history historical zuse-computer z23 restored by konrad zuse schule hünfeld for computer museum history center mountain view california usa daylight e g dijkstra's rallying cry for generalization advent recursive procedure late 1950s – early 1960s computer journal 1756–1772 doi101093/comjnl/bxr002 kruseman aretz fej june dijkstra-zonneveld algol compiler for electrologica x1 software engineering pdf history computer science kruislaan sj amsterdam centrum wiskunde & informatica hoare antony emperor's old clothes communications acm koffman eliot all i really need knowi learned cs1 pdf retrieved may aho alfred v ravi sethi jeffrey d ullman compilers principles techniques tools 1st ed addison-wesley isbn 0-201-10194-7 section references therein algol manual for elliott algol icl series algol language icl technical publication how ascii got its backslash bob bemer b baumann r october algol manual alcor group part elektronische rechenanlagen german 206–212 |access-date= requires |url= help baumann r december algol manual alcor group part elektronische rechenanlagen german 259–265 |access-date= requires |url= help baumann r april algol manual alcor group part elektronische rechenanlagen german |access-date= requires |url= help gost standard archived from original on june retrieved june broukhis leonid january revised proposal encode decimal exponent symbol pdf wwwunicodeorg iso/iec jtc 1/sc 2/wg retrieved january this means that need transcode gost-based software documentation can still arise legacy numerical algorithms some which may be interesteg for automatic landing buran shuttle … optimized for non-ieee floating point representation besm-6 cannot be simply recompiled be expected work reliably some human intervention may be necessary further reading fl bauer r baumann m feliciano k samelson introduction algol prentice hall isbn 0-13-477828-6 brian randell l j russell algol implementation translation use algol programs on computer academic press design whetstone compiler one early published descriptions implementing compiler see related papers whetstone algol revisited whetstone kdf9 algol translator by brian randell e w dijkstra algol translation algol translator for x1 making translator for algol report mr 35/61 mathematisch centrum amsterdam revised report on algorithmic language algol by peter naur et al algol definition european side last phase development algol by peter naur external links history algol at computer history museum web enabled algol-f compiler for small experiments retrieved from https//enwikipediaorg/w/indexphptitle=algol&oldid=746799449 categories algol programming language family algol dialect procedural programming languages structured programming languages systems programming languages programming languages created computer-related introductions hidden categories pages using citations with accessdate no url cs1 german-language sources de use dmy dates from july articles with example algol code pages using isbn magic links navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version other projects wikiquote languages العربية azərbaycanca беларуская български bosanski català čeština dansk deutsch ελληνικά español euskara فارسی français gaeilge galego 한국어 հայերեն italiano עברית қазақша magyar bahasa melayu mirandés nederlands 日本語 norsk bokmål norsk nynorsk oʻzbekcha/ўзбекча polski português română русский slovenčina slovenščina српски / srpski srpskohrvatski / српскохрватски suomi svenska тоҷикӣ türkçe українська tiếng việt 中文 edit links this page was last modified on october at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 