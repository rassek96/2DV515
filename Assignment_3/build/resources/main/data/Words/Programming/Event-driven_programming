event-driven programming from wikipedia free encyclopedia jump navigation search programming paradigms action agent-oriented array-oriented automata-based concurrent computing o relativistic programming data-driven declarative contrast imperative o constraint + constraint logic concurrent constraint logic o dataflow + flow-based + cell-oriented spreadsheets + reactive o functional + functional logic + purely functional o logic + abductive logic + answer set + concurrent logic + functional logic + inductive logic dynamic end-user programming event-driven o service-oriented o time-driven expression-oriented feature-oriented function-level contrast value-level generic imperative contrast declarative o literate o procedural inductive programming language-oriented o natural language programming o discipline-specific o domain-specific o grammar-oriented + dialecting o intentional metaprogramming o automatic o reflective + attribute-oriented o homoiconic o template + policy-based non-structured contrast structured o array nondeterministic parallel computing o process-oriented point-free style o concatenative semantic structured contrast non-structured o block-structured o modular contrast monolithic o object-oriented + actor-based + class-based + concurrent + prototype-based + by separation concerns aspect-oriented role-oriented subject-oriented o recursive value-level contrast function-level probabilistic concept v t e computer programming event-driven programming programming paradigm which flow program determined by events such user actions mouse clicks key presses sensor outputs messages from other programs/threads event-driven programming dominant paradigm used graphical user interfaces other applications eg javascript web applications that are centered on performing certain actions response user input event-driven application there generally main loop that listens for events then triggers callback function when one those events detected embedded systems same may be achieved using hardware interrupts instead constantly running main loop event-driven programs can be written any programming language although task easier languages that provide high-level abstractions such closures october microsoft open-sourced p programming language which was designed specifically for safe event-driven programming contents event handlers o trivial event handler o exception handlers o creating event handlers common uses criticism stackless threading see also references external links event handlers main article event handler trivial event handler because code for checking for events main loop do not depend on application many programming frameworks take care their implementation expect user provide only code for event handlers this simple example there may be call event handler called onkeyenter that includes argument with string characters corresponding what user typed before hitting enter key add two numbers storage outside event handler must be used implementation might look like below globally declare counter k integer t onkeyentercharacter c { convert c number n if k zero store n t increment k otherwise add n t print result reset k zero } while keeping track history straightforward batch program requires special attention planning event-driven program exception handlers pl/1 even though program itself may not be predominantly event-driven certain abnormal events such hardware error overflow program checks may occur that possibly prevent further processing exception handlers may be provided by on statements unseen callers provide housekeeping routines clean up afterwards before termination creating event handlers first step developing event-driven program write series subroutines methods called event-handler routines these routines handle events which main program will respond for example single left-button mouse-click on command button gui program may trigger routine that will open another window save data database exit application many modern-day programming environments provide programmer with event templates allowing programmer focus on writing event code second step bind event handlers events so that correct function called when event takes place graphical editors combine first two steps double-click on button editor creates empty event handler associated with user clicking button opens text window so you can edit event handler third step developing event-driven program write main loop this function that checks for occurrence events then calls matching event handler process most event-driven programming environments already provide this main loop so need not be specifically provided by application programmer rpg early programming language from ibm whose 1960s design concept was similar event-driven programming discussed above provided built-in main i/o loop known program cycle where calculations responded accordance 'indicators' flags that were set earlier cycle common uses most existing gui development tools architectures rely on event-driven programming addition systems such nodejs are also event-driven criticism design those programs which rely on event-action model has been criticised has been suggested that event-action model leads programmers create error prone difficult extend excessively complex application code table-driven state machines have been advocated viable alternative on other hand table-driven state machines themselves suffer from significant weaknesses including state explosion phenomenon stackless threading event-driven approach used hardware description languages thread context only needs cpu stack while actively processing event once done cpu can move on process other event-driven threads which allows extremely large number threads be handled this essentially finite-state machine approach see also time-triggered system alternative architecture for computer systems interrupt comparison programming paradigms dataflow programming similar concept dom events event-driven architecture event stream processing similar concept hardware description language inversion control message-oriented middleware programming paradigm publish–subscribe pattern signal programming similar concept staged event-driven architecture seda virtual synchrony distributed execution model for event-driven programming references this article needs additional citations for verification please help improve this article by adding citations reliable sources unsourced material may be challenged removed may learn how when remove this template message p safe asynchronous event-driven programming retrieved b who moved my state nodejs & event-driven programming samek miro march state machines for event-driven systems retrieved march patrick schaumont practical introduction hardware/software codesign isbn 978-1-4614-3737-6 external links this section's use external links may not follow wikipedia's policies guidelines please improve this article by removing excessive inappropriate external links converting useful links where appropriate into footnote references march learn how when remove this template message concurrency patterns presentation given at scaleconf event-driven programming introduction tutorial history tutorial by stephen ferg event driven programming tutorial by alan gauld event collaboration article by martin fowler rethinking swing threading article by jonathan simon event driven programming style article by chris mcdonald event driven programming using template specialization article by christopher diggins concepts architecture vista - multiparadigm programming environment article by stefan schiffer joachim hans fröhlich event-driven programming agents chapter labwindows/cvi resources distributed publish/subscribe event system open source example which production on msncom microsoftcom v t e types programming languages actor-based array aspect-oriented class-based concatenative concurrent data-structured dataflow declarative domain-specific dynamic esoteric event-driven extensible functional imperative logic macro metaprogramming+multi-paradigm object-based object-oriented pipeline procedural prototype-based reflective rule-based scripting synchronous templating assembly compiled interpreted machine low-level high-level very high-level first generation second generation third generation fourth generation fifth generation non-english-based visual retrieved from https//enwikipediaorg/w/indexphptitle=event-drivenprogramming&oldid=752262424 categories programming paradigms events computing hidden categories articles needing additional references from may all articles needing additional references wikipedia external links cleanup from march wikipedia spam cleanup from march all articles with dead external links articles with dead external links from february articles with example pseudocode navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages ελληνικά español euskara فارسی français galego 한국어 hrvatski italiano עברית nederlands 日本語 polski português română русский simple english српски / srpski türkçe українська 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 