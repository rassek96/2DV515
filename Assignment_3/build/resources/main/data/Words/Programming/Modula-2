modula-2 from wikipedia free encyclopedia jump navigation search modula-2 paradigm imperative structured modular data procedure hiding designed by niklaus wirth first appeared typing discipline strong static os cross-platform filename extensions mod m2 def mod def mi md major implementations eth compiler written by niklaus wirth gnu modula-2 adw modula-2 dialects pim2 pim3 pim4 iso influenced by modula mesa pascal algol-w influenced modula-3 oberon ada fortran lua seed7 zonnon modula-gm modula-2 computer programming language designed developed between by niklaus wirth at swiss federal institute technology zurich eth zurich revision pascal serve sole programming language for operating system application software for personal workstation lilith principal concepts were module compilation unit for separate compilation coroutine basic building block for concurrent processes types procedures that allow access machine-specific data modula-2 was viewed by niklaus wirth successor his earlier programming languages pascal modula language design was also influenced by mesa language new programming possibilities early personal computer xerox alto both from xerox that wirth saw during his sabbatical year at xerox parc computer magazine byte devoted august issue language its surrounding environment contents description dialects supersets derivatives language elements o reserved words o pervasive identifiers use embedded systems o cambridge modula-2 o mod51 o modula-gm current compilers books references see also external links description modula-2 general purpose procedural language sufficiently flexible do systems programming but with much broader application particular was designed support separate compilation data abstraction straightforward way much syntax based on wirth's earlier better-known language pascal modula-2 was designed be broadly similar pascal with some elements syntactic ambiguities removed important addition module concept direct language support for multiprogramming here example source code for hello world program module hello from stextio import writestring begin writestringhello world end hello modula-2 module may be used encapsulate set related subprograms data structures restrict their visibility from other portions program module design implemented data abstraction feature modula-2 very clean way modula-2 programs are composed modules each which made up two parts definition module interface portion which contains only those parts subsystem that are exported visible other modules implementation module which contains working code that internal module language has strict scope control particular scope module can be considered impenetrable wall except for standard identifiers no object from outer world visible inside module unless explicitly imported no internal module object visible from outside unless explicitly exported suppose module m1 exports objects b c p by enumerating its identifiers explicit export list definition module m1 export qualified b c p then objects bc p from module m1 become now known outside module m1 m1a m1b m1c m1p they are exported qualified manner universe assumed module m1 global exporting module's name ie m1 used qualifier followed by object's name suppose module m2 contains following import declaration module m2 import m1 then this means that objects exported by module m1 universe its enclosing program can now be used inside module m2 they are referenced qualified manner like this m1a m1b m1c m1p example m1a = m1c = m1pm1a + m1b qualified export avoids name clashes for instance if another module m3 would also export object called p then we can still distinguish two objects since m1p differs from m3p thanks qualified export does not matter that both objects are called p inside their exporting modules m1 m3 there alternative technique available which wide use by modula-2 programmers suppose module m4 formulated this module m4 from m1 import b c p then this means that objects exported by module m1 universe can again be used inside module m4 but now by mere references exported identifiers unqualified manner like this b c p example = c = pa + b this technique unqualifying import allows use variables other objects outside their exporting module exactly same simple ie unqualified manner inside exporting module walls surrounding all modules have now become irrelevant for all those objects for which this has been explicitly allowed course unqualifying import only usable if there are no name clashes these export import rules may seem unnecessarily restrictive verbose but they do not only safeguard objects against unwanted access but also have pleasant side-effect providing automatic cross-referencing definition every identifier program if identifier qualified by module name then definition comes from that module otherwise if occurs unqualified simply search backwards you will either encounter declaration that identifier its occurrence import statement which names module comes from this property becomes very useful when trying understand large programs containing many modules language provides for limited single-processor concurrency monitors coroutines explicit transfer control for hardware access absolute addresses bit manipulation interrupts uses name equivalence dialects there are two major dialects modula-2 first pim named after book programming modula-2 by niklaus wirth there were three major editions pim second third corrected fourth editions each describing slight variants language second major dialect iso from standardization effort by international organization for standardization here are few differences amongst them pim2 o required explicit export clause definition modules pim3 o removed export clause from definition modules following observation that everything within definition module defines interface that module hence export clause was redundant pim4 o specified behaviour mod operator when operands are negative o required all array char strings be terminated by ascii nul even if string fits exactly into its array iso o iso modula-2 resolved most ambiguities pim modula-2 added data types complex longcomplex exceptions module termination finally clause complete standard i/o library there are numerous minor differences clarifications supersets there are several supersets modula-2 with language extensions for specific application domains pim supersets o canterbury modula-2 extended with oberon-like extensible records o modula-2+ extended with preemptive threads exceptions o modula-2 parallel extension o modula-p another parallel extension o modula-prolog adding prolog layer o modula/r with relational database extensions o modula-gm extensions for embedded systems iso supersets o mod51 extended with iec1131 constructs for embedded development derivatives there are several derivative languages that resemble modula-2 very closely but are new languages their own right most are different languages with different purposes with strengths weaknesses their own modula-3 developed by team ex-xerox employees who had moved dec olivetti oberon developed at eth zürich for system oberon available online oberon-2 oberon with oo extensions active oberon yet another object-oriented extension oberon developed also at eth with main objective support parallel programming on multiprocessor multicore systems parallaxis language for machine-independent data-parallel programming umbriel developed by pat terry teaching language yafl research language by darius blasband many other current programming languages have adopted features modula-2 language elements reserved words pim defines following reserved words elsif loop repeat array end mod return begin exit module set by export not then case for const from type definition if pointer until div implementation procedure var do import qualified while else record with pervasive identifiers pim defines following pervasive built-in identifiers abs excl longint real bitset false longreal size boolean float max true cap halt min trunc cardinal high nil val char inc odd chr incl ord dec integer proc use embedded systems cambridge modula-2 cambridge modula-2 by cambridge microprocessor systems based on subset pim4 with language extensions for embedded development compiler runs on dos generates code for m68k based embedded microcontrollers running minos operating system mod51 mod51 by mandeno granville electronics based on iso modula-2 with language extensions for embedded development following iec1131 industry standard for programmable logic controllers plc closely related modula-2 mod51 compiler generates standalone code for 80c51 based microcontrollers modula-gm delco electronics then subsidiary gm hughes electronics developed version modula-2 for embedded control systems starting delco named modula-gm was first high level language used replace machine language code for embedded systems delco's engine control units ecus this was significant because delco was producing over ecus per day for gm this was then world's largest producer ecus first experimental use modula-gm embedded controller was antilock braking system controller which was based on motorola 68xxx microprocessor gen-4 ecu used by cart championship auto racing teams irl indy racing league teams first production use modula-gm was its use gm trucks starting with model year vcm vehicle control module used manage gm powertrain's vortec engines modula-gm was also used on all ecus for gm's 90° buick v6 family series ii used 1997-2005 model year buick park avenue modula-gm compilers associated software management tools were sourced by delco from intermetrics modula-2 was selected basis for delco's high level language because its many strengths over other alternative language choices after delco electronics was spun off from gm with other component divisions form delphi global sourcing required that non-proprietary high-level software language be used ecu embedded software now developed at delphi compiled with commercial c compilers current compilers ack modula-2 for minix freeware adw modula-2 adw modula-2 for windows iso compliant iso/iec 10514-1 iso/iec 10514-2 oo extension iso/iec 10514-3 generic extension freeware aglet modula-2 for amiga os 40/ppc freeware cambridge modula-2 for various micro-controllers embedded minos operating system commercial + proprietary software fst fitted software tools modula-2 for dos freeware gardens point modula-2 for bsd linux os/2 solaris - iso compliant freeware july original website down gardens point modula-2 gpm/clr for net freeware gnu modula-2 for gcc platforms version released december pim2 pim3 pim4 iso compliant free software gpled m2amiga for amiga free software m2m by n wirth collaborators from eth zurich platform independent generates m-code for virtual machine freeware macmeth by n wirth collaborators from eth zurich for macintosh but classic only freeware mod51 for intel 80x51 micro-controller family iso compliant iec1132 extensions commercial + proprietary modula-2 r10 reference compiler for modula-2 r10 open-source/peer-review modulaware for openvms both vax alpha iso compliant commercial + proprietary mtc modula-2 c translator available modula-2 c source free software native xds-x86 for windows linux x86 iso compliant topspeed compatible library freeware p1 modula-2 for macintosh both classic mac os x ppc carbon api only iso compliant commercial + proprietary karlsruhe modula-2 compiler mocka for various platforms pim compliant commercial freeware linux/bsd versions terra m2vms for openvms both vax alpha pim compliant commercial + proprietary ulm modula-2 system for solaris both sparc mc68k free software gpled xds-c for windows linux 16- 32-bit platforms targeting c k&r & ansi iso compliant topspeed compatible library freeware source for all entries modula2net books niklaus wirth programming modula-2 fourth edition isbn 978-0-387-96051-7 k n king modula-2 isbn 0-669-11091-4 richard j sutcliffe modula-2 abstractions for data programming structures using iso-standard modula-2 2004-2005 edition gleaves richard modula-2 for pascal programmers first edition isbn 978-0-387-96051-7 cooper doug oh my modula-2 introduction programming isbn king k n modula complete guide references summary projects by n wirth 1962-1999 n wirth pascal its successors software pioneers m broy e denert eds springer-verlag isbn 3-540-43081-4 niklaus wirth history goals od modula-2 drdobbs n wirth programming modula-2 fourth edition page byte – small systems journal pp 143-232 available at archiveorg iso/iec 10514-11996 tichy et al modula-2 extension for modula-2 for highly parallel portable programs university karlsruhe bräunl parallel programming prentice-hall muller c modula--prolog software development ieee software cardelli et al modula-3 report research report systems research center digital equipment corporation n wirth & j gutknecht project oberon design operating system compiler isbn 0-201-54428-8 addison-wesley moessenboeck & wirth programming language oberon-2 eth zurich thomas bräunl parallaxis language for structured data-parallel programming university stuttgart pat d terry another minimal programming language acm sigplan notices no d blasband yafl programming language second edition delco electronics electron magazine atwood legacy spring '89 page development electronics for gm auto racing list modula-2 compilers at modula2net see also turbo modula-2 external links modula-2 internet directory this article based on material taken from free on-line dictionary computing prior november incorporated under relicensing terms gfdl version later retrieved from https//enwikipediaorg/w/indexphptitle=modula-2&oldid=749876159 categories modula programming language family systems programming languages programming languages created programming languages with iso standard statically typed programming languages hidden categories pages using isbn magic links wikipedia articles needing clarification from august vague ambiguous time from august navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages беларуская български čeština deutsch español français galego հայերեն italiano magyar nederlands 日本語 norsk bokmål polski português русский српски / srpski svenska тоҷикӣ türkçe 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 