history programming languages from wikipedia free encyclopedia jump navigation search history computing hardware hardware before hardware 1960s present hardware soviet bloc countries software software unix free software open-source software computer science artificial intelligence compiler construction computer science operating systems programming languages software engineering modern concepts graphical user interface internet personal computers laptops video games world wide web timeline computing bc–1949 1950–1979 1980–1989 1990–1999 2000–2009 2010–2019 more timelines category v t e for detailed timeline events see timeline programming languages this article discusses major developments history programming languages contents early history first programming languages establishing fundamental paradigms 1980s consolidation modules performance 1990s internet age current trends prominent people see also references further reading external links early history during nine-month period 1842–1843 ada lovelace translated memoir italian mathematician luigi menabrea about charles babbage's newest proposed machine analytical engine with article she appended set notes which specified complete detail method for calculating bernoulli numbers with analytical engine recognized by some historians world's first computer program herman hollerith realized that he could encode information on punch cards when he observed that train conductors encode appearance ticket holders on train tickets using position punched holes on tickets hollerith then encoded american census data on punch cards first computer codes were specialized for their applications first decades 20th century numerical calculations were based on decimal numbers eventually was realized that logic could be represented with numbers not only with words for example alonzo church was able express lambda calculus formulaic way turing machine was abstraction operation tape-marking machine for example use at telephone companies turing machines set basis for storage programs data von neumann architecture computers by representing machine through finite number however unlike lambda calculus turing's code does not serve well basis for higher-level languages—its principal use rigorous analyses algorithmic complexity like many firsts history first modern programming language hard identify from start restrictions hardware defined language punch cards allowed columns but some columns had be used for sorting number on each card fortran included some keywords which were same english words such if goto go continue use magnetic drum for memory meant that computer programs also had be interleaved with rotations drum thus programs were more hardware-dependent some people what was first modern programming language depends on how much power human-readability required before status programming language granted jacquard looms charles babbage's difference engine both had simple extremely limited languages for describing actions that these machines should perform one can even regard punch holes on player piano scroll limited domain-specific language albeit not designed for human consumption first programming languages 1940s first recognizably modern electrically powered computers were created limited speed memory capacity forced programmers write hand tuned assembly language programs was eventually realized that programming assembly language required great deal intellectual effort was error-prone first programming languages designed communicate instructions computer were written 1950s early high-level programming language be designed for computer was plankalkül developed by germans for z3 by konrad zuse between however was not implemented until john mauchly's short code proposed was one first high-level languages ever developed for electronic computer unlike machine code short code statements represented mathematical expressions understandable form however program had be translated into machine code every time ran making process much slower than running equivalent machine code manchester mark ran programs written autocode from at university manchester alick glennie developed autocode early 1950s programming language used compiler automatically convert language into machine code first code compiler was developed for mark computer at university manchester considered be first compiled high-level programming language second autocode was developed for mark by r brooker was called mark autocode brooker also developed autocode for ferranti mercury 1950s conjunction with university manchester version for edsac was devised by d f hartley university cambridge mathematical laboratory known edsac autocode was straight development from mercury autocode adapted for local circumstances was noted for its object code optimisation source-language diagnostics which were advanced for time contemporary but separate thread development atlas autocode was developed for university manchester atlas machine language fortran was invented at ibm by john backus was first widely used high level general purpose programming language have functional implementation opposed just design on paper still popular language for high-performance computing used for programs that benchmark rank world's fastest supercomputers another early programming language was devised by grace hopper us called flow-matic was developed for univac i at remington rand during period from until hopper found that business data processing customers were uncomfortable with mathematical notation early she her team wrote specification for english programming language implemented prototype flow-matic compiler became publicly available early was substantially complete flow-matic was major influence design cobol since only its direct descendent aimaco were actual use at time other languages still use today include lisp invented by john mccarthy cobol created by short range committee another milestone late 1950s was publication by committee american european computer scientists new language for algorithms algol report algorithmic language this report consolidated many ideas circulating at time featured three key language innovations nested block structure code sequences associated declarations could be grouped into blocks without having be turned into separate explicitly named procedures lexical scoping block could have its own private variables procedures functions invisible code outside that block that information hiding another innovation related this was how language was described mathematically exact notation backus–naur form bnf was used describe language's syntax nearly all subsequent programming languages have used variant bnf describe context-free portion their syntax algol was particularly influential design later languages some which soon became more popular burroughs large systems were designed be programmed extended subset algol algol's key ideas were continued producing algol syntax semantics became even more orthogonal with anonymous routines recursive typing system with higher-order functions etc not only context-free part but full language syntax semantics were defined formally terms van wijngaarden grammar formalism designed specifically for this purpose algol 68's many little-used language features for example concurrent parallel blocks its complex system syntactic shortcuts automatic type coercions made unpopular with implementers gained reputation being difficult niklaus wirth actually walked out design committee create simpler pascal language fortran some notable languages that were developed this period include – regional assembly language – autocode – ipl forerunner lisp – flow-matic led cobol – fortran first compiler – comtran precursor cobol – lisp – algol – fact forerunner cobol – cobol – rpg – apl – simula – snobol – cpl forerunner c – speakeasy computational environment – basic – pl/i – joss – bcpl forerunner c establishing fundamental paradigms smalltalk scheme period from late 1960s late 1970s brought major flowering programming languages most major language paradigms now use were invented this period speakeasy computational environment developed at argonne national laboratory anl by stanley cohen oops object-oriented programming much like later matlab idl programming language mathematica numerical package speakeasy has clear fortran foundation syntax first addressed efficient physics computation internally at anl was modified for research use modeleasy for federal reserve board early 1970s then was made available commercially speakeasy modeleasy are still use currently simula invented late 1960s by nygaard dahl superset algol was first language designed support object-oriented programming c early systems programming language was developed by dennis ritchie ken thompson at bell labs between smalltalk mid-1970s provided complete ground-up design object-oriented language prolog designed by colmerauer roussel kowalski was first logic programming language ml built polymorphic type system invented by robin milner on top lisp pioneering statically typed functional programming languages each these languages spawned entire family descendants most modern languages count at least one them their ancestry 1960s 1970s also saw considerable debate over merits structured programming which essentially meant programming without use goto this debate was closely related language design some languages did not include goto which forced structured programming on programmer although debate raged hotly at time nearly all programmers now agree that even languages that provide goto bad programming style use except rare circumstances result later generations language designers have found structured programming debate tedious even bewildering provide even faster compile times some languages were structured for one-pass compilers which expect subordinate routines be defined first with pascal where main routine driver function final section program listing some notable languages that were developed this period include – logo – b forerunner c – pascal – forth – c – smalltalk – prolog – ml – scheme – sql query language later extended 1980s consolidation modules performance matlab erlang tcl 1980s were years relative consolidation imperative languages rather than inventing new paradigms all these movements elaborated upon ideas invented previous decade c++ combined object-oriented systems programming united states government standardized ada systems programming language intended for use by defense contractors japan elsewhere vast sums were spent investigating so-called fifth-generation programming languages that incorporated logic programming constructs functional languages community moved standardize ml lisp research miranda functional language with lazy evaluation began take hold this decade one important new trend language design was increased focus on programming for large-scale systems through use modules large-scale organizational units code modula ada ml all developed notable module systems 1980s module systems were often wedded generic programming constructs---generics being essence parametrized modules see also polymorphism object-oriented programming although major new paradigms for imperative programming languages did not appear many researchers expanded on ideas prior languages adapted them new contexts for example languages argus emerald systems adapted object-oriented programming distributed systems 1980s also brought advances programming language implementation risc movement computer architecture postulated that hardware should be designed for compilers rather than for human assembly programmers aided by processor speed improvements that enabled increasingly aggressive compilation techniques risc movement sparked greater interest compilation technology for high-level languages language technology continued along these lines well into 1990s some notable languages that were developed this period include – c++ c with classes renamed – ada – common lisp – matlab – eiffel – objective-c – erlang – perl – tcl – wolfram language part mathematica only got separate name june – fl backus 1990s internet age haskell lua rebol d programming language rapid growth internet mid-1990s was next major historic event programming languages by opening up radically new platform for computer systems internet created opportunity for new languages be adopted particular javascript programming language rose popularity because its early integration with netscape navigator web browser various other scripting languages achieved widespread use developing customized applications for web servers such php 1990s saw no fundamental novelty imperative languages but much recombination maturation old ideas this era began spread functional languages big driving philosophy was programmer productivity many rapid application development rad languages emerged which usually came with ide garbage collection were descendants older languages all such languages were object-oriented these included object pascal visual basic java java particular received much attention more radical innovative than rad languages were new scripting languages these did not directly descend from other languages featured new syntaxes more liberal incorporation features many consider these scripting languages be more productive than even rad languages but often because choices that make small programs simpler but large programs more difficult write maintain nevertheless scripting languages came be most prominent ones used connection with web some notable languages that were developed this period include – haskell – python – visual basic – ruby – lua – r – clos part ansi common lisp – ada – java – delphi object pascal – javascript – php – rebol – d current trends this section needs be updated please update this article reflect recent events newly available information may this section possibly contains original research please improve by verifying claims made adding inline citations statements consisting only original research should be removed february learn how when remove this template message programming language evolution continues both industry research some recent trends have included increasing support for functional programming mainstream languages used commercially including pure functional programming for making code easier reason about easier parallelise at both micro- macro- levels constructs support concurrent distributed programming mechanisms for adding security reliability verification language extended static checking dependent typing information flow control static thread safety alternative mechanisms for composability modularity mixins traits delegates aspects component-oriented software development metaprogramming reflection access abstract syntax tree o aop aspect oriented programming allowing developers insert code another module class at join points o domain specific languages code generation + xml for graphical interface xul xaml increased interest distribution mobility integration with databases including xml relational databases open source developmental philosophy for languages including gnu compiler collection languages such python ruby scala massively parallel languages for coding processor gpu graphics processing units supercomputer arrays including opencl early research into as-yet-unimplementable quantum computing programming languages groovy rust some notable languages developed during this period include – actionscript – c – apache groovy – scala – f – windows powershell – clojure – go – rust – dart – julia – swift prominent people anders hejlsberg yukihiro matsumoto grace m hopper bjarne stroustrup niklaus wirth some key people who helped develop programming languages joe armstrong creator erlang john backus inventor fortran cooperated design algol algol jeff bezanson got phd for julia language one designers one core developers only developer femtolisp alan cooper developer visual basic ole-johan dahl pioneered object-oriented programming co-invented simula edsger w dijkstra developed framework for structured programming jean-yves girard co-inventor polymorphic lambda calculus system f james gosling developer oak precursor java anders hejlsberg developer turbo pascal delphi c typescript rich hickey creator clojure grace hopper inventor first compiler developer flow-matic influencing cobol popularized machine-independent programming languages term debugging jean ichbiah chief designer ada ada kenneth e iverson developer apl co-developer j along with roger hui alan kay pioneering work on object-oriented programming originator smalltalk brian kernighan co-author first book on c programming language with dennis ritchie coauthor awk ampl programming languages yukihiro matsumoto creator ruby john mccarthy inventor lisp bertrand meyer inventor eiffel robin milner inventor ml sharing credit for hindley–milner polymorphic type inference john von neumann originator operating system concept kristen nygaard pioneered object-oriented programming co-invented simula martin odersky creator scala previously contributor design java john c reynolds co-inventor polymorphic lambda calculus system f dennis ritchie inventor c unix operating system plan operating system nathaniel rochester inventor first assembler ibm guido van rossum creator python bjarne stroustrup developer c++ ken thompson inventor b go programming language inferno programming language unix operating system co-author larry wall creator perl programming language see perl perl niklaus wirth inventor pascal modula oberon stephen wolfram creator mathematica konrad zuse designed first high-level programming language plankalkül which influenced algol see also acm sigplan history programming languages conference history compiler writing history computing hardware programming language timeline computing timeline programming languages list programming languages references j fuegi j francis october–december lovelace & babbage creation 'notes' annals history computing doi101109/mahc20031253887 rojas raúl et al plankalkül first high-level programming language its implementation institut frame informatik freie universität berlin technical report b-3/2000 full text sebesta ws concepts programming languages p isbn 0-321-33025-0 knuth donald e pardo luis trabb early development programming languages encyclopedia computer science technology marcel dekker 419–493 peter j bentley digitized science computers how shapes our world oxford university press p fortran creator john backus dies - tech gadgets- msnbccom msnbc retrieved csc-302 99s class brief history programming languages mathgrinedu retrieved eugene loh june ideal hpc programming language queue association computing machines hpl - portable implementation high-performance linpack benchmark for distributed-memory computers retrieved hopper p sammet p sammet p gordon michael j c from lcf hol short history pdf p retrieved edinburgh lcf including ml interpreter was implemented lisp rojas raúl hashagen ulf first computers history architectures mit press p isbn 978-0262681377 retrieved october further reading rosen saul editor programming systems languages mcgraw-hill sammet jean e programming languages history fundamentals prentice-hall sammet jean e july programming languages history future communications acm 601–610 doi 101145/361454361485 richard l wexelblat ed history programming languages academic press thomas j bergin richard g gibson eds history programming languages addison wesley external links history evolution programming languages graph programming language history retrieved from https//enwikipediaorg/w/indexphptitle=historyofprogramminglanguages&oldid=750210427 categories history computing history computer science hidden categories all articles with unsourced statements articles with unsourced statements from june wikipedia articles need updating from may all wikipedia articles need updating articles that may contain original research from february all articles that may contain original research navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages العربية বাংলা български català deutsch ελληνικά español français 한국어 हिन्दी íslenska 日本語 português русский தமிழ் 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 