machine code from wikipedia free encyclopedia jump navigation search program execution general concepts runtime system runtime library executable compiler interpreter virtual machine intermediate representation ir source code object code bytecode machine code compilation strategies just-in-time jit o tracing just-in-time ahead-of-time aot transcompilation recompilation notable runtimes android runtime art common language runtime clr crt0 java virtual machine jvm nodejs zend engine notable compilers & toolchains llvm gnu compiler collection gcc v t e machine language monitor w65c816s single-board computer displaying code disassembly well processor register memory dumps machine code machine language set instructions executed directly by computer's central processing unit cpu each instruction performs very specific task such load jump alu operation on unit data cpu register memory every program directly executed by cpu made up series such instructions numerical machine code ie not assembly code may be regarded lowest-level representation compiled assembled computer program primitive hardware-dependent programming language while possible write programs directly numerical machine code tedious error prone manage individual bits calculate numerical addresses constants manually for this reason machine code almost never used write programs almost all practical programs today are written higher-level languages assembly language source code then translated executable machine code by utilities such compilers assemblers linkers with important exception interpreted programs which are not translated into machine code however interpreter itself which may be seen executor processor performing instructions source code typically consists directly executable machine code generated from assembly high level language source code contents machine code instructions programs assembly languages example relationship microcode relationship bytecode storing memory readability by humans see also notes references further reading machine code instructions main article instruction set every processor processor family has its own machine code instruction set instructions are patterns bits that by physical design correspond different commands machine thus instruction set specific class processors using mostly same architecture successor derivative processor designs often include all instructions predecessor may add additional instructions occasionally successor design will discontinue alter meaning some instruction code typically because needed for new purposes affecting code compatibility some extent even nearly completely compatible processors may show slightly different behavior for some instructions but this rarely problem systems may also differ other details such memory arrangement operating systems peripheral devices because program normally relies on such factors different systems will typically not run same machine code even when same type processor used machine code instruction set may have all instructions same length may have variable-length instructions how patterns are organized varies strongly with particular architecture often also with type instruction most instructions have one more opcode fields which specifies basic instruction type such arithmetic logical jump etc actual operation such add compare other fields that may give type operands addressing mode s addressing offsets index actual value itself such constant operands contained instruction are called immediates not all machines individual instructions have explicit operands accumulator machine has combined left operand result implicit accumulator for most arithmetic instructions other architectures such x86-family have accumulator versions common instructions with accumulator regarded one general registers by longer instructions stack machine has most all its operands on implicit stack special purpose instructions also often lack explicit operands cpuid x86 architecture writes values into four implicit destination registers for instance this distinction between explicit implicit operands important machine code generators especially register allocation live range tracking parts good code optimizer can track implicit well explicit operands which may allow more frequent constant propagation constant folding registers register assigned result constant expression freed up by replacing by that constant other code enhancements programs computer program sequence instructions that are executed by cpu while simple processors execute instructions one after another superscalar processors are capable executing several instructions at once program flow may be influenced by special 'jump' instructions that transfer execution instruction other than numerically following one conditional jumps are taken execution continues at another address not execution continues at next instruction depending on some condition assembly languages main article assembly language much more readable rendition machine language called assembly language uses mnemonic codes refer machine code instructions rather than using instructions' numeric values directly for example on zilog z80 processor machine code which causes cpu decrement b processor register would be represented assembly language dec b example mips instruction set provides specific example for machine code whose instructions are always bits long general type instruction given by op operation field highest bits j-type jump i-type immediate instructions are fully specified by op r-type register instructions include additional field funct determine exact operation fields used these types are bits r-type i-type j-type rs rt rd indicate register operands shamt gives shift amount address immediate fields contain operand directly for example adding registers placing result register encoded decimal binary load value into register taken from memory cell cells after location listed register decimal binary jumping address decimal binary relationship microcode some computer architectures machine code implemented by more fundamental underlying layer programs called microprograms providing common machine language interface across line family different models computer with widely different underlying dataflows this done facilitate porting machine language programs between different models example this use ibm system/360 family computers their successors with dataflow path widths bits bits beyond they nevertheless present common architecture at machine language level across entire line using microcode layer implement emulator enables computer present architecture entirely different computer system/360 line used this allow porting programs from earlier ibm machines new family computers eg ibm 1401/1440/1460 emulator on ibm s/360 model relationship bytecode machine code should not be confused with so-called bytecode older term p-code which either executed by interpreter itself compiled into machine code for faster direct execution machine code assembly code are sometimes called native code when referring platform-dependent parts language features libraries storing memory harvard architecture computer architecture with physically separate storage signal pathways for code instructions data today most processors implement such separate signal pathways for performance reasons but actually implement modified harvard architecture so they can support tasks like loading executable program from disk storage data then executing harvard architecture contrasted von neumann architecture where data code are stored same memory which read by processor allowing computer execute commands from point view process code space part its address space where code execution stored multitasking systems this comprises program's code segment usually shared libraries multi-threading environment different threads one process share code space along with data space which reduces overhead context switching considerably compared process switching readability by humans has been said that machine code so unreadable that united states copyright office cannot identify whether particular encoded program original work authorship however us copyright office does allow for copyright registration computer programs douglas hofstadter compares machine code with genetic code looking at program written machine language vaguely comparable looking at dna molecule atom by atom see also look up machine code wiktionary free dictionary assembly language endianness list machine languages machine code monitor overhead code p-code machine reduced instruction set computing risc very long instruction word teaching machine code micro-professor mpf-i notes references such many versions basic especially early ones well smalltalk matlab perl python ruby other special purpose scripting languages bradley kjell kjell at ieee dot org immediate operand managed unmanaged native what kind code this developercom retrieved pamela samuelson sep contu revisited case against copyright protection for computer programs machine-readable form duke law journal 663–769 jstor copyright registration for computer programs pdf us copyright office august retrieved february d hofstadter gödel escher bach eternal golden braid further reading hennessy john l patterson david computer organization design hardware/software interface morgan kaufmann publishers isbn 1-55860-281-x tanenbaum andrew s structured computer organization prentice hall isbn 0-13-020435-8 brookshear j glenn computer science overview addison wesley isbn 0-321-38701-5 v t e application binary interface abi parts conventions alignment calling convention call stack library o static machine code memory segmentation name mangling object code opaque pointer position-independent code relocation system call virtual method table related topics binary code compatibility foreign function interface language binding linker o dynamic loader year problem v t e types programming languages actor-based array aspect-oriented class-based concatenative concurrent data-structured dataflow declarative domain-specific dynamic esoteric event-driven extensible functional imperative logic macro metaprogramming+multi-paradigm object-based object-oriented pipeline procedural prototype-based reflective rule-based scripting synchronous templating assembly compiled interpreted machine low-level high-level very high-level first generation second generation third generation fourth generation fifth generation non-english-based visual authority control gnd 4037827-5 retrieved from https//enwikipediaorg/w/indexphptitle=machinecode&oldid=751501808 categories assembly languages machine code hidden categories all articles with unsourced statements articles with unsourced statements from march wikipedia articles with gnd identifiers navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages العربية বাংলা беларуская български bosanski brezhoneg català čeština dansk deutsch eesti ελληνικά español esperanto euskara فارسی français galego 한국어 հայերեն हिन्दी hornjoserbsce hrvatski বিষ্ণুপ্রিয়া মণিপুরী bahasa indonesia íslenska italiano עברית ქართული қазақша lietuvių la lojban magyar മലയാളം монгол မြန်မာဘာသာ nederlands 日本語 norsk bokmål norsk nynorsk олык марий polski português română русский scots simple english slovenčina slovenščina српски / srpski srpskohrvatski / српскохрватски suomi svenska tagalog ไทย türkçe українська اردو tiếng việt 粵語 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 