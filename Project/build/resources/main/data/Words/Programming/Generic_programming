generic programming from wikipedia free encyclopedia jump navigation search not be confused with genetic programming programming paradigms action agent-oriented array-oriented automata-based concurrent computing o relativistic programming data-driven declarative contrast imperative o constraint + constraint logic concurrent constraint logic o dataflow + flow-based + cell-oriented spreadsheets + reactive o functional + functional logic + purely functional o logic + abductive logic + answer set + concurrent logic + functional logic + inductive logic dynamic end-user programming event-driven o service-oriented o time-driven expression-oriented feature-oriented function-level contrast value-level generic imperative contrast declarative o literate o procedural inductive programming language-oriented o natural language programming o discipline-specific o domain-specific o grammar-oriented + dialecting o intentional metaprogramming o automatic o reflective + attribute-oriented o homoiconic o template + policy-based non-structured contrast structured o array nondeterministic parallel computing o process-oriented point-free style o concatenative semantic structured contrast non-structured o block-structured o modular contrast monolithic o object-oriented + actor-based + class-based + concurrent + prototype-based + by separation concerns aspect-oriented role-oriented subject-oriented o recursive value-level contrast function-level probabilistic concept v t e generic programming style computer programming which algorithms are written terms types to-be-specified-later that are then instantiated when needed for specific types provided parameters this approach pioneered by ml permits writing common functions types that differ only set types on which they operate when used thus reducing duplication such software entities are known generics ada delphi eiffel java c f objective-c swift visual basic net parametric polymorphism ml scala haskell haskell community also uses term generic for related but somewhat different concept julia templates c++ d parameterized types influential book design patterns authors design patterns note that this technique especially when combined with delegation very powerful but also quote following dynamic highly parameterized software harder understand than more static software — gang four design patterns chapter term generic programming was originally coined by david musser alexander stepanov more specific sense than above describe programming paradigm whereby fundamental requirements on types are abstracted from across concrete examples algorithms data structures formalised concepts with generic functions implemented terms these concepts typically using language genericity mechanisms described above contents stepanov–musser other generic programming paradigms programming language support for genericity o object-oriented languages + generics ada example advantages limitations + templates c++ technical overview template specialization advantages disadvantages + templates d code generation + genericity eiffel basic/unconstrained genericity constrained genericity + generics java + genericity net + genericity delphi + genericity free pascal o functional languages + genericity haskell polyp generic haskell + clean o other languages see also references citations further reading external links stepanov–musser other generic programming paradigms generic programming defined musser & stepanov follows generic programming centers around idea abstracting from concrete efficient algorithms obtain generic algorithms that can be combined with different data representations produce wide variety useful software — musser david r stepanov alexander generic programming generic programming paradigm approach software decomposition whereby fundamental requirements on types are abstracted from across concrete examples algorithms data structures formalised concepts analogously abstraction algebraic theories abstract algebra early examples this programming approach were implemented scheme ada although best known example standard template library stl which developed theory iterators that used decouple sequence data structures algorithms operating on them for example given n sequence data structures eg singly linked list vector etc m algorithms operate on them eg find sort etc direct approach would implement each algorithm specifically for each data structure giving n × m combinations implement however generic programming approach each data structure returns model iterator concept simple value type which can be dereferenced retrieve current value changed point another value sequence each algorithm instead written generically with arguments such iterators eg pair iterators pointing beginning end subsequence process thus only n + m data structure-algorithm combinations need be implemented several iterator concepts are specified stl each refinement more restrictive concepts eg forward iterators only provide movement next value sequence eg suitable for singly linked list stream input data whereas random-access iterator also provides direct constant-time access any element sequence eg suitable for vector important point that data structure will return model most general concept that can be implemented efficiently—computational complexity requirements are explicitly part concept definition this limits which data structures given algorithm can be applied such complexity requirements are major determinant data structure choice generic programming similarly has been applied other domains eg graph algorithms note that although this approach often utilizes language features compile-time genericity/templates fact independent particular language-technical details generic programming pioneer alexander stepanov wrote generic programming about abstracting classifying algorithms data structures gets its inspiration from knuth not from type theory its goal incremental construction systematic catalogs useful efficient abstract algorithms data structures such undertaking still dream — alexander stepanov short history stl i believe that iterator theories are central computer science theories rings banach spaces are central mathematics — alexander stepanov interview with stepanov bjarne stroustrup noted following stepanov we can define generic programming without mentioning language features lift algorithms data structures from concrete examples their most general abstract form — bjarne stroustrup evolving language for real world c++ 1991-2006 other programming paradigms that have been described generic programming include datatype generic programming described “generic programming — introduction” scrap your boilerplate approach lightweight generic programming approach for haskell this article we distinguish high-level programming paradigms generic programming above from lower-level programming language genericity mechanisms used implement them see programming language support for genericity for further discussion comparison generic programming paradigms see programming language support for genericity genericity facilities have existed high-level languages since at least 1970s languages such ml clu ada were subsequently adopted by many object-based object-oriented languages including beta c++ d eiffel java dec's now defunct trellis-owl language genericity implemented supported differently various programming languages term generic has also been used differently various programming contexts for example forth compiler can execute code while compiling one can create new compiler keywords new implementations for those words on fly has few words that expose compiler behaviour therefore naturally offers genericity capacities which however are not referred such most forth texts similarly dynamically typed languages especially interpreted ones usually offer genericity by default both passing values functions value assignment are type-indifferent such behavior often utilized for abstraction code terseness however this not typically labeled genericity it's direct consequence dynamic typing system employed by language term has been used functional programming specifically haskell-like languages which use structural type system where types are always parametric actual code on those types generic these usages still serve similar purpose code-saving rendering abstraction arrays structs can be viewed predefined generic types every usage array struct type instantiates new concrete type reuses previous instantiated type array element types struct element types are parameterized types which are used instantiate corresponding generic type all this usually built-in compiler syntax differs from other generic constructs some extensible programming languages try unify built-in user defined generic types broad survey genericity mechanisms programming languages follows for specific survey comparing suitability mechanisms for generic programming see object-oriented languages when creating container classes statically typed languages inconvenient write specific implementations for each datatype contained especially if code for each datatype virtually identical for example c++ this duplication code can be circumvented by defining class template template class list { / class contents / } list listofanimals list listofcars above t placeholder for whatever type specified when list created these containers-of-type-t commonly called templates allow class be reused with different datatypes long certain contracts such subtypes signature are kept this genericity mechanism should not be confused with inclusion polymorphism which algorithmic usage exchangeable sub-classes for instance list objects type movingobject containing objects type animal car templates can also be used for type-independent functions swap example below template void swapt & t & b //& passes parameters by reference { t temp = b b = = temp } string hello = world world = hello swap world hello cout elementtype type stack allocatedsize sizetype = record top indextype storage vector allocatedsize end record end stacks instantiating generic package type bookmarktype new natural -- records location text document we are editing package bookmarkstacks new stacks maxsize => elementtype => bookmarktype -- allows user jump between recorded locations document using instance generic package type documenttype record contents adastringsunboundedunboundedstring bookmarks bookmarkstacksstack end record procedure edit documentname string document documenttype begin -- initialise stack bookmarks bookmarkstackscreate s => documentbookmarks initialsize => -- now open file documentname read end edit advantages limitations language syntax allows precise specification constraints on generic formal parameters for example possible specify that generic formal type will only accept modular type actual also possible express constraints between generic formal parameters for example generic type indextype -- must be discrete type type elementtype private -- can be any nonlimited type type arraytype array indextype range elementtype this example arraytype constrained by both indextype elementtype when instantiating unit programmer must pass actual array type that satisfies these constraints disadvantage this fine-grained control complicated syntax but because all generic formal parameters are completely defined specification compiler can instantiate generics without looking at body generic unlike c++ ada does not allow specialised generic instances requires that all generics be instantiated explicitly these rules have several consequences compiler can implement shared generics object code for generic unit can be shared between all instances unless programmer requests inlining subprograms course further consequences o there no possibility code bloat code bloat common c++ requires special care explained below o possible instantiate generics at run-time well at compile time since no new object code required for new instance o actual objects corresponding generic formal object are always considered be nonstatic inside generic see generic formal objects wikibook for details consequences all instances generic being exactly same easier review understand programs written by others there are no special cases take into account all instantiations being explicit there are no hidden instantiations that might make difficult understand program ada does not permit template metaprogramming because does not allow specialisations templates c++ main article template c++ c++ uses templates enable generic programming techniques c++ standard library includes standard template library stl that provides framework templates for common data structures algorithms templates c++ may also be used for template metaprogramming which way pre-evaluating some code at compile-time rather than run-time using template specialization c++ templates are considered turing complete technical overview there are two kinds templates function templates class templates function template pattern for creating ordinary functions based upon parameterizing types supplied when instantiated for example c++ standard template library contains function template maxx y which creates functions that return either x y whichever larger max could be defined like this template t maxt x t y { return x list strings denoted list list has set standard functions associated with which work for any compatible parameterizing types template specialization powerful feature c++'s templates template specialization this allows alternative implementations be provided based on certain characteristics parameterized type that being instantiated template specialization has two purposes allow certain forms optimization reduce code bloat for example consider sort template function one primary activities that such function does swap exchange values two container's positions if values are large terms number bytes takes store each them then often quicker first build separate list pointers objects sort those pointers then build final sorted sequence if values are quite small however usually fastest just swap values in-place needed furthermore if parameterized type already some pointer-type then there no need build separate pointer array template specialization allows template creator write different implementations specify characteristics that parameterized types must have for each implementation be used unlike function templates class templates can be partially specialized that means that alternate version class template code can be provided when some template parameters are known while leaving other template parameters generic this can be used for example create default implementation primary specialization that assumes that copying parameterizing type expensive then create partial specializations for types that are cheap copy thus increasing overall efficiency clients such class template just use specializations without needing know whether compiler used primary specialization some partial specialization each case class templates can also be fully specialized which means that alternate implementation can be provided when all parameterizing types are known advantages disadvantages some uses templates such max function were previously filled by function-like preprocessor macros legacy c programming language for example here possible max macro define maxab d uses exclamation sign parentheses templateparam1 param2 this avoids c++ parsing difficulties due ambiguity with comparison operators if there only one parameter parentheses can be omitted conventionally d combines above features provide compile-time polymorphism using trait-based generic programming for example input range defined any type which satisfies checks performed by isinputrange which defined follows template isinputranger { enum bool isinputrange = istypeof inout int = { r r = rinit // can define range object if rempty {} // can test for empty rpopfront // can invoke popfront auto h = rfront // can get front range } } function which accepts only input ranges can then use above template template constraint auto funrangerange range if isinputrangerange { // } code generation addition template metaprogramming d also provides several features enable compile-time code generation import expression allows reading file from disk using its contents string expression compile-time reflection allows enumerating inspecting declarations their members during compilation user-defined attributes allow users attach arbitrary identifiers declarations which can then be enumerated using compile-time reflection compile-time function execution ctfe allows subset d restricted safe operations be interpreted during compilation string mixins allow evaluating compiling contents string expression d code which becomes part program combining above allows generating code based on existing declarations for example d serialization frameworks can enumerate type's members generate specialized functions for each serialized type perform serialization deserialization user-defined attributes could further indicate serialization rules import expression compile-time function execution also allow efficiently implementing domain-specific languages for example given function which takes string containing html template returns equivalent d source code possible use following way // import contents examplehtt string manifest constant enum htmltemplate = importexamplehtt // transpile html template d code enum htmldcode = htmltemplatetodhtmltemplate // paste contents htmldcode d code mixinhtmldcode genericity eiffel generic classes have been part eiffel since original method language design foundation publications eiffel use term genericity describe creation use generic classes basic/unconstrained genericity generic classes are declared with their class name list one more formal generic parameters following code class list has one formal generic parameter g class list feature -- access item g -- item currently pointed by cursor feature -- element change put newitem g -- add `newitem' at end list formal generic parameters are placeholders for arbitrary class names which will be supplied when declaration generic class made shown two generic derivations below where account deposit are other class names account deposit are considered actual generic parameters they provide real class names substitute for g actual use listofaccounts list -- account list listofdeposits list -- deposit list within eiffel type system although class list considered class not considered type however generic derivation list such list considered type constrained genericity for list class shown above actual generic parameter substituting for g can be any other available class constrain set classes from which valid actual generic parameters can be chosen generic constraint can be specified declaration class sortedlist below generic constraint dictates that any valid actual generic parameter will be class which inherits from class comparable generic constraint ensures that elements sortedlist can fact be sorted class sortedlist generics java main article generics java support for generics containers-of-type-t was added java programming language part j2se java generics are only checked at compile time for type correctness generic type information then removed via process called type erasure maintain compatibility with old jvm implementations making unavailable at runtime for example list converted raw type list compiler inserts type casts convert elements string type when they are retrieved from list reducing performance compared other implementations such c++ templates genericity net generics were added part net framework november based on research prototype from microsoft research started although similar generics java net generics do not apply type erasure but implement generics first class mechanism runtime using reification this design choice provides additional functionality such allowing reflection with preservation generic types well alleviating some limitations erasure such being unable create generic arrays this also means that there no performance hit from runtime casts normally expensive boxing conversions when primitive value types are used generic arguments they get specialized implementations allowing for efficient generic collections methods c++ java nested generic types such dictionary> are valid types however are advised against for member signatures code analysis design rules net allows six varieties generic type constraints using where keyword including restricting generic types be value types be classes have constructors implement interfaces below example with interface constraint using system class sample { static void main { int array = { } makeatleastarray // change array { } foreach int i array consolewritelinei // print results consolereadkeytrue } static void makeatleastt list t lowest where t icomparable { for int i = i interface this ensures compile time error if method called if type does not support comparison interface provides generic method comparetot above method could also be written without generic types simply using non-generic array type however since arrays are contravariant casting would not be type safe compiler may miss errors that would otherwise be caught while making use generic types addition method would need access array items objects instead would require casting compare two elements for value types like types such int this requires boxing conversion although this can be worked around using comparer class done standard collection classes notable behavior static members generic net class static member instantiation per run-time type see example below //a generic class public class gentest { //a static variable - will be created for each type on refraction static countedinstances onepertype = new countedinstances //a data member private t mt //simple constructor public gentestt pt { mt = pt } } //a class public class countedinstances { //static variable - this will be incremented once per instance public static int counter //simple constructor public countedinstances { //increase counter by one during object instantiation countedinstancescounter++ } } //main code entry point //at end execution countedinstancescounter = gentest g1 = new gentest1 gentest g11 = new gentest11 gentest g111 = new gentest111 gentest g2 = new gentest10 genericity delphi delphi's object pascal dialect acquired generics delphi release initially only with now discontinued net compiler before being added native code one delphi release semantics capabilities delphi generics are largely modelled on those had by generics net though implementation by necessity quite different here's more less direct translation first c example shown above program sample {$apptype console} uses genericsdefaults //for icomparer type tutils = class class procedure makeatleastarr tarray const lowest t comparer icomparer overload class procedure makeatleastarr tarray const lowest t overload end class procedure tutilsmakeatleastarr tarray const lowest t comparer icomparer var i integer begin if comparer = nil then comparer = tcomparerdefault for i = lowarr higharr do if comparercomparearr lowest arr tarray const lowest t begin makeatleastarr lowest nil end var ints tarray value integer begin ints = tarraycreate0 tutilsmakeatleastints for value ints do writelnvalue readln end with c methods well whole types can have one more type parameters example tarray generic type defined by language makeatleast generic method available constraints are very similar available constraints c any value type any class specific class interface class with parameterless constructor multiple constraints act additive union genericity free pascal free pascal implemented generics before delphi with different syntax semantics however work now underway implement delphi generics alongside native fpc ones see wiki this allows free pascal programmers use generics whatever style they prefer delphi free pascal example // delphi style unit {$ifdef fpc} {$mode delphi} {$endif} interface type tgenericclass = class function fooconst avalue t t end implementation function tgenericclassfooconst avalue t t begin result = avalue + avalue end end // free pascal's objfpc style unit b {$ifdef fpc} {$mode objfpc} {$endif} interface type generic tgenericclass = class function fooconst avalue t t end implementation function tgenericclassfooconst avalue t t begin result = avalue + avalue end end // example usage delphi style program testgendelphi {$ifdef fpc} {$mode delphi} {$endif} uses ab var gc1 atgenericclass gc2 btgenericclass begin gc1 = atgenericclasscreate gc2 = btgenericclasscreate writelngc1foo100 // writelngc2foo'hello' // hellohello gc1free gc2free end // example usage objfpc style program testgendelphi {$ifdef fpc} {$mode objfpc} {$endif} uses ab // required objfpc type tagenericclassint = specialize atgenericclass tbgenericclassstring = specialize btgenericclass var gc1 tagenericclassint gc2 tbgenericclassstring begin gc1 = tagenericclassintcreate gc2 = tbgenericclassstringcreate writelngc1foo100 // writelngc2foo'hello' // hellohello gc1free gc2free end functional languages genericity haskell type class mechanism haskell supports generic programming six predefined type classes haskell including eq types that can be compared for equality show types whose values can be rendered strings have special property supporting derived instances this means that programmer defining new type can state that this type be instance one these special type classes without providing implementations class methods usually necessary when declaring class instances all necessary methods will be derived – that constructed automatically – based on structure type for instance following declaration type binary trees states that be instance classes eq show data bintree = leaf | node bintree bintree deriving eq show this results equality function == string representation function show being automatically defined for any type form bintree t provided that t itself supports those operations support for derived instances eq show makes their methods == show generic qualitatively different way from parametrically polymorphic functions these functions more accurately type-indexed families functions can be applied values various types although they behave differently for every argument type little work needed add support for new type ralf hinze has shown that similar effect can be achieved for user-defined type classes by certain programming techniques other researchers have proposed approaches this other kinds genericity context haskell extensions haskell discussed below polyp polyp was first generic programming language extension haskell polyp generic functions are called polytypic language introduces special construct which such polytypic functions can be defined via structural induction over structure pattern functor regular datatype regular datatypes polyp are subset haskell datatypes regular datatype t must be kind → if formal type argument definition then all recursive calls t must have form t these restrictions rule out higher-kinded datatypes well nested datatypes where recursive calls are different form flatten function polyp here provided example flatten regular d => d -> flatten = cata fl polytypic fl f -> case f g+h -> either fl fl gh -> \xy -> fl x ++ fl y -> \x -> par -> \x -> rec -> \x -> x d@g -> concat flatten pmap fl con t -> \x -> cata regular d => functorof d b -> b -> d -> b generic haskell generic haskell another extension haskell developed at utrecht university netherlands extensions provides are type-indexed values are defined value indexed over various haskell type constructors unit primitive types sums products user-defined type constructors addition we can also specify behaviour type-indexed values for specific constructor using constructor cases reuse one generic definition another using default cases resulting type-indexed value can be specialised any type kind-indexed types are types indexed over kinds defined by giving case for both k → k' instances are obtained by applying kind-indexed type kind generic definitions can be used by applying them type kind this called generic application result type value depending on which sort generic definition applied generic abstraction enables generic definitions be defined by abstracting type parameter given kind type-indexed types are types which are indexed over type constructors these can be used give types more involved generic values resulting type-indexed types can be specialised any type example equality function generic haskell type eq {} t1 t2 = t1 -> t2 -> bool type eq {} t1 t2 = forall u1 u2 eq {} u1 u2 -> eq {} t1 u1 t2 u2 eq {| t k |} eq {} t t eq {| unit |} = true eq {| + |} eqa eqb inl a1 inl a2 = eqa a1 a2 eq {| + |} eqa eqb inr b1 inr b2 = eqb b1 b2 eq {| + |} eqa eqb = false eq {| |} eqa eqb a1 b1 a2 b2 = eqa a1 a2 && eqb b1 b2 eq {| int |} = == eq {| char |} = == eq {| bool |} = == clean clean offers generic programming based polyp generic haskell supported by ghc>=60 parametrizes by kind those but offers overloading other languages ml family programming languages support generic programming through parametric polymorphism generic modules called functors both standard ml ocaml provide functors which are similar class templates ada's generic packages scheme syntactic abstractions also have connection genericity – these are fact superset templating à la c++ verilog module may take one more parameters which their actual values are assigned upon instantiation module one example generic register array where array width given via parameter such array combined with generic wire vector can make generic buffer memory module with arbitrary bit width out single module implementation vhdl being derived from ada also have generic ability see also partial evaluation concept generic programming type polymorphism template metaprogramming references lee kent d december programming languages active learning approach springer science & business media pp 9–10 isbn 978-0-387-79422-8 milner r morris l newey m logic for computable functions with reflexive polymorphic types proceedings conference on proving improving programs |access-date= requires |url= help cs1 maint multiple names authors list link b gamma erich helm richard johnson ralph vlissides john design patterns addison-wesley isbn 0-201-63361-2 musser & stepanov musser david r stepanov alexander generic programming pdf cs1 maint multiple names authors list link alexander stepanov paul mcjones june elements programming addison-wesley professional isbn 978-0-321-63537-2 musser david r stepanov alexander library generic algorithms ada proceedings annual acm sigada international conference on ada 216–225 cs1 maint multiple names authors list link alexander stepanov meng lee standard template library hp laboratories technical report 95-11r1 november matthew h austern generic programming stl using extending c++ standard template library addison-wesley longman publishing co inc boston ma usa jeremy g siek lie-quan lee andrew lumsdaine boost graph library user guide reference manual addison-wesley stepanov alexander short history stl pdf b stroustrup bjarne evolving language for real world c++ 1991-2006 pdf lo russo graziano interview with stepanov roland backhouse patrik jansson johan jeuring lambert meertens generic programming — introduction pdf lämmel ralf peyton jones simon scrap your boilerplate practical design pattern for generic programming pdf microsoft retrieved october cs1 maint multiple names authors list link gabriel dos reis jaakko ja ̈rvi what generic programming preprint lcsd'05 pdf r garcia j ja ̈rvi lumsdaine j siek j willcock extended comparative study language support for generic programming preprint pdf stroustrup dos reis concepts - design choices for template argument checking stroustrup bjarne avoiding code replication design evolution c++ reading massachusetts addison-wesley pp 346–348 isbn 978-81-317-1608-3 bright walter voldemort types d dr dobbs retrieved june object-oriented software construction prentice hall object-oriented software construction second edition prentice hall eiffel language prentice hall net/c generics history some photos from feb c yesterday today tomorrow interview with anders hejlsberg generics c java c++ code analysis ca1006 do not nest generic types member signatures constraints on type parameters c programming guide generic haskell user's guide verilog by example section rest for reference blaine c readler full arc press isbn 978-0-9834973-0-1 citations musser d r stepanov generic programming p gianni symbolic algebraic computation international symposium issac lecture notes computer science pp 13–25 doi 101007/3-540-51084-22 isbn 978-3-540-51084-0 stroustrup bjarne evolving language for real world c++ 1991-2006 pdf acm hopl gamma erich helm richard johnson ralph vlissides john design patterns elements reusable object-oriented software addison-wesley isbn 0-201-63361-2 further reading gabriel dos reis jaakko järvi what generic programming lcsd gibbons jeremy backhouse r gibbons j hinze r jeuring j eds datatype-generic programming spring school on datatype-generic programming lecture notes computer science heidelberg springer pp 1–71 citeseerx bertrand meyer genericity vs inheritance oopsla first acm conference on object-oriented programming systems languages applications portland oregon september–2 october pages 391–405 external links generic-programmingorg alexander stepanov collected papers alexander stepanov creator stl c++/d walter bright templates revisited david vandevoorde nicolai m josuttis c++ templates complete guide addison-wesley isbn 0-201-73484-2 c/net jason clark introducing generics microsoft clr september msdn magazine microsoft jason clark more on generics microsoft clr october msdn magazine microsoft m aamir maniar genericsnet open source generics library for c delphi/object pascal nick hodges delphi reviewers guide october codegear developer network codegear craig stuntz delphi generics type constraints october dr bob delphi generics free pascal free pascal reference guide chapter generics michaël van canneyt delphi for win32 generics with delphi win32 sébastien doeraene delphi for net delphi generics felix colibri eiffel eiffel iso/ecma specification document haskell johan jeuring sean leather josé pedro magalhães alexey rodriguez yakushev libraries for generic programming haskell utrecht university dæv clarke johan jeuring andres löh generic haskell user's guide ralf hinze generics for masses proceedings acm sigplan international conference on functional programming icfp simon peyton jones editor haskell language report revised ralf lämmel simon peyton jones scrap your boilerplate practical design pattern for generic programming proceedings acm sigplan international workshop on types language design implementation tldi'03 also see website devoted this research andres löh exploring generic haskell phd thesis utrecht university isbn 90-393-3765-9 generic haskell language for generic programming java gilad bracha generics java programming language maurice naftalin philip wadler java generics collections o'reilly media inc isbn 0-596-52775-6 peter sestoft java precisely second edition mit press isbn 0-262-69325-9 java se sun microsystems inc angelika langer java generics faqs v t e data types uninterpreted bit byte trit tryte word bit array numeric arbitrary-precision bignum complex decimal fixed point floating point o double precision o extended precision o half precision o long double o minifloat o octuple precision o quadruple precision o single precision integer o signedness interval rational text character string o null-terminated pointer address o physical o virtual reference composite algebraic data type o generalized array associative array class dependent equality inductive list object o metaobject option type product record set union o tagged other boolean bottom type collection enumerated type exception function type opaque data type recursive data type semaphore stream top type type class unit type void related topics abstract data type data structure generic kind o metaclass parametric polymorphism primitive data type protocol o interface subtyping type constructor type conversion type system see also platform-dependent independent units information authority control lccn sh00000132 gnd 4431718-9 bnf cb15025202q data retrieved from https//enwikipediaorg/w/indexphptitle=genericprogramming&oldid=748403654 categories generic programming hidden categories pages using citations with accessdate no url cs1 maint multiple names authors list pages using isbn magic links all articles with unsourced statements articles with unsourced statements from august articles with unsourced statements from may articles with unsourced statements from march wikipedia articles with lccn identifiers wikipedia articles with gnd identifiers wikipedia articles with bnf identifiers use dmy dates from january navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages беларуская български català čeština deutsch eesti español فارسی français 한국어 עברית nederlands 日本語 norsk bokmål polski português русский slovenščina српски / srpski svenska українська 粵語 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 