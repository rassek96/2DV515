binary translation from wikipedia free encyclopedia jump navigation search computing binary translation binary recompilation emulation one instruction set by another through translation binary code sequences instructions are translated from source target instruction set some cases such instruction set simulation target instruction set may be same source instruction set providing testing debugging features such instruction trace conditional breakpoints hot spot detection two main types are static dynamic binary translation translation can be done hardware for example by circuits cpu software eg run-time engines statical recompiler emulators contents motivation static binary translation o examples for static binary translations dynamic binary translation o examples for dynamic binary translations software o examples for dynamic binary translations hardware see also references further reading motivation motivation for using complex process binary translation either that compilation source code destination platform instruction set not available technically problematic when source code plainly not available anymore abandonware performance-wise static recompilations have potential achieve better performance than real emulation approaches optimal case one overhead introducing interface removed static binary translation translator using static binary translation aims convert all code executable file into code that runs on target architecture without having run code first done dynamic binary translation this very difficult do correctly since not all code can be discovered by translator for example some parts executable may be reachable only through indirect branches whose value known only at run-time one such static binary translator uses universal superoptimizer peephole technology developed by sorav bansal alex aiken from stanford university perform efficient translation between possibly many source target pairs with considerably low development costs high performance target binary experiments powerpc-to-x86 translations some binaries even outperformed native versions but on average they ran at two-thirds native speed examples for static binary translations arm architecture version video game starcraft was generated by static recompilation additional reverse engineering original x86 version pandora handheld community was capable developing required tools on their own achieving such translations successfully several times for instance successful x86-to-x64 static recompilation was generated for procedural terrain generator video game cube world another example nes-to-x86 statically recompiled version videogame super mario bros which was generated under usage llvm scott elliott phillip r hutchinson at nintendo developed tool generate c code from game boy binary that could then be compiled for new platform linked against hardware library for use airline entertainment systems norman ramsey at bell communications research mary f fernandez at department computer science princeton university developed new jersey machine-code toolkit that had basic tools for static assembly translation dynamic binary translation dynamic binary translation looks at short sequence code—typically on order single basic block—then translates caches resulting sequence code only translated discovered when possible branch instructions are made point already translated saved code memoization dynamic binary translation differs from simple emulation eliminating emulator's main read-decode-execute loop—a major performance bottleneck paying for this by large overhead during translation time this overhead hopefully amortized translated code sequences are executed multiple times more advanced dynamic translators employ dynamic recompilation where translated code instrumented find out what portions are executed large number times these portions are optimized aggressively this technique reminiscent jit compiler fact such compilers eg sun's hotspot technology can be viewed dynamic translators from virtual instruction set bytecode real one examples for dynamic binary translations software apple computer implemented dynamic translating emulator for m68k code their powerpc line macintoshes which achieved very high level reliability performance compatibility see mac 68k emulator this allowed apple bring machines market with only partially native operating system end users could adopt new faster architecture without risking their investment software partly because emulator was so successful many parts operating system remained emulated full transition powerpc native operating system os was not made until release mac os x os x classic runtime environment continued offer this emulation capability on powerpc macs until os x mac os x for intel-based macs introduced rosetta dynamic translation layer ease apple's transition from ppc-based hardware x86 developed for apple by transitive corporation rosetta software implementation transitive's quicktransit solution quicktransit during its product lifespan also provided sparc→x86 x86→power architecture mips→itanium translation support dec achieved similar success with its translation tools help users migrate from cisc vax architecture alpha risc architecture hp aries automatic re-translation integrated environment simulation software dynamic binary translation system that combines fast code interpretation with two phase dynamic translation transparently accurately execute hp hp-ux applications on hp-ux 11i for hp integrity servers aries fast interpreter emulates complete set non-privileged pa-risc instructions with no user intervention during interpretation monitors application's execution pattern translates only frequently executed code into native itanium code at runtime aries implements two phase dynamic translation technique which translated code first phase collects runtime profile information which used during second phase translation further optimize translated code aries stores dynamically translated code memory buffer called code cache further references translated basic blocks execute directly code cache do not require additional interpretation translation targets translated code blocks are back-patched ensure execution takes place code cache most time at end emulation aries discards all translated code without modifying original application aries emulation engine also implements environment emulation which emulates hp hp-ux application's system calls signal delivery exception management threads management emulation hp gdb for debugging core file creation for application dec created fx32 binary translator for converting x86 applications alpha applications sun microsystems' wabi software included dynamic translation from x86 sparc instructions january transmeta corporation announced novel processor design named crusoe from faq on their web site smart microprocessor consists hardware vliw core its engine software layer called code morphing software code morphing software acts shell morphing translating x86 instructions native crusoe instructions addition code morphing software contains dynamic compiler code optimizer result increased performance at least amount power allows transmeta evolve vliw hardware code morphing software separately without affecting huge base software applications intel corporation developed implemented ia-32 execution layer - dynamic binary translator designed support ia-32 applications on itanium-based systems which was included microsoft windows server for itanium architecture well several flavors linux including red hat suse allowed ia-32 applications run faster than they would using native ia-32 mode on itanium processors net framework's just-in-time compiler translates cli executable into native instruction set dolphin emulator for gamecube/wii performs jit recompilation powerpc code x86 examples for dynamic binary translations hardware x86 intel cpus since pentium pro translate complex cisc x86 instructions more risc-like internal microcode instructions nvidia tegra k1 denver translates arm instructions over slow hardware decoder its native microcode instructions uses software binary translator for hot code see also binary recompiler dynamic recompilation just-in-time compilation instruction set simulator emulator virtual machine comparison platform virtualization software shadow memory references steinlechner peter march starcraft für arm-handheld kompiliert german golemde retrieved march notaz march starcraft repoopenpandoraorg retrieved march notaz ia32rtools/ github retrieved notaz march starcraft openpandoraorg retrieved march no source no port rule not completely true you can get something similar but not same port through static recompilation similar stuff was done several times by m-ht for some dos games game was also converted for android with somewhat similar approach m-ht warcraft orcs & humans repoopenpandoraorg kærlev mathias practical portable x86 recompilation retrieved but then idea somehow using original x86 machine code presented itself however for our open server we need support x86-64 well that case we absolutely need emulation recompilation static recompilation assembler seemed like much better option but keep portable we would need write backends for x86 x86-64 possibly arm/powerpc kelley andrew statically recompiling nes games into native executables with llvm go retrieved this article presents original research regarding possibility statically disassembling recompiling nintendo entertainment system games into native executables us elliott scott & phillip hutchinson system method for trans-compiling video games issued ramsey norman fernandez mary f new jersey machine-code toolkit proceeding tcon'95 proceedings usenix technical conference proceedings usenix association berkeley ca usa 24–24 jim carlson jerry huck itanium rising breaking through moore's second law computing power prentice hall ptr retrieved hp aries dynamic binary translator hp retrieved stokes jon transmeta crusoe explored ars technica retrieved hughes rob january transmeta's crusoe microprocessor geekcom archived from original on september transmeta crusoe processor frequently asked questions faq transmeta archived from original on further reading haber gadi introduction binary translation pdf intel bansal sorav aiken alex december binary translation using peephole superoptimizers department computer science engineering indian institute technology delhi retrieved march baraz leonid devor tevi etzion orna goldenberg shalom skaletsky alex wang yun zemach yigal ia-32 execution layer two-phase dynamic translator designed support ia-32 applications on itanium-based systems proceedings 36th annual ieee/acm international symposium on microarchitecture micro washington dc usa ieee computer society 191– isbn 0-7695-2043-x toal graham emulator writer's howto for static binary translation self-published chernoff anton herdeg mark hookway ray reeve chris rubin norman tye tony yadavalli s bharadwaj yates john fx32 profile-directed binary translator ieee micro 56–64 issn 0272-1732 retrieved from https//enwikipediaorg/w/indexphptitle=binarytranslation&oldid=752149291 categories emulation software interpreters computing virtualization software hidden categories cs1 german-language sources de use mdy dates from march all articles with unsourced statements articles with unsourced statements from july articles with unsourced statements from february navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages العربية français nederlands 日本語 русский edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 