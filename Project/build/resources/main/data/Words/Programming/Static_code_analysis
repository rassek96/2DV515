static program analysis from wikipedia free encyclopedia   redirected from static code analysis jump navigation search static program analysis analysis computer software that performed without actually executing programs analysis performed on executing programs known dynamic analysis most cases analysis performed on some version source code other cases some form object code term usually applied analysis performed by automated tool with human analysis being called program understanding program comprehension code review software inspections software walkthroughs are also used latter case contents rationale tool types formal methods see also references o citations o sources further reading external links rationale sophistication analysis performed by tools varies from those that only consider behaviour individual statements declarations those that include complete source code program their analysis uses information obtained from analysis vary from highlighting possible coding errors eg lint tool formal methods that mathematically prove properties about given program eg its behaviour matches that its specification software metrics reverse engineering can be described forms static analysis deriving software metrics static analysis are increasingly deployed together especially creation embedded systems by defining so-called software quality objectives growing commercial use static analysis verification properties software used safety-critical computer systems locating potentially vulnerable code for example following industries have identified use static code analysis means improving quality increasingly sophisticated complex software medical software us food drug administration fda has identified use static analysis for medical devices nuclear software uk office for nuclear regulation onr recommends use static analysis on reactor protection systems aviation software combination with dynamic analysis study by vdc research reports that 287% embedded software engineers surveyed currently use static analysis tools 397% expect use them within years study from found that 60% interviewed developers european research projects made at least use their basic ide built-in static analyzers however only about 10% employed additional other perhaps more advanced analysis tool application security industry name static application security testing sast also used actually sast important part security development lifecycles sdls such sdl defined by microsoft common practice software companies tool types omg object management group published study regarding types software analysis required for software quality measurement assessment this document on how deliver resilient secure efficient easily changed systems line with cisq recommendations describes three levels software analysis unit level analysis that takes place within specific program subroutine without connecting context that program technology level analysis that takes into account interactions between unit programs get more holistic semantic view overall program order find issues avoid obvious false positives system level analysis that takes into account interactions between unit programs but without being limited one specific technology programming language further level software analysis can be defined mission/business level analysis that takes into account business/mission layer terms rules processes that are implemented within software system for its operation part enterprise program/mission layer activities these elements are implemented without being limited one specific technology programming language many cases are distributed across multiple languages but are statically extracted analyzed for system understanding for mission assurance formal methods main article formal methods formal methods term applied analysis software computer hardware whose results are obtained purely through use rigorous mathematical methods mathematical techniques used include denotational semantics axiomatic semantics operational semantics abstract interpretation by straightforward reduction halting problem possible prove that for any turing complete language finding all possible run-time errors arbitrary program more generally any kind violation specification on final result program undecidable there no mechanical method that can always answer truthfully whether arbitrary program may may not exhibit runtime errors this result dates from works church gödel turing 1930s see halting problem rice's theorem with many undecidable questions one can still attempt give useful approximate solutions some implementation techniques formal static analysis include abstract interpretation model effect that every statement has on state abstract machine ie 'executes' software based on mathematical properties each statement declaration this abstract machine over-approximates behaviours system abstract system thus made simpler analyze at expense incompleteness not every property true original system true abstract system if properly done though abstract interpretation sound every property true abstract system can be mapped true property original system frama-c value analysis plugin polyspace heavily rely on abstract interpretation data-flow analysis lattice-based technique for gathering information about possible set values hoare logic formal system with set logical rules for reasoning rigorously about correctness computer programs there tool support for some programming languages eg spark programming language subset ada java modeling language — jml — using esc/java esc/java2 frama-c wp weakest precondition plugin for c language extended with acsl ansi/iso c specification language model checking considers systems that have finite state may be reduced finite state by abstraction symbolic execution used derive mathematical expressions representing value mutated variables at particular points code see also software testing portal code audit documentation generator formal semantics programming languages formal verification list tools for static code analysis shape analysis software references citations wichmann b canning clutterbuck d l winsbarrow l ward n j marsh d w r mar industrial perspective on static analysis pdf software engineering journal 69–75 archived from original pdf on software quality objectives for source code pdf proceedings embedded real time software systems conference erts2010org toulouse france patrick briand martin brochet thierry cambois emmanuel coutenceau olivier guetta daniel mainberte frederic mondot patrick munier loic noury philippe spozio frederic retailleau improving software security with precise static runtime analysis pdf benjamin livshits section static techniques for security stanford doctoral thesis fda infusion pump software safety research at fda food drug administration retrieved computer based safety systems - technical guidance for assessing software aspects digital computer based protection systems computer based safety systems pdf retrieved may position paper cast-9 considerations for evaluating safety engineering approaches software assurance // faa certification authorities software team cast january verification combination both static dynamic analyses should be specified by applicant/developer applied software vdc research automated defect prevention for embedded software quality vdc research retrieved prause christian r rené reiners silviya dencheva empirical study tool support highly distributed research projects global software engineering icgse 5th ieee international conference on ieee m howard s lipner security development lifecycle sdl process for developing demonstrably more secure software microsoft press isbn 978-0735622142 achim d brucker uwe sodan deploying static application security testing on large scale gi sicherheit lecture notes informatics pages 91-101 gi vijay d’silva et al survey automated techniques for formal software verification pdf transactions on cad retrieved jones paul formal methods-based verification approach medical device software analysis embedded systems design archived from original on july retrieved sources kaner cem nguyen hung q falk jack testing computer software second ed boston thomson computer press isbn 0-47135-846-0 static testing c++ code utility check library usability further reading syllabus readings for alex aiken ’s stanford cs295 course ayewah nathaniel hovemeyer david morgenthaler j david penix john pugh william using static analysis find bugs ieee software 22–29 doi101109/ms2008130 brian chess jacob west fortify software secure programming with static analysis addison-wesley isbn 978-0-321-42477-8 flemming nielson hanne r nielson chris hankin principles program analysis corrected ed springer isbn 978-3-540-65410-0 abstract interpretation static analysis international winter school on semantics applications by david schmidt external links code quality improvement - coding standards conformance checking ddj competition on software verification sv-comp episode static code analysis interview podcast at software engineering radio implementing automated governance for coding standards explains why how integrate static code analysis into build process integrate static analysis into software development process net static analysis infoq static code analysis - polyspace samate project resource for automated static analysis tools retrieved from https//enwikipediaorg/w/indexphptitle=staticprogramanalysis&oldid=750731848 categories program analysis software review software testing static program analysis quality assurance hidden categories all articles with dead external links articles with dead external links from june pages using isbn magic links navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages čeština deutsch ελληνικά español فارسی français 한국어 עברית magyar 日本語 русский suomi українська 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 