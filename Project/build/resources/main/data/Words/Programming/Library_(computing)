library computing from wikipedia free encyclopedia jump navigation search not be confused with integrated library system library computers illustration application which uses libvorbisfile play ogg vorbis file computer science library collection non-volatile resources used by computer programs often develop software these may include configuration data documentation help data message templates pre-written code subroutines classes values type specifications ibm's os/360 its successors they are referred partitioned data sets computer science library collection implementations behavior written terms language that has well-defined interface by which behavior invoked for instance people who want write higher level program can use library make system calls instead implementing those system calls over over again addition behavior provided for reuse by multiple independent programs program invokes library-provided behavior via mechanism language for example simple imperative language such c behavior library invoked by using c's normal function-call what distinguishes call being library versus being another function same program way that code organized system library code organized such way that can be used by multiple programs that have no connection each other while code that part program organized be used only within that one program this distinction can gain hierarchical notion when program grows large such multi-million-line program that case there may be internal libraries that are reused by independent sub-portions large program distinguishing feature that library organized for purposes being reused by independent programs sub-programs user only needs know interface not internal details library value library lies reuse behavior when program invokes library gains behavior implemented inside that library without having implement that behavior itself libraries encourage sharing code modular fashion ease distribution code behavior implemented by library can be connected invoking program at different program lifecycle phases if code library accessed during build invoking program then library called static library alternative build executable invoking program distribute that independently library implementation library behavior connected after executable has been invoked be executed either part process starting execution middle execution this case library called dynamic library loaded at run time dynamic library can be loaded linked when preparing program for execution by linker alternatively middle execution application may explicitly request that module be loaded most compiled languages have standard library although programmers can also create their own custom libraries most modern software systems provide libraries that implement majority system services such libraries have commoditized services which modern application requires such most code used by modern applications provided these system libraries contents history linking relocation static libraries shared libraries o memory sharing o dynamic linking o optimizations o locating libraries at run time + microsoft windows + openstep + unix-like systems o dynamic loading object class libraries remote libraries code generation libraries file naming see also notes references external links history earliest programming concepts analogous libraries were intended separate data definitions from program implementation jovial brought compool communication pool concept popular attention although adopted idea from large-system sage software following computer science principles separation concerns information hiding comm pool's purpose was permit sharing system data among many programs by providing centralized data description cobol also included primitive capabilities for library system but jean sammet described them inadequate library facilities retrospect another major contributor modern library concept came form subprogram innovation fortran fortran subprograms can be compiled independently each other but compiler lacked linker so prior introduction modules fortran-90 type checking between fortran subprograms was impossible finally historians concept should remember influential simula simula was first object-oriented programming language its classes were nearly identical modern concept used java c++ c class concept simula was also progenitor package ada module modula-2 even when developed originally simula classes could be included library files added at compile time linking main articles link time linker computing libraries are important program linking binding process which resolves references known links symbols library modules linking process usually automatically done by linker binder program that searches set libraries other modules given order usually not considered error if link target can be found multiple times given set libraries linking may be done when executable file created whenever program used at run time references being resolved may be addresses for jumps other routine calls they may be main program one module depending upon another they are resolved into fixed relocatable addresses from common base by allocating runtime memory for memory segments each module referenced some programming languages may use feature called smart linking whereby linker aware integrated with compiler such that linker knows how external references are used code library that never actually used even though internally referenced can be discarded from compiled application for example program that only uses integers for arithmetic does no arithmetic operations at all can exclude floating-point library routines this smart-linking feature can lead smaller application file sizes reduced memory usage relocation main article relocation computer science some references program library module are stored relative symbolic form which cannot be resolved until all code libraries are assigned final static addresses relocation process adjusting these references done either by linker loader general relocation cannot be done individual libraries themselves because addresses memory may vary depending on program using them other libraries they are combined with position-independent code avoids references absolute addresses therefore does not require relocation static libraries main article static library when linking performed during creation executable another object file known static linking early binding this case linking usually done by linker but may also be done by compiler static library also known archive one intended be statically linked originally only static libraries existed static linking must be performed when any modules are recompiled all modules required by program are sometimes statically linked copied into executable file this process resulting stand-alone file known static build program static build may not need any further relocation if virtual memory used no address space layout randomization desired shared libraries shared object redirects here for synchronization mechanism see monitor synchronization shared library shared object file that intended be shared by executable files further shared object files modules used by program are loaded from individual shared objects into memory at load time run time rather than being copied by linker when creates single monolithic executable file for program shared libraries can be statically linked meaning that references library modules are resolved modules are allocated memory when executable file created but often linking shared libraries postponed until they are loaded most modern operating systems can have shared library files same format executable files this offers two main advantages first requires making only one loader for both them rather than two having single loader considered well worth its added complexity secondly allows executables also be used shared libraries if they have symbol table typical combined executable shared library formats are elf mach-o both unix pe windows some older environments such 16-bit windows mpe for hp only stack based data local was allowed shared library code other significant restrictions were placed on shared library code memory sharing main article shared memory interprocess communication library code may be shared memory by multiple processes well on disk if virtual memory used processes would execute same physical page ram that mapped into different address spaces processes this has advantages for instance on openstep system applications were often only few hundred kilobytes size loaded quickly majority their code was located libraries that had already been loaded for other purposes by operating system programs can accomplish ram sharing by using position independent code unix which leads complex but flexible architecture by using common virtual addresses windows os/2 these systems make sure by various tricks like pre-mapping address space reserving slots for each shared library that code has great probability being shared third alternative single-level store used by ibm system/38 its successors this allows position-dependent code but places no significant restrictions on where code can be placed how can be shared some cases different versions shared libraries can cause problems especially when libraries different versions have same file name different applications installed on system each require specific version such scenario known dll hell named after windows os/2 dll file most modern operating systems after have clean-up methods eliminate such situations use application specific private libraries dynamic linking main article dynamic linker dynamic linking late binding linking performed while program being loaded load time executed run time rather than when executable file created dynamically linked library dynamic-link library dll under windows os/2 dynamic shared object dso under unix-like systems library intended for dynamic linking only minimum amount work done by linker when executable file created only records what library routines program needs index names numbers routines library majority work linking done at time application loaded load time during execution run time usually necessary linking program called dynamic linker linking loader actually part underlying operating system however possible not exceedingly difficult write program that uses dynamic linking includes its own dynamic linker even for operating system that itself provides no support for dynamic linking programmers originally developed dynamic linking multics operating system starting mts michigan terminal system built late 1960s optimizations since shared libraries on most systems do not change often systems can compute likely load address for each shared library on system before needed store that information libraries executables if every shared library that loaded has undergone this process then each will load at its predetermined address which speeds up process dynamic linking this optimization known prebinding macos prelinking linux disadvantages this technique include time required precompute these addresses every time shared libraries change inability use address space layout randomization requirement sufficient virtual address space for use problem that will be alleviated by adoption 64-bit architectures at least for time being locating libraries at run time loaders for shared libraries vary widely functionality some depend on executable storing explicit paths libraries any change library naming layout file system will cause these systems fail more commonly only name library not path stored executable with operating system supplying method find library on-disk based on some algorithm if shared library that executable depends on deleted moved renamed if incompatible version library copied place that earlier search executable would fail load this called dependency hell existing on many platforms infamous windows variant commonly known dll hell this problem cannot occur if each version each library uniquely identified each program references libraries only by their full unique identifiers dll hell problems with earlier windows versions arose from using only names libraries which were not guaranteed be unique resolve dynamic links programs avoid dll hell later versions windows rely largely on options for programs install private dlls—essentially partial retreat from use shared libraries—along with mechanisms prevent replacement shared system dlls with earlier versions them microsoft windows microsoft windows checks registry determine proper place load dlls that implement com objects but for other dlls will check directories defined order first windows checks directory where loaded program private dll any directories set by calling setdlldirectory function system32 system windows directories then current working directory finally directories specified by path environment variable applications written for net framework framework since also check global assembly cache primary store shared dll files remove issue dll hell openstep openstep used more flexible system collecting list libraries from number known locations similar path concept when system first starts moving libraries around causes no problems at all although users incur time cost when first starting system unix-like systems most unix-like systems have search path specifying file system directories which look for dynamic libraries some systems specify default path configuration file others hard-code into dynamic loader some executable file formats can specify additional directories which search for libraries for particular program this can usually be overridden with environment variable although disabled for setuid setgid programs so that user can't force such program run arbitrary code with root permissions developers libraries are encouraged place their dynamic libraries places default search path on downside this can make installation new libraries problematic these known locations quickly become home increasing number library files making management more complex dynamic loading main article dynamic loading dynamic loading subset dynamic linking involves dynamically linked library loading unloading at run time on request such request may be made implicitly at compile time explicitly at run time implicit requests are made at compile time when linker adds library references that include file paths simply file names explicit requests are made when applications make direct calls operating system's api at run time most operating systems that support dynamically linked libraries also support dynamically loading such libraries via run-time linker api for instance microsoft windows uses api functions loadlibrary loadlibraryex freelibrary getprocaddress with microsoft dynamic link libraries posix based systems including most unix unix-like systems use dlopen dlclose dlsym some development systems automate this process object class libraries although originally pioneered 1960s dynamic linking did not reach operating systems used by consumers until late 1980s was generally available some form most operating systems by early 1990s during this same period object-oriented programming oop was becoming significant part programming landscape oop with runtime binding requires additional information that traditional libraries don't supply addition names entry points code located within they also require list objects they depend on this side-effect one oop's main advantages inheritance which means that parts complete definition any method may be different places this more than simply listing that one library requires services another true oop system libraries themselves may not be known at compile time vary from system system at same time many developers worked on idea multi-tier programs which display running on desktop computer would use services mainframe minicomputer for data storage processing for instance program on gui-based computer would send messages minicomputer return small samples huge dataset for display remote procedure calls rpc already handled these tasks but there was no standard rpc system soon majority minicomputer mainframe vendors instigated projects combine two producing oop library format that could be used anywhere such systems were known object libraries distributed objects if they supported remote access not all did microsoft's com example such system for local use dcom modified version that supports remote access for some time object libraries held status next big thing programming world there were number efforts create systems that would run across platforms companies competed try get developers locked into their own system examples include ibm's system object model som/dsom sun microsystems' distributed objects everywhere doe next's portable distributed objects pdo digital's objectbroker microsoft's component object model com/dcom any number corba -based systems after inevitable cooling marketing hype object libraries continue be used both object-oriented programming distributed information systems class libraries are rough oop equivalent older types code libraries they contain classes which describe characteristics define actions methods that involve objects class libraries are used create instances objects with their characteristics set specific values some oop languages like java distinction clear with classes often contained library files like java's jar file format instantiated objects residing only memory although potentially able be made persistent separate files others like smalltalk class libraries are merely starting point for system image that includes entire state environment classes all instantiated objects remote libraries another solution library issue comes from using completely separate executables often some lightweight form calling them using remote procedure call rpc over network another computer this approach maximizes operating system re-use code needed support library same code being used provide application support security for every other program additionally such systems do not require library exist on same machine but can forward requests over network however such approach means that every library call requires considerable amount overhead rpc calls are much more expensive than calling shared library that has already been loaded on same machine this approach commonly used distributed architecture that makes heavy use such remote calls notably client-server systems application servers such enterprise javabeans code generation libraries code generation libraries are high-level apis that can generate transform byte code for java they are used by aspect-oriented programming some data access frameworks for testing generate dynamic proxy objects they also are used intercept field access file naming most modern unix-like systems system stores libfooa libfooso files directories such /lib /usr/lib /usr/local/lib filenames always start with lib end with suffix archive static library so shared object dynamically linked library some systems might have multiple names for dynamically linked library with most names being names for symbolic links remaining name those names might include major version library full version number for example on some systems libfooso2 would be filename for second major interface revision dynamically linked library libfoo la files sometimes found library directories are libtool archives not usable by system such macos system inherits static library conventions from bsd with library stored file can use so-style dynamically linked libraries with dylib suffix instead most libraries macos however consist frameworks placed inside special directories called bundles which wrap library's required files metadata for example framework called myframework would be implemented bundle called myframeworkframework with myframeworkframework/myframework being either dynamically linked library file being symlink dynamically linked library file myframeworkframework/versions/current/myframework microsoft windows dynamic-link libraries usually have suffix dll although other file name extensions may identify specific-purpose dynamically linked libraries eg ocx for ole libraries interface revisions are either encoded file names abstracted away using com-object interfaces depending on how they are compiled lib files can be either static libraries representations dynamically linkable libraries needed only during compilation known import libraries unlike unix world which uses different file extensions when linking against lib file windows one must first know if regular static library import library latter case dll file must be present at run time see also code reuse linker computing loader computing dynamic-link library object file plug-in prebinding static library runtime library visual component library vcl component library for cross platform clx lazarus component library lcl c standard library java class library framework class library generic programming used by c++ standard library soname method stub notes was possible earlier between eg ada subprograms some older systems eg burroughs mcp multics also have only single format for executable files regardless whether they are shared references static libraries tldp retrieved october wexelblat richard history programming languages acm monograph series new york ny academic press subsidiary harcourt brace p isbn 0-12-745040-8 wexelblat op cit p wexelblat op cit p wilson leslie b clark robert g comparative programming languages wokingham england addison-wesley p isbn 0-201-18483-4 wilson clark op cit p wexelblat op cit p christian collberg john h hartman sridivya babu sharath k udupa slinky static linking reloaded department computer science university arizona retrieved cs1 maint uses authors parameter link b anderson rick end dll hell microsoftcom archived from original on retrieved private dlls are dlls that are installed with specific application used only by that application history mts information technology digest dynamic-link library search order microsoft developer network library microsoft retrieved code generation library source forge retrieved byte code generation library high level api generate transform java byte code used by aop testing data access frameworks generate dynamic proxy objects intercept field access bresnahan christine blum richard lpic-1 linux professional institute certification study guide exam 101-400 exam 102-400 john wiley & sons p isbn retrieved linux shared libraries are similar dynamic link libraries dlls windows windows dlls are usually identified by dll filename extensions external links shared libraries - 'linkers loaders' by john r levine dynamic linking loading - 'linkers loaders' by john r levine article beginner's guide linkers by david drysdale article faster c++ program startups by improving runtime linking efficiency by léon bottou john ryland how create program libraries by baris simsek lib bfd - binary file descriptor library 1st library-centric software design workshop lcsd'05 at oopsla'05 2nd library-centric software design workshop lcsd'06 at oopsla'06 how create shared library by ulrich drepper with much background info anatomy linux dynamic libraries at ibmcom v t e application binary interface abi parts conventions alignment calling convention call stack library o static machine code memory segmentation name mangling object code opaque pointer position-independent code relocation system call virtual method table related topics binary code compatibility foreign function interface language binding linker o dynamic loader year problem v t e executable object file formats aout aif coff cmd com ecoff elf goff hunk mach-o mz ne omf os/360 pe pef xcoff comparison formats exe authority control gnd 4121521-7 retrieved from https//enwikipediaorg/w/indexphptitle=librarycomputing&oldid=751091399 categories computer libraries operating system technology hidden categories cs1 maint uses authors parameter all accuracy disputes articles with disputed statements from may all articles with unsourced statements articles with unsourced statements from december use dmy dates from august wikipedia articles with gnd identifiers navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version other projects wikimedia commons languages العربية беларуская български català čeština dansk deutsch eesti ελληνικά español esperanto فارسی français gaeilge 한국어 hrvatski bahasa indonesia italiano עברית қазақша magyar bahasa melayu nederlands 日本語 norsk bokmål norsk nynorsk polski português русский slovenčina slovenščina српски / srpski suomi svenska தமிழ் ไทย українська 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 