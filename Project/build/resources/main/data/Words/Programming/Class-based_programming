class-based programming from wikipedia free encyclopedia jump navigation search this article needs additional citations for verification please help improve this article by adding citations reliable sources unsourced material may be challenged removed february learn how when remove this template message programming paradigms action agent-oriented array-oriented automata-based concurrent computing o relativistic programming data-driven declarative contrast imperative o constraint + constraint logic concurrent constraint logic o dataflow + flow-based + cell-oriented spreadsheets + reactive o functional + functional logic + purely functional o logic + abductive logic + answer set + concurrent logic + functional logic + inductive logic dynamic end-user programming event-driven o service-oriented o time-driven expression-oriented feature-oriented function-level contrast value-level generic imperative contrast declarative o literate o procedural inductive programming language-oriented o natural language programming o discipline-specific o domain-specific o grammar-oriented + dialecting o intentional metaprogramming o automatic o reflective + attribute-oriented o homoiconic o template + policy-based non-structured contrast structured o array nondeterministic parallel computing o process-oriented point-free style o concatenative semantic structured contrast non-structured o block-structured o modular contrast monolithic o object-oriented + actor-based + class-based + concurrent + prototype-based + by separation concerns aspect-oriented role-oriented subject-oriented o recursive value-level contrast function-level probabilistic concept v t e class-based programming more commonly class-orientation style object-oriented programming oop which inheritance achieved by defining classes objects opposed objects themselves compare prototype-based programming most popular developed model oop class-based model opposed object-based model this model objects are entities that combine state ie data behavior ie procedures methods identity unique existence among all other objects structure behavior object are defined by class which definition blueprint all objects specific type object must be explicitly created based on class object thus created considered be instance that class object similar structure with addition method pointers member access control implicit data member which locates instances class ie actual objects that class class hierarchy essential for runtime inheritance features contents encapsulation inheritance critique class-based models example languages see also references encapsulation encapsulation prevents users from breaking invariants class which useful because allows implementation class objects be changed for aspects not exposed interface without impact user code definitions encapsulation focus on grouping packaging related information cohesion rather than security issues oop languages do not normally offer formal security restrictions internal object state using method access matter convention for interface design inheritance main article inheritance class-based programming inheritance done by defining new classes extensions existing classes existing class parent class new class child class if child class has only one parent class this known single inheritance while if child class can have more than one parent class this known multiple inheritance this organizes classes into hierarchy either tree if single inheritance lattice if multiple inheritance defining feature inheritance that both interface implementation are inherited if only interface inherited this known interface inheritance subtyping inheritance can also be done without classes prototype-based programming critique class-based models class-based languages be more precise typed languages where subclassing only way subtyping have been criticized for mixing up implementations interfaces—the essential principle object-oriented programming critics say one might create bag class that stores collection objects then extend make new class called set class where duplication objects eliminated now function that takes object bag class may expect that adding two objects increases size bag by two yet if one passes object set class then adding two objects may may not increase size bag by two problem arises precisely because subclassing implies subtyping even instances where principle subtyping known liskov substitution principle does not hold barbara liskov jeannette wing formulated principle succinctly paper follows subtype requirement let ϕ x {\displaystyle \phi x} be property provable about objects x type t then ϕ y {\displaystyle \phi y} should be true for objects y type s where s subtype t therefore normally one must distinguish subtyping subclassing most current object-oriented languages distinguish subtyping subclassing however some approaches design do not also another common example that person object created from child class cannot become object parent class because child class parent class inherit person class but class-based languages mostly do not allow change kind class object at runtime for class-based languages this restriction essential order preserve unified view class its users users should not need care whether one implementations method happens cause changes that break invariants class such changes can be made by destroying object constructing another its place polymorphism can be used preserve relevant interfaces even when such changes are done because objects are viewed black box abstractions accessed via object identity however usually value object references referring object changed which causes effects client code example languages see also categoryclass-based programming languages although simula introduced class abstraction canonical example class-based language smalltalk others include php c++ java c objective-c see also prototype-based programming contrast programming paradigms class computer programming references kiselyov oleg subtyping subclassing trouble with oop retrieved october ducasse stéphane set cannot be subtype bag retrieved october v t e types programming languages actor-based array aspect-oriented class-based concatenative concurrent data-structured dataflow declarative domain-specific dynamic esoteric event-driven extensible functional imperative logic macro metaprogramming+multi-paradigm object-based object-oriented pipeline procedural prototype-based reflective rule-based scripting synchronous templating assembly compiled interpreted machine low-level high-level very high-level first generation second generation third generation fourth generation fifth generation non-english-based visual retrieved from https//enwikipediaorg/w/indexphptitle=class-basedprogramming&oldid=739189287 categories object-oriented programming hidden categories articles needing additional references from february all articles needing additional references navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages eesti 日本語 中文 edit links this page was last modified on september at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 