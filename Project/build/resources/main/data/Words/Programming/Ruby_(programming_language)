ruby programming language from wikipedia free encyclopedia jump navigation search this article about programming language for other uses see ruby disambiguation not be confused with ruby on rails ruby paradigm multi-paradigm object-oriented imperative functional reflective designed by yukihiro matsumoto developer yukihiro matsumoto et al first appeared years ago stable release / november days ago typing discipline duck dynamic strong scope lexical sometimes dynamic implementation language c os cross-platform license ruby gplv2 2-clause bsd license filename extensions rb rbw website wwwruby-langorg major implementations ruby mri yarv rubinius maglev jruby macruby rubymotion hotruby ironruby mruby influenced by ada c++ clu dylan eiffel lua lisp perl python smalltalk influenced coffeescript clojure crystal d elixir falcon groovy ioke julia mirah nu potion reia rust swift ruby programming at wikibooks ruby dynamic reflective object-oriented general-purpose programming language was designed developed mid-1990s by yukihiro matz matsumoto japan according its creator ruby was influenced by perl smalltalk eiffel ada lisp supports multiple programming paradigms including functional object-oriented imperative also has dynamic type system automatic memory management contents history o early concept o name ruby o first publication o early releases o ruby o ruby o ruby o ruby o ruby o ruby table versions philosophy features semantics syntax differences from other languages interaction examples o strings o collections o control structures o blocks iterators o classes + open classes o exceptions o metaprogramming o more examples implementations o matz's ruby interpreter o alternate implementations o platform support repositories libraries see also references further reading external links history early concept ruby was conceived on february post ruby-talk mailing list ruby author yukihiro matsumoto describes some his early ideas about language i was talking with my colleague about possibility object-oriented scripting language i knew perl perl4 not perl5 but i didn't like really because had smell toy language still has object-oriented language seemed very promising i knew python then but i didn't like because i didn't think was true object-oriented language — oo features appeared be add-on language language maniac oo fan for years i really wanted genuine object-oriented easy-to-use scripting language i looked for but couldn't find one so i decided make matsumoto describes design ruby being like simple lisp language at its core with object system like that smalltalk blocks inspired by higher-order functions practical utility like that perl name ruby name ruby originated during online chat session between matsumoto keiju ishitsuka on february before any code had been written for language initially two names were proposed coral ruby matsumoto chose latter later e-mail ishitsuka matsumoto later noted factor choosing name ruby – was birthstone one his colleagues first publication first public release ruby was announced on japanese domestic newsgroups on december subsequently three more versions ruby were released two days release coincided with launch japanese-language ruby-list mailing list which was first mailing list for new language already present at this stage development were many features familiar later releases ruby including object-oriented design classes with inheritance mixins iterators closures exception handling garbage collection early releases following release ruby several stable versions ruby were released following years ruby december ruby december ruby august ruby september first article about ruby was published on web same year matsumoto was hired by netlabjp work on ruby full-time developer ruby application archive was launched by matsumoto along with simple english-language homepage for ruby first english language mailing list ruby-talk began which signaled growing interest language outside japan this same year matsumoto keiju ishitsuka wrote first book on ruby object-oriented scripting language ruby オブジェクト指向スクリプト言語 ruby which was published japan october would be followed early 2000s by around books on ruby published japanese by ruby was more popular than python japan september first english language book programming ruby was printed which was later freely released public further widening adoption ruby amongst english speakers early english-language ruby-talk mailing list was receiving more messages than japanese-language ruby-list demonstrating ruby's increasing popularity english-speaking world ruby ruby was initially released august was stable for long time was retired june although deprecated there still code based on ruby only partially compatible with ruby ruby has been subject several industry standards language specifications for ruby were developed by open standards promotion center information-technology promotion agency japanese government agency for submission japanese industrial standards committee jisc then international organization for standardization iso was accepted japanese industrial standard jis x international standard iso/iec around interest ruby language surged tandem with ruby on rails web framework written ruby rails frequently credited with increasing awareness ruby ruby ruby was released december effective with ruby released october ruby switched from being dual-licensed under ruby license gpl being dual-licensed under ruby license two-clause bsd license adoption was slowed by changes from that required many popular third party gems be rewritten ruby introduces many significant changes over series examples block local variables variables that are local block which they are declared additional lambda syntax f = ->ab { puts + b } per-string character encodings are supported new socket api ipv6 support requirerelative import security ruby has been obsolete since february will no longer receive bug security fixes users are advised upgrade more recent version ruby ruby added several new features including method keyword arguments new method moduleprepend for extending class new literal for creating array symbols new api for lazy evaluation enumerables new convention using toh convert objects hashes ruby intended be fully backward compatible with ruby official release on february there were only five known minor incompatibilities has been obsolete since february will no longer receive bug security fixes users are advised upgrade more recent version ruby ruby was released on christmas day release includes speed-ups bugfixes library updates starting with ruby's versioning policy more like semantic versioning although similar ruby's versioning policy not compatible with semantic versioning ruby semantic versioning major increased when incompatible change which can’t be released minor reserved for special events major increased when you make incompatible api changes minor increased every christmas may be api incompatible minor increased when you add functionality backwards-compatible manner teeny security bug fix which maintains api compatibility may be increased more than such will be released every 2–3 months patch increased when you make backwards-compatible bug fixes patch number commits since last minor release will be reset at when releasing minor - semantic versioning also provides additional labels for pre-release build metadata are available extensions majorminorpatch format not available at ruby ruby ruby was released on christmas day release includes speed-ups bugfixes library updates removes some deprecated apis most notably ruby introduces changes memory handling – incremental garbage collector support for garbage collection symbols option compile directly against jemalloc also contains experimental support for using vfork2 with system spawn added support for unicode specification features that were made obsolete removed include callcc dl library digesthmac lib/rationalrb lib/complexrb gserver loggerapplication well various c api functions powerpc64 performance since version ruby mri performance on powerpc64 was improved ruby ruby was released on christmas day few notable changes include ability mark all strings literals frozen by default with consequently large performance increase string operations hash comparison allow direct checking key/value pairs instead just keys new safe navigation operator & that can ease nil handling eg instead if obj && objfoo && objfoobar we can use if obj&foo&bar didyoumean gem now bundled by default required on startup automatically suggest similar name matches on nameerror nomethoderror hashdig arraydig easily extract deeply nested values eg given profile = { social { wikipedia { name 'foo baz' } } } value foo baz can now be retrieved by profiledigsocial wikipedia name grepvregexp which will match all negative examples given regular expression addition other new features branch also includes many performance improvements updates bugfixes including changes proccall socket io use exception keywords threadname handling default passive netftp connections rake being removed from stdlib table versions version latest teeny version initial release date end support phase end security maintenance phase old version no longer supported 187-p375 2012-06 old version no longer supported 193-p551 old version no longer supported 200-p648 older version yet still supported older version yet still supported tba tba current stable version tba tba future release future release tba legend old version older version still supported latest version latest preview version future release philosophy yukihiro matsumoto creator ruby matsumoto has said that ruby designed for programmer productivity fun following principles good user interface design at google tech talk matsumoto further stated i hope see ruby help every programmer world be productive enjoy programming be happy that primary purpose ruby language he stresses that systems design needs emphasize human rather than computer needs often people especially computer engineers focus on machines they think by doing this machine will run fast by doing this machine will run more effectively by doing this machine will something something something they are focusing on machines but fact we need focus on humans on how humans care about doing programming operating application machines we are masters they are slaves ruby said follow principle least astonishment pola meaning that language should behave such way minimize confusion for experienced users matsumoto has said his primary design goal was make language that he himself enjoyed using by minimizing programmer work possible confusion he has said that he had not applied principle least astonishment design ruby but nevertheless phrase has come be closely associated with ruby programming language phrase has itself been source surprise novice users may take mean that ruby's behaviors try closely match behaviors familiar from other languages may discussion on newsgroup complangruby matsumoto attempted distance ruby from pola explaining that because any design choice will be surprising someone he uses personal standard evaluating surprise if that personal standard remains consistent there would be few surprises for those familiar with standard matsumoto defined this way interview everyone has individual background someone may come from python someone else may come from perl they may be surprised by different aspects language then they come up me say 'i was surprised by this feature language so ruby violates principle least surprise' wait wait principle least surprise not for you only principle least surprise means principle least my surprise means principle least surprise after you learn ruby very well for example i was c++ programmer before i started designing ruby i programmed c++ exclusively for two three years after two years c++ programming still surprises me features thoroughly object-oriented with inheritance mixins metaclasses dynamic typing duck typing everything expression even statements everything executed imperatively even declarations succinct flexible syntax that minimizes syntactic noise serves foundation for domain-specific languages dynamic reflection alteration objects facilitate metaprogramming lexical closures iterators generators with unique block syntax literal notation for arrays hashes regular expressions symbols embedding code strings interpolation default arguments four levels variable scope global class instance local denoted by sigils lack thereof garbage collection first-class continuations strict boolean coercion rules everything true except false nil exception handling operator overloading built-in support for rational numbers complex numbers arbitrary-precision arithmetic custom dispatch behavior through methodmissing constmissing native threads cooperative fibers fibers are 19/yarv feature initial support for unicode multiple character encodings no icu support native plug-in api c interactive ruby shell repl centralized package management through rubygems implemented on all major platforms large standard library including modules for yaml json xml cgi openssl http ftp rss curses zlib tk semantics ruby object-oriented every value object including classes instances types that many other languages designate primitives such integers booleans null variables always hold references objects every function method methods are always called on object methods defined at top level scope become methods object class since this class ancestor every other class such methods can be called on any object they are also visible all scopes effectively serving global procedures ruby supports inheritance with dynamic dispatch mixins singleton methods belonging defined for single instance rather than being defined on class though ruby does not support multiple inheritance classes can import modules mixins ruby has been described multi-paradigm programming language allows procedural programming defining functions/variables outside classes makes them part root 'self' object with object orientation everything object functional programming has anonymous functions closures continuations statements all have values functions return last evaluation has support for introspection reflection metaprogramming well support for interpreter-based threads ruby features dynamic typing supports parametric polymorphism according ruby faq syntax similar perl semantics are similar smalltalk but differs greatly from python syntax syntax ruby broadly similar that perl python class method definitions are signaled by keywords whereas code blocks can be both defined by keywords braces contrast perl variables are not obligatorily prefixed with sigil when used sigil changes semantics scope variable for practical purposes there no distinction between expressions statements line breaks are significant taken end statement semicolon may be equivalently used unlike python indentation not significant one differences ruby compared python perl that ruby keeps all its instance variables completely private class only exposes them through accessor methods attrwriter attrreader etc unlike getter setter methods other languages like c++ java accessor methods ruby can be created with single line code via metaprogramming however accessor methods can also be created traditional fashion c++ java invocation these methods does not require use parentheses trivial change instance variable into full function without modifying single line calling code having do any refactoring achieving similar functionality c vbnet property members python's property descriptors are similar but come with tradeoff development process if one begins python by using publicly exposed instance variable later changes implementation use private instance variable exposed through property descriptor code internal class may need be adjusted use private variable rather than public property ruby’s design forces all instance variables be private but also provides simple way declare set get methods this keeping with idea that ruby one never directly accesses internal members class from outside class rather one passes message class receives response see examples section below for samples code demonstrating ruby syntax differences from other languages this section does not cite any sources please help improve this section by adding citations reliable sources unsourced material may be challenged removed july learn how when remove this template message some features that differ notably from languages such c perl language syntax sensitive capitalization identifiers all cases treating capitalized variables constants class module names are constants refer objects derived from class module sigils $ @ do not indicate variable data type perl but rather function scope resolution operators floating point literals must have digits on both sides decimal point neither nor are valid floating point literals but are ruby integer literals are objects that can have methods apply them so requiring digit after decimal point helps clarify whether should be parsed analogously 1tof exponential-format floating literal reason for requiring digit before decimal point less clear might relate either method invocation again perhaps operators for example fragment boolean non-boolean datatypes are permitted boolean contexts unlike eg smalltalk java but their mapping boolean values differs markedly from some other languages empty eg empty list string associative array all evaluate true thus changing meaning some common idioms related similar languages such lisp perl python consequence this rule that ruby methods by convention — for example regular-expression searches — return numbers strings lists other non-false values on success but nil on failure versions prior use plain integers represent single characters much like c this may cause surprises when slicing strings abc yields ascii code first character string obtain use abc substring length abcchr notation statement until expression does not run statement if expression already true behavior like perl but unlike other languages' equivalent statements eg do { statement } while expression c/c++/ this because statement until expression actually syntactic sugar over until expression statement end equivalent which c/c++ while expression { statement } just statement if expression equivalent if expression { statement } however notation begin statement end until expression ruby will fact run statement once even if expression already true acting similarly do-while other languages matsumoto has expressed desire remove special behavior begin statement end until expression but still exists ruby because constants are references objects changing what constant refers generates warning but modifying object itself does not for example greeting object usual conjunctive disjunctive operators for conditional expressions have same precedence so does not bind tighter than ruby behaviour similar languages such apl ada vhdl mathematica zkl others however ruby also has c-like operators || && that work c-like languages list so-called gotchas may be found hal fulton's book ruby way 2nd ed isbn 0-672-32884-4 section similar list 1st edition pertained older version ruby version some problems which have been fixed meantime for example retry now works with while until for well with iterators interaction see also interactive ruby shell ruby official distribution also includes irb interactive command-line interpreter that can be used test code quickly following code fragment represents sample session using irb $ irb irbmain0010> puts 'hello world' hello world => nil irbmain0020> 1+2 => examples this section does not cite any sources please help improve this section by adding citations reliable sources unsourced material may be challenged removed january learn how when remove this template message following examples can be run ruby shell such interactive ruby shell saved file run from command line by typing ruby classic hello world example puts 'hello world' some basic ruby code everything including literal object so this works -199abs => 'ice nice'length => 'ruby cool'index'u' => nice day isn't itdowncasesplit''uniqsortjoin => 'acdeinsty input print 'please type name >' name = getschomp puts hello {name} conversions puts 'give me number' number = getschomp puts numbertoi outputnumber = numbertoi + puts outputnumbertos + ' bigger number' strings there are variety ways define strings ruby following assignments are equivalent = \nthis double-quoted string\n = %q{\nthis double-quoted string\n} = %{\nthis double-quoted string\n} = %/\nthis double-quoted string\n/ = pi following assignments are equivalent produce raw strings = 'this single-quoted string' = %q{this single-quoted string} collections constructing using array = ] => a2 => areverse => 'hi' 1] aflattenuniq => constructing using associative array ruby called hash hash = hashnew equivalent hash = {} hash = { water => 'wet' fire => 'hot' } makes previous line redundant we are now assigning hash new separate hash object puts hash prints hot hasheachpair do |key value| hasheach do |key value| puts {key} {value} end returns {water=>wet fire=>hot} prints water wet fire hot hashdelete water deletes pair water => 'wet' returns wet hashdeleteif {|keyvalue| value == 'hot'} deletes pair fire => 'hot' returns {} control structures if statement generate random number print whether it's even odd if rand100 % == puts it's even else puts it's odd end blocks iterators two syntaxes for creating code block { puts 'hello world' } note braces do puts 'hello world' end code block can be passed method optional block argument many built-in methods have such arguments fileopen'filetxt' 'w' do |file| 'w' denotes write mode fileputs 'wrote some text' end file automatically closed here filereadlines'filetxt'each do |line| puts line end => wrote some text parameter-passing block be closure object instance variable denoted with '@' remember block def remember&ablock @block = ablock end invoke preceding method giving block that takes name remember {|name| puts hello {name}} call closure note that this happens not close over any free variables @blockcall'jon' => hello jon creating anonymous function proc {|arg| puts arg} procnew {|arg| puts arg} lambda {|arg| puts arg} ->arg {puts arg} introduced ruby returning closures from method def createsetandgetinitialvalue=0 note default value closurevalue = initialvalue end setter getter = createsetandget returns two values settercall21 gettercall => parameter variables can also be used binding for closure so preceding can be rewritten def createsetandgetclosurevalue=0 end yielding flow program control block that was provided at calling time def usehello yield hello end invoke preceding method passing block usehello {|string| puts string} => 'hello' iterating over enumerations arrays using blocks array = arrayeach {|item| puts item } prints 'hi' arrayeachindex {|index| puts {index} {array} } prints 'hi' following uses ab range 36each {|num| puts num } prints following uses ab range 36each {|num| puts num } prints method such inject can accept both parameter block inject method iterates over each member list performing some function on while retaining aggregate this analogous foldl function functional programming languages for example inject10 {|sum element| sum + element} => on first pass block receives argument inject sum first element array element this returns which then becomes sum on next pass added get which then added on third pass finally return using enumeration block square numbers using range 110collect {|x| xx} => invoke method on each item map synonym for collect 15map&tof => classes following code defines class named person addition initialize usual constructor create new objects has two methods one override comparison operator so arraysort can sort by age other override tos method so kernelputs can format its output here attrreader example metaprogramming ruby attraccessor defines getter setter methods instance variables but attrreader only getter methods last evaluated statement method its return value allowing omission explicit return statement class person attrreader name age def initializename age @name @age = name age end def person comparison operator for sorting @age personage end def tos {@name} {@age} end end group = puts groupsortreverse preceding code prints three names reverse age order bob ash chris person constant reference class object open classes ruby classes are never closed methods can always be added existing class this applies all classes including standard built-in classes all that needed do open up class definition for existing class new contents specified will be added existing contents simple example adding new method standard library's time class re-open ruby's time class class time def yesterday self - end end today = timenow => yesterday = todayyesterday => adding methods previously defined classes often called monkey-patching if performed recklessly practice can lead both behavior collisions with subsequent unexpected results code scalability problems exceptions exception raised with raise call raise optional message can be added exception raise this message exceptions can also be specified by programmer raise argumenterror illegal arguments alternatively exception instance can be passed raise method raise argumenterrornewillegal arguments this last construct useful when raising instance custom exception class featuring constructor that takes more than one argument class parseerror e handling possibly involving e such puts etos end alternatively most recent exception stored magic global $ several exceptions can also be caught begin do something rescue runtimeerror timeouterror => e handling possibly involving e end metaprogramming this section needs additional citations for verification please help improve this article by adding citations reliable sources unsourced material may be challenged removed january learn how when remove this template message ruby code can programmatically modify at runtime aspects its own structure that would be fixed more rigid languages such class method definitions this sort metaprogramming can be used write more concise code effectively extend language for example following ruby code generates new methods for built-in string class based on list colors methods wrap contents string with html tag styled with respective color colors = { black red f00 green 0f0 yellow ff0 blue magenta f0f cyan 0ff white fff } class string colorseach do |colorcode| definemethod in{color} do {self} end end end generated methods could then be used like this hello worldinblue => hello world implement equivalent many other languages programmer would have write each method inblack inred ingreen etc separately some other possible uses for ruby metaprogramming include intercepting modifying method calls implementing new inheritance models dynamically generating classes from parameters automatic object serialization interactive help debugging more examples more sample ruby code available algorithms following article exponentiating by squaring implementations see also ruby mri § operating systems matz's ruby interpreter official ruby interpreter often referred matz's ruby interpreter mri this implementation written c uses its own ruby-specific virtual machine standardized retired ruby implementation was written c single-pass interpreted language starting with ruby continuing with ruby 2x above official ruby interpreter has been yarv yet another ruby vm this implementation has superseded slower virtual machine used previous releases mri alternate implementations there are number alternative implementations ruby including jruby rubinius maglev ironruby macruby its ios counterpart rubymotion mruby hotruby topaz opal each takes different approach with ironruby jruby macruby rubinius providing just-in-time compilation macruby mruby also providing ahead-of-time compilation ruby has two major alternate implementations jruby java implementation that runs on java virtual machine jruby currently targets ruby rubinius c++ bytecode virtual machine that uses llvm compile machine code at runtime bytecode compiler most core classes are written pure ruby rubinius currently targets ruby other ruby implementations include maglev smalltalk implementation that runs on gemtalk systems' gemstone/s vm mruby implementation designed be embedded into c code similar vein lua currently being developed by yukihiro matsumoto others opal web-based interpreter that compiles ruby javascript rgss ruby game scripting system proprietary implementation that used by rpg maker series software for game design modification rpg maker engine transpiler partial from ruby julia julializer available can be used for large speedup over eg ruby jruby implementations may only be useful for numerical code other now defunct ruby implementations were macruby os x implementation on objective-c runtime ironruby implementation on net framework cardinal implementation for parrot virtual machine ruby enterprise edition often shortened ree implementation optimized handle large-scale ruby on rails projects maturity ruby implementations tends be measured by their ability run ruby on rails rails framework because complex implement uses many ruby-specific features point when particular implementation achieves this goal called rails singularity reference implementation mri jruby rubinius are all able run rails unmodified production environment platform support matsumoto originally did ruby development on 43bsd-based sony news-os 3x but later migrated his work sunos 4x finally linux by ruby was known work across many different operating systems including news-os sunos aix svr4 solaris nec up-ux nextstep bsd linux mac os dos windows beos modern ruby versions implementations are available on many operating systems such linux bsd solaris aix os x windows windows phone windows ce symbian os beos ibm i repositories libraries rubygems ruby's package manager ruby package called gem can easily be installed via command line most gems are libraries though few exist that are applications such ides there are over ruby gems hosted on rubygemsorg many new existing ruby libraries are hosted on github service that offers version control repository hosting for git ruby application archive which hosted applications documentation libraries for ruby programming was maintained until when its function was transferred rubygems see also free software portal computer programming portal comparison programming languages why's poignant guide ruby — online ruby textbook graphic novel format metasploit project — world's largest ruby project with over lines code xruby references ruby released ruby programming language retrieved contents /trunk/copying retrieved may contents /trunk/gpl retrieved may contents /trunk/bsdl retrieved may b c cooper peter beginning ruby from novice professional beginning from novice professional 2nd ed berkeley apress p isbn 1-4302-2363-4 lesser extent python lisp eiffel ada c++ have also influenced ruby b c d e f bini ola practical jruby on rails web projects bringing ruby on rails java berkeley apress p isbn 1-59059-881-4 draws primarily on features from perl smalltalk python lisp dylan clu bini ola ioke iokeorg retrieved inspired by io smalltalk lisp ruby introduction — julia language documentation retrieved november burks tim about nu™ programming nu™ neon design technology inc retrieved lattner chris chris lattner's homepage chris lattner retrieved swift language product tireless effort from team language experts documentation gurus compiler optimization ninjas incredibly important internal dogfooding group who provided feedback help refine battle-test ideas course also greatly benefited from experiences hard-won by many other languages field drawing ideas from objective-c rust haskell ruby python c clu far too many others list about ruby retrieved march shugo maeda december ruby language faq retrieved march yukihiro matsumoto february ruby-talk re ruby's lisp features retrieved march b c d e f history ruby decisive moment language name ruby re ruby — e-mail from hiroshi sugihara ruby-talk ruby language faq – why name 'ruby' ruby-docorg retrieved april yukihiro matsumoto june re name ruby ruby-talk mailing list retrieved april more archeolinguistics unearthing proto-ruby retrieved may re history ruby retrieved may tutorial - ruby's features retrieved may interview with creator ruby yukihiro matsumoto october programming ruby forward retrieved march b we retire ruby retrieved may ipa 独立行政法人 情報処理推進機構：プレス発表　プログラム言語rubyのjis規格（jis x 3017）制定について retrieved may ipa 独立行政法人 情報処理推進機構：プレス発表　プログラム言語ruby、国際規格として承認 retrieved may web development ruby on rails devarticlescom retrieved on ruby p0 released ruby-langorg october retrieved february v1930/news ruby subversion source repository ruby-langorg september retrieved february ruby what expect slideshowrubyforgeorg retrieved on support for ruby has ended retrieved may endoh yusuke ruby 200-p0 released ruby-langorg retrieved on endoh yusuke ruby 200-p0 released ruby-langorg retrieved on ruby released december retrieved december semantic versioning starting with ruby december retrieved december ruby released december retrieved january ruby/news at v220 · ruby/ruby · github github retrieved may gustavo frederico temple pedrosa vitor de lima leonardo bianconi ruby released retrieved july cs1 maint multiple names authors list link gustavo frederico temple pedrosa vitor de lima leonardo bianconi v221 changelog retrieved july cs1 maint multiple names authors list link gustavo frederico temple pedrosa vitor de lima leonardo bianconi specifying non volatile registers for increase performance ppc64 retrieved july cs1 maint multiple names authors list link gustavo frederico temple pedrosa vitor de lima leonardo bianconi specifying macro for increase performance ppc64 retrieved july cs1 maint multiple names authors list link ruby changes features – frozen string literals ruby/news at v230 - ruby/ruby - github github retrieved december patch time securing ruby ruby-180 released plans for eol for ruby ruby 193-p551 released ruby released support for ruby version will end on february support for ruby has ended b c ruby 200-p648 released ruby 200-p0 released ruby released ruby released support plans for ruby ruby ruby released release engineering ruby released ruby released ruby released ruby released what’s coming ruby rails ruby programming language retrieved may google tech talks – ruby on youtube b c bill venners philosophy ruby retrieved may ruby weekly news 23rd – 29th may bruce stewart november interview with creator ruby - o'reilly media retrieved may bill venners dynamic productivity with ruby retrieved may language workbenches killer-app for domain specific languages martinfowlercom retrieved may ruby – add class methods at runtime bill venners blocks closures ruby retrieved may feature consider icu library for improving expanding unicode support - ruby trunk - ruby issue tracking system retrieved may britt james ruby standard library documentation retrieved green threads ruby language faq how does ruby stack up against retrieved may ruby's syntax statement just special case expression that cannot appear argument eg multiple assignment statement can not be part expression unless grouped within parentheses re semenatics if/unless/while statement modifiers bladenagaokautacjp retrieved on peter cooper why what how rubinius 10's release maya stodte february ibm developerworks – ruby new language archived from original on august retrieved march yukihiro matsumoto august lang-ruby-general re question about ruby initial development retrieved march yukihiro matsumoto january ruby-talk re hah check these errors retrieved march iron ruby on windows phone ruby toolbox retrieved we retire raaruby-langorg retrieved further reading metz sandi september practical object-oriented design ruby first ed addison-wesley p isbn 0-321-72133-0 mcanally jeremy arkin assaf march ruby practice first ed manning publications p isbn 1-933988-47-9 thomas dave fowler chad hunt andy april programming ruby pragmatic programmers' guide third ed pragmatic bookshelf p isbn 1-934356-08-5 black david june well-grounded rubyist first ed manning publications p isbn 1-933988-65-7 flanagan david matsumoto yukihiro january ruby programming language first ed o'reilly media p isbn 0-596-51617-7 baird kevin june ruby by example concepts code first ed no starch press p isbn 1-59327-148-4 fitzgerald michael may learning ruby first ed o'reilly media p isbn 0-596-52986-4 cooper peter march beginning ruby from novice professional first ed apress p isbn 1-59059-766-4 fulton hal november ruby way second ed addison-wesley p isbn 0-596-52369-6 carlson lucas richardson leonard july ruby cookbook first ed o'reilly media p isbn 0-596-52369-6 external links wikiquote has quotations related ruby programming language wikimedia commons has media related ruby programming language wikibooks has book on topic ruby programming wikiversity has learning materials about topicruby official website official ruby documentation ruby user guide — by yukihiro matsumoto creator ruby community-driven ruby coding style guide ruby from other languages ruby forum — gateway ruby-talk mailing list try ruby — web-based ruby repl ruby draft specification september ruby at dmoz v t e ruby programming language implementations active ruby mri / yarv mruby jruby rubinius maglev rubymotion discontinued macruby ironruby xruby rubyjs hotruby ide komodo netbeans radrails rubymine applications capistrano chef hackety hack homebrew interactive ruby shell pry puppet rake redmine rspec rubygems rvm libraries frameworks adhearsion camping eruby rhtml merb padrino rubycocoa ruby on rails shoes sinatra qtruby server software modruby mongrel phusion passenger modrails/modrack rack webrick people yukihiro matsumoto david heinemeier hansson why lucky stiff other document format why's poignant guide ruby ruby central rubykaigi rubyforge ruby license category commons v t e programming languages comparison timeline history assembly basic c c++ c cobol fortran go haskell java javascript js lisp lua objective-c pascal perl php python ruby shell smalltalk swift visual basic net vbnet more category comparison lists o alphabetical o categorical o generational o non-english-based v t e free open-source software general alternative terms for free software comparison open-source closed-source software comparison source code hosting facilities free software free software project directories gratis versus libre long-term support open-source software open-source software development outline software packages audio bioinformatics codecs collaboration configuration management device drivers o graphics o wireless geophysics health mathematics operating systems programming languages routing statistics television video games web applications o content management systems o e-commerce word processors android apps ios apps commercial trademarked formerly proprietary community free software movement history open-source software movement organizations events licenses apache apsl artistic beerware boost bsd cc0 cddl epl gnu gpl gnu lgpl isc mit mpl ms-pl/rl wtfpl zlib license types standards comparison free open-source software licenses contributor license agreement copyfree copyleft debian free software guidelines definition free cultural works free license free software definition open source definition open-source license permissive free software licence public domain viral license challenges binary blob digital rights management hardware restrictions license proliferation mozilla software rebranding proprietary software sco/linux controversies secure boot software patents software security trusted computing related topics cathedral bazaar forking microsoft open specification promise revolution os book category commons portal v t e iso standards by standard number list iso standards / iso romanizations / iec standards 1–9999 o o o o o o o o o o o o o o o o o o o 1073-1 o o o 8820-5 o o o o o o o o o -8-i o o o o o o o o 9000/9001 10000–19999 10118-3 o o o o o tr 12234-2 o o 13406-2 o o o o o o o o o o o wip 16612-2 ts 19775-1 19794-5 20000+ series 29199-2 o o o category retrieved from https//enwikipediaorg/w/indexphptitle=rubyprogramminglanguage&oldid=750906697 categories ruby programming language articles with example ruby code class-based programming languages dynamically typed programming languages free software programmed c iso standards object-oriented programming languages programming languages created scripting languages software using bsd license text-oriented programming languages hidden categories cs1 maint multiple names authors list pages using deprecated image syntax articles needing additional references from july all articles needing additional references articles needing additional references from january articles containing potentially dated statements from all articles containing potentially dated statements commons category with local link same on wikidata official website different wikidata wikipedia articles with dmoz links pages using isbn magic links navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version other projects wikimedia commons wikibooks wikiquote wikiversity languages العربية azərbaycanca تۆرکجه বাংলা беларуская български bosanski català čeština dansk deutsch eesti ελληνικά español esperanto euskara فارسی français galego 한국어 hrvatski bahasa indonesia interlingua italiano עברית ქართული lietuvių magyar മലയാളം मराठी bahasa melayu မြန်မာဘာသာ nederlands 日本語 norsk bokmål norsk nynorsk ଓଡ଼ିଆ polski português română русский shqip simple english slovenčina کوردیی ناوەندی српски / srpski srpskohrvatski / српскохрватски suomi svenska தமிழ் татарча/tatarça తెలుగు ไทย тоҷикӣ türkçe українська اردو tiếng việt 粵語 žemaitėška 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 