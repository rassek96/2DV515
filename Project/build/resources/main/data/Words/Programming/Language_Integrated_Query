language integrated query from wikipedia free encyclopedia jump navigation search this article about software for las vegas entertainment district see linq language integrated query designed by microsoft corporation developer microsoft corporation typing discipline strongly typed major implementations net languages c f vbnet influenced by sql haskell language integrated query linq pronounced link microsoft net framework component that adds native data querying capabilities net languages although ports exist for php phplinq javascript linqjs typescript linqts actionscript actionlinq - but none these ports are strictly equivalent linq c for example where part language not external library where often addresses wider range needs linq extends language by addition query expressions which are akin sql statements can be used conveniently extract process data from arrays enumerable classes xml documents relational databases third-party data sources other uses which utilize query expressions general framework for readably composing arbitrary computations include construction event handlers monadic parsers linq also defines set method names called standard query operators standard sequence operators along with translation rules used by compiler translate fluent-style query expressions into expressions using these method names lambda expressions anonymous types many concepts that linq has introduced were originally tested microsoft's cω research project linq was released major part net framework on november contents architecture linq net framework o standard query operators o language extensions o linq providers + linq objects + linq xml formerly called xlinq + linq sql formerly called dlinq + linq datasets performance plinq see also references external links architecture linq net framework standard query operators what follows descriptions operators are based on application working with collections many operators take other functions arguments these functions may be supplied form named method anonymous function set query operators defined by linq exposed user standard query operator sqo api query operators supported by api are select further information map higher-order function select operator performs projection on collection select interesting aspects elements user supplies arbitrary function form named lambda expression which projects data members function passed operator delegate where further information filter higher-order function where operator allows definition set predicate rules that are evaluated for each object collection while objects that do not match rule are filtered away predicate supplied operator delegate selectmany further information bind higher-order function for user-provided mapping from collection elements collections semantically two steps are performed first every element mapped its corresponding collection second result first step flattened by one level note select where are both implementable terms selectmany long singleton empty collections are available translation rules mentioned above still make mandatory for linq provider provide other two operators sum / min / max / average these operators optionally take function that retrieves certain numeric value from each element collection uses find sum minimum maximum average values all elements collection respectively overloaded versions take no function act if identity given lambda aggregate further information fold higher-order function generalized sum / min / max this operator takes function that specifies how two values are combined form intermediate final result optionally starting value can be supplied enabling result type aggregation be arbitrary furthermore finalization function taking aggregation result yet another value can be supplied join / groupjoin join operator performs inner join on two collections based on matching keys for objects each collection takes two functions delegates one for each collection that executes on each object collection extract key from object also takes another delegate which user specifies which data elements from two matched elements should be used create resultant object groupjoin operator performs group join like select operator results join are instantiations different class with all data members both types source objects subset them take / takewhile take operator selects first n objects from collection while takewhile operator which takes predicate selects those objects that match predicate stopping at first object that doesn't match skip / skipwhile skip skipwhile operators are complements take takewhile - they skip first n objects from collection those objects that match predicate for case skipwhile oftype oftype operator used select elements certain type concat concat operator concatenates two collections orderby / thenby orderby operator used specify primary sort ordering elements collection according some key default ordering ascending order reverse order orderbydescending operator be used thenby thenbydescending specifies subsequent ordering elements function extract key value from object specified by user delegate reverse reverse operator reverses collection groupby groupby operator takes function that extracts key value returns collection igrouping objects for each distinct key value igrouping objects can then be used enumerate all objects for particular key value distinct distinct operator removes duplicate instances object from collection overload operator takes equality comparer object which defines criteria for distinctness union / intersect / except these operators are used perform union intersection difference operation on two sequences respectively each has overload which takes equality comparer object which defines criteria for element equality sequenceequal sequenceequal operator determines whether all elements two collections are equal same order first / firstordefault / last / lastordefault these operators take predicate first operator returns first element for which predicate yields true if nothing matches throws exception firstordefault operator like first operator except that returns default value for element type usually null reference case nothing matches predicate last operator retrieves last element match predicate throws exception case nothing matches lastordefault returns default element value if nothing matches single single operator takes predicate returns element that matches predicate exception thrown if none more than one element match predicate singleordefault singleordefault operator takes predicate return element that matches predicate if more than one element matches predicate exception thrown if no element matches predicate default value returned elementat elementat operator retrieves element at given index collection any / all any operator checks if there are any elements collection matching predicate does not select element but returns true if at least one element matched invocation any without predicate returns true if collection non-empty all operator returns true if all elements match predicate contains contains operator checks if collection contains given element count count operator counts number elements given collection overload taking predicate counts number elements matching predicate standard query operator api also specifies certain operators that convert collection into another type asenumerable statically types collection ienumerable asqueryable statically types collection iqueryable toarray creates array t from collection tolist creates list from collection todictionary creates dictionary from collection indexed by key k user supplied projection function extracts key from each element tolookup creates lookup from collection indexed by key k user supplied projection function extracts key from each element cast converts non-generic ienumerable collection one ienumerable by casting each element type t alternately converts generic ienumerable another generic ienumerable by casting each element from type t type r throws exception any element cannot be cast indicated type oftype converts non-generic ienumerable collection one ienumerable alternately converts generic ienumerable another generic ienumerable by attempting cast each element from type t type r both cases only subset elements successfully cast target type are included no exceptions are thrown language extensions while linq primarily implemented library for net framework also defines optional language extensions that make queries first-class language construct provide syntactic sugar for writing queries these language extensions have initially been implemented c vb f oxygene with other languages like nemerle having announced preliminary support language extensions include query syntax language free choose query syntax that will recognize natively these language keywords must be translated by compiler appropriate linq method calls implicitly typed variables this enhancement allows variables be declared without specifying their types languages c oxygene declare them with var keyword vb90 dim keyword without type declaration accomplishes same such objects are still strongly typed for these objects compiler infers types variables via type inference which allows results queries be specified defined without declaring type intermediate variables anonymous types anonymous types allow classes that contain only data-member declarations be inferred by compiler this useful for select join operators whose result types may differ from types original objects compiler uses type inference determine fields contained classes generates accessors mutators for these fields object initializer object initializers allow object be created initialized single scope required for select join operators lambda expressions lambda expressions allow predicates other projection functions be written inline with concise syntax support full lexical closure they are captured into parameters delegates expression trees depending on query provider for example query select all objects collection with someproperty less than var results = from c somecollection where csomeproperty csomeproperty new {csomeproperty cotherproperty} resultsforeachx => {consolewritelinextostring} linq providers c30 specification defines query expression pattern along with translation rules from linq expression expression subset c without linq expressions translation thus defined actually un-typed which addition lambda expressions being interpretable either delegates expression trees allows for great degree flexibility for libraries wishing expose parts their interface linq expression clauses for example linq objects works on ienumerables with delegates whereas linq sql makes use expression trees expression trees are at core linq extensibility mechanism by which linq can be adapted for many data sources expression trees are handed over linq providers which are data source-specific implementations that adapt linq queries be used with data source if they choose so linq providers analyze expression trees contained query order generate essential pieces needed for execution query this can be sql fragments any other completely different representation code further manipulatable data linq comes with linq providers for in-memory object collections microsoft sql server databases adonet datasets xml documents these different providers define different flavors linq linq objects linq objects provider used for in-memory collections using local query execution engine linq code generated by this provider refers implementation standard query operators defined on sequence pattern allows ienumerable collections be queried locally current implementation linq objects perform interface implementation checks allow for fast membership tests counts indexed lookup operations when they are supported by runtime type ienumerable linq xml formerly called xlinq linq xml provider converts xml document collection xelement objects which are then queried against using local execution engine that provided part implementation standard query operator linq sql formerly called dlinq linq sql provider allows linq be used query microsoft sql server databases including sql server compact databases since sql server data may reside on remote server because sql server has its own query engine linq sql does not use query engine linq instead converts linq query sql query that then sent sql server for processing however since sql server stores data relational data linq works with data encapsulated objects two representations must be mapped one another for this reason linq sql also defines mapping framework mapping done by defining classes that correspond tables database containing all subset columns table data members correspondence along with other relational model attributes such primary keys are specified using linq sql-defined attributes for example public class customer { public int custid public string custname } this class definition maps table named customers two data members correspond two columns classes must be defined before linq sql can be used visual studio includes mapping designer that can be used create mapping between data schemas object well relational domain can automatically create corresponding classes from database schema well allow manual editing create different view by using only subset tables columns table mapping implemented by datacontext that takes connection string server can be used generate table where t type which database table will be mapped table encapsulates data table implements iqueryable interface so that expression tree created which linq sql provider handles converts query into t-sql retrieves result set from database server since processing happens at database server local methods which are not defined part lambda expressions representing predicates cannot be used however can use stored procedures on server any changes result set are tracked can be submitted back database server linq datasets linq sql provider works only with microsoft sql server databases support any generic database linq also includes linq datasets which uses adonet handle communication with database once data adonet datasets linq datasets execute queries against these datasets performance users may struggle with subtleties linq objects features syntax sub-optimal linq implementation patterns can lead serious degradation performance linq xml linq sql performance compared adonet depends on use case plinq version net framework includes plinq parallel linq parallel execution engine for linq queries defines parallelquery class any implementation ienumerable interface can take advantage plinq engine by calling asparallelthis ienumerable extension method defined by parallelenumerable class systemlinq namespace net framework plinq engine can execute parts query concurrently on multiple threads providing faster results see also object-relational mapping orm object-relational impedance mismatch list comprehension lazy evaluation references rx framework monadic parser combinators using c3 retrieved b standard query operators microsoft retrieved enumerable class msdn microsoft retrieved february query expressions f retrieved linq framework retrieved enumerableelementat retrieved enumerablecontains retrieved enumerablecount retrieved net language-integrated query for xml data retrieved linq sql retrieved b c linq sql net language-integrated query for relational data retrieved linq datasets retrieved vider guy linq performance test my first visual studio project retrieved parsons jared increase linq query performance microsoft developer network retrieved while true that linq powerful very efficient large sets data can still cause unexpected performance problems alva jaime potential performance issues with compiled linq query re-compiles microsoft developer network retrieved when calling query multiple times with entity framework recommended approach use compiled linq queries compiling query results performance hit first time you use query but subsequent calls execute much faster kshitij pandey performance comparisons linq sql ado c retrieved parallelenumerable class retrieved programming age concurrency concurrent programming with pfx retrieved external links official microsoft linq project c linq samples linq objects for net developer future linq sql how does work c - part c linq detail v t e net framework architecture common language runtime clr com interop framework class library fcl version history components adonet o entity framework aspnet o ajax o core o dynamic data o mvc o razor clickonce dynamic language runtime extensible application markup language xaml language integrated query linq managed extensibility framework microsoft silverlight microsoft xna parallel extensions windows communication foundation wcf o wcf data services windows forms winforms windows identity foundation wif windows presentation foundation wpf windows workflow foundation wf net remoting tools decompilers net reflector dotpeek obfuscators dotfuscator smartassembly codearmor xenocode misc clr profiler ilasm net compiler platform native image generator ngen xamlpad ides visual studio o blend o express monodevelop sharpdevelop organizations net foundation microsoft xamarin category list v t e query languages current use ql alpha cql cypher d dmx datalog gremlin isbl ldap linq mql mdx oql ocl quel smarts sparql sql xquery xpath proprietary yql superseded codasyl retrieved from https//enwikipediaorg/w/indexphptitle=languageintegratedquery&oldid=749658771 categories net framework terminology query languages xml data access navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages العربية čeština dansk deutsch español فارسی français íslenska italiano עברית nederlands 日本語 polski português русский shqip suomi svenska türkçe 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 