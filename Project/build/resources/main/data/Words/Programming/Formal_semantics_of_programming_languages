semantics computer science from wikipedia free encyclopedia   redirected from formal semantics programming languages jump navigation search programming language theory semantics field concerned with rigorous mathematical study meaning programming languages does so by evaluating meaning syntactically legal strings defined by specific programming language showing computation involved such case that evaluation would be syntactically illegal strings result would be non-computation semantics describes processes computer follows when executing program that specific language this can be shown by describing relationship between input output program explanation how program will execute on certain platform hence creating model computation formal semantics for instance helps write compilers better understand what program doing prove eg that following if statement if = then s1 else s2 has same effect s1 alone contents overview approaches variations describing relationships history see also references further reading external links overview field formal semantics encompasses all following definition semantic models relations between different semantic models relations between different approaches meaning relation between computation underlying mathematical structures from fields such logic set theory model theory category theory etc has close links with other areas computer science such programming language design type theory compilers interpreters program verification model checking approaches there are many approaches formal semantics these belong three major classes denotational semantics whereby each phrase language interpreted denotation ie conceptual meaning that can be thought abstractly such denotations are often mathematical objects inhabiting mathematical space but not requirement that they should be so practical necessity denotations are described using some form mathematical notation which can turn be formalized denotational metalanguage for example denotational semantics functional languages often translate language into domain theory denotational semantic descriptions can also serve compositional translations from programming language into denotational metalanguage used basis for designing compilers operational semantics whereby execution language described directly rather than by translation operational semantics loosely corresponds interpretation although again implementation language interpreter generally mathematical formalism operational semantics may define abstract machine such secd machine give meaning phrases by describing transitions they induce on states machine alternatively with pure lambda calculus operational semantics can be defined via syntactic transformations on phrases language itself axiomatic semantics whereby one gives meaning phrases by describing logical axioms that apply them axiomatic semantics makes no distinction between phrase's meaning logical formulas that describe its meaning exactly what can be proven about some logic canonical example axiomatic semantics hoare logic distinctions between three broad classes approaches can sometimes be vague but all known approaches formal semantics use above techniques some combination thereof apart from choice between denotational operational axiomatic approaches most variation formal semantic systems arises from choice supporting mathematical formalism variations some variations formal semantics include following action semantics approach that tries modularize denotational semantics splitting formalization process two layers macro microsemantics predefining three semantic entities actions data yielders simplify specification algebraic semantics form axiomatic semantics based on algebraic laws for describing reasoning about program semantics formal manner attribute grammars define systems that systematically compute metadata called attributes for various cases language's syntax attribute grammars can be understood denotational semantics where target language simply original language enriched with attribute annotations aside from formal semantics attribute grammars have also been used for code generation compilers augment regular context-free grammars with context-sensitive conditions categorical functorial semantics uses category theory core mathematical formalism concurrency semantics catch-all term for any formal semantics that describes concurrent computations historically important concurrent formalisms have included actor model process calculi game semantics uses metaphor inspired by game theory predicate transformer semantics developed by edsger w dijkstra describes meaning program fragment function transforming postcondition precondition needed establish describing relationships for variety reasons one might wish describe relationships between different formal semantics for example prove that particular operational semantics for language satisfies logical formulas axiomatic semantics for that language such proof demonstrates that sound reason about particular operational interpretation strategy using particular axiomatic proof system prove that operational semantics over high-level machine related by simulation with semantics over low-level machine whereby low-level abstract machine contains more primitive operations than high-level abstract machine definition given language such proof demonstrates that low-level machine faithfully implements high-level machine also possible relate multiple semantics through abstractions via theory abstract interpretation history ] this section needs expansion you can help by adding august robert w floyd credited with founding field programming language semantics floyd see also formal semantics logic formal semantics linguistics references knuth donald e memorial resolution robert w floyd 1936-2001 pdf stanford university faculty memorials stanford historical society floyd robert w assigning meanings programs pdf schwartz jt mathematical aspects computer science proceedings symposium on applied mathematics american mathematical society pp 19–32 isbn further reading textbooks aaron stump programming language foundations wiley isbn 978-1-118-00747-1 carl gunter semantics programming languages mit press isbn 0-262-07143-6 robert harper practical foundations for programming languages working draft online pdf shriram krishnamurthi programming languages application interpretation online pdf mitchell john c foundations for programming languages john c reynolds theories programming languages cambridge university press isbn 0-521-59414-6 kenneth slonneger barry l kurtz formal syntax semantics programming languages addison-wesley glynn winskel formal semantics programming languages introduction mit press paperback isbn 0-262-73103-7 robert d tennent semantics programming languages prentice-hall m hennessy semantics programming languages elementary introduction wiley h nielson f nielson semantics with applications formal introduction wiley h nielson f nielson semantics with applications appetizer undergraduate texts computer science springer lecture notes glynn winskel denotational semantics university cambridge external links aaby anthony introduction programming languages semantics retrieved from https//enwikipediaorg/w/indexphptitle=semanticscomputerscience&oldid=723333216 categories formal methods logic computer science formal specification languages programming language semantics hidden categories articles be expanded from august all articles be expanded articles using small message boxes navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages alemannisch العربية чӑвашла čeština deutsch ελληνικά español français hrvatski italiano 日本語 português русский српски / srpski українська 中文 edit links this page was last modified on june at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 