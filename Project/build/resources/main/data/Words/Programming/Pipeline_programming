pipeline software from wikipedia free encyclopedia   redirected from pipeline programming jump navigation search this article about software pipelines general for original implementation for shells see pipeline unix software engineering pipeline consists chain processing elements processes threads coroutines functions etc arranged so that output each element input next name by analogy physical pipeline usually some amount buffering provided between consecutive elements information that flows these pipelines often stream records bytes bits elements pipeline may be called filters this also called pipes filters design pattern connecting elements into pipeline analogous function composition narrowly speaking pipeline linear one-directional though sometimes term applied more general flows for example primarily one-directional pipeline may have some communication other direction known return channel backchannel lexer hack pipeline may be fully bi-directional flows with one-directional tree directed acyclic graph topologies behave similarly linear pipelines – lack cycles makes them simple – thus may be loosely referred pipelines contents implementation vm/cms z/os object pipelines pipelines guis other considerations see also notes external links implementation pipelines are often implemented multitasking os by launching all elements at same time processes automatically servicing data read requests by each process with data written by upstream process – this can be called multiprocessed pipeline this way cpu will be naturally switched among processes by scheduler so minimize its idle time other common models elements are implemented lightweight threads coroutines reduce os overhead often involved with processes depending upon os threads may be scheduled directly by os by thread manager coroutines are always scheduled by coroutine manager some form usually read write requests are blocking operations which means that execution source process upon writing suspended until all data could be written destination process likewise execution destination process upon reading suspended until at least some requested data could be obtained from source process this cannot lead deadlock where both processes would wait indefinitely for each other respond since at least one two processes will soon thereafter have its request serviced by operating system continue run for performance most operating systems implementing pipes use pipe buffers which allow source process provide more data than destination process currently able willing receive under most unices unix-like operating systems special command also available which implements pipe buffer potentially much larger configurable size typically called buffer this command can be useful if destination process significantly slower than source process but anyway desired that source process can complete its task soon possible eg if source process consists command which reads audio track from cd destination process consists command which compresses waveform audio data format like mp3 this case buffering entire track pipe buffer would allow cd drive spin down more quickly enable user remove cd from drive before encoding process has finished such buffer command can be implemented using system calls for reading writing data wasteful busy waiting can be avoided by using facilities such poll select multithreading vm/cms z/os cms pipelines port pipeline idea vm/cms z/os systems supports much more complex pipeline structures than unix shells with steps taking multiple input streams producing multiple output streams such functionality supported by unix kernel but few programs use makes for complicated syntax blocking modes although some shells do support via arbitrary file descriptor assignment traditional application programs on ibm mainframe operating systems have no standard input output streams allow redirection piping instead spawning processes with external programs cms pipelines features lightweight dispatcher concurrently execute instances built-in programs run pipeline more than built-in programs that implement typical unix utilities interface devices operating system services addition built-in programs cms pipelines defines framework allow user-written rexx programs with input output streams that can be used pipeline data on ibm mainframes typically resides record-oriented filesystem connected i/o devices operate record mode rather than stream mode consequence data cms pipelines handled record mode for text files record holds one line text general cms pipelines does not buffer data but passes records data lock-step fashion from one program next this ensures deterministic flow data through network interconnected pipelines object pipelines beside byte stream-based pipelines there are also object pipelines object pipeline processing elements output objects instead text windows powershell includes internal object pipeline that transfers net objects between functions within powershell runtime channels found limbo programming language ipython ipipe extension are other examples this metaphor pipelines guis graphical environments such risc os rox desktop also make use pipelines rather than providing save dialog box containing file manager let user specify where program should write data risc os rox provide save dialog box containing icon field specify name destination specified by dragging dropping icon user can drop icon anywhere already-saved file could be dropped including onto icons other programs if icon dropped onto program's icon it's loaded contents that would otherwise have been saved are passed on new program's standard input stream for instance user browsing world-wide web might come across gz compressed image which they want edit re-upload using gui pipelines they could drag link their de-archiving program drag icon representing extracted contents their image editor edit open save dialog drag its icon their uploading software conceptually this method could be used with conventional save dialog box but this would require user's programs have obvious easily accessible location filesystem that can be navigated practice this often not case so gui pipelines are rare other considerations name 'pipeline' comes from rough analogy with physical plumbing that pipeline usually allows information flow only one direction like water often flows pipe pipes filters can be viewed form functional programming using byte streams data objects more specifically they can be seen particular form monad for i/o concept pipeline also central cocoon web development framework any xproc w3c standards implementations where allows source stream be modified before eventual display this pattern encourages use text streams input output programs this reliance on text has be accounted when creating graphic shells text programs see also anonymous pipe component-based software engineering flow-based programming gstreamer for multimedia framework built on plugin pipelines iteratees named pipe operating system construct intermediate anonymous pipe file pipeline computing for other computer-related versions concept kahn process networks extend pipeline concept more generic directed graph structure pipeline unix for details specific unix plumber - intelligent pipes developed part plan producer-consumer problem for implementation aspects software pipelines programming large software design pattern stream processing xml pipeline for processing xml files notes there are exceptions such broken pipe signals monadic i/o unix shell programming external links pipeline processing parallel programming do you know pipeline parallelism retrieved from https//enwikipediaorg/w/indexphptitle=pipelinesoftware&oldid=731860207 categories software design patterns programming paradigms inter-process communication navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages català čeština deutsch español فارسی français italiano português svenska türkçe edit links this page was last modified on july at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 