polymorphism computer science from wikipedia free encyclopedia   redirected from polymorphism object-oriented programming jump navigation search not be confused with polymorphic code programming languages type theory polymorphism from greek πολύς polys many much μορφή morphē form shape provision single interface entities different types polymorphic type one whose operations can also be applied values some other type types there are several fundamentally different kinds polymorphism ad hoc polymorphism when function denotes different potentially heterogeneous implementations depending on limited range individually specified types combinations ad hoc polymorphism supported many languages using function overloading parametric polymorphism when code written without mention any specific type thus can be used transparently with any number new types object-oriented programming community this often known generics generic programming functional programming community this often shortened polymorphism subtyping also called subtype polymorphism inclusion polymorphism when name denotes instances many different classes related by some common superclass object-oriented programming community this often referred simply polymorphism interaction between parametric polymorphism subtyping leads concepts variance bounded quantification contents history types polymorphism o ad hoc polymorphism o parametric polymorphism o subtyping o polytypism implementation aspects o static dynamic polymorphism see also references external links history ad hoc polymorphism parametric polymorphism were originally described fundamental concepts programming languages set lecture notes written by british computer scientist christopher strachey paper peter wegner luca cardelli introduced term inclusion polymorphism model subtypes inheritance however implementations subtyping inheritance predate term inclusion polymorphism having appeared with simula types polymorphism ad hoc polymorphism main article ad hoc polymorphism chris strachey chose term ad hoc polymorphism refer polymorphic functions that can be applied arguments different types but that behave differently depending on type argument which they are applied also known function overloading operator overloading term ad hoc this context not intended be pejorative refers simply fact that this type polymorphism not fundamental feature type system pascal example below add functions seem work generically over various types when looking at invocations but are considered be two entirely distinct functions by compiler for all intents purposes program adhoc function add x y integer integer begin add = x + y end function add s t string string begin add = concat s t end begin writelnadd1 prints writelnadd'hello ' 'world' prints hello world end dynamically typed languages situation can be more complex correct function that needs be invoked might only be determinable at run time implicit type conversion has also been defined form polymorphism referred coercion polymorphism parametric polymorphism main article parametric polymorphism parametric polymorphism allows function data type be written generically so that can handle values uniformly without depending on their type parametric polymorphism way make language more expressive while still maintaining full static type-safety concept parametric polymorphism applies both data types functions function that can evaluate be applied values different types known polymorphic function data type that can appear be generalized type eg list with elements arbitrary type designated polymorphic data type like generalized type from which such specializations are made parametric polymorphism ubiquitous functional programming where often simply referred polymorphism following example haskell shows parametrized list data type two parametrically polymorphic functions on them data list = nil | cons list length list -> integer length nil = length cons x xs = + length xs map -> b -> list -> list b map f nil = nil map f cons x xs = cons f x map f xs parametric polymorphism also available several object-oriented languages for instance templates c++ d under name generics java class list { class node { t elem node next } node head int length { } } list mapfunc f list xs { } john c reynolds later jean-yves girard formally developed this notion polymorphism extension lambda calculus called polymorphic lambda calculus system f any parametrically polymorphic function necessarily restricted what can do working on shape data instead its value leading concept parametricity subtyping main article subtyping some languages employ idea subtyping also called subtype polymorphism inclusion polymorphism restrict range types that can be used particular case polymorphism these languages subtyping allows function be written take object certain type t but also work correctly if passed object that belongs type s that subtype t according liskov substitution principle this type relation sometimes written s s subtype polymorphism usually resolved dynamically see below following example we make cats dogs subtypes animals procedure letshear accepts animal but will also work correctly if subtype passed abstract class animal { abstract string talk } class cat extends animal { string talk { return meow } } class dog extends animal { string talk { return woof } } void letshearanimal { printlnatalk } int main { letshearnew cat letshearnew dog } another example if number rational integer are types such that number > rational number > integer function written take number will work equally well when passed integer rational when passed number actual type object can be hidden from clients into black box accessed via object identity fact if number type abstract may not even be possible get your hands on object whose most-derived type number see abstract data type abstract class this particular kind type hierarchy known—especially context scheme programming language—as numerical tower usually contains many more types object-oriented programming languages offer subtype polymorphism using subclassing also known inheritance typical implementations each class contains what called virtual table—a table functions that implement polymorphic part class interface—and each object contains pointer vtable its class which then consulted whenever polymorphic method called this mechanism example late binding because virtual function calls are not bound until time invocation single dispatch ie single-argument polymorphism because virtual function calls are bound simply by looking through vtable provided by first argument this object so runtime types other arguments are completely irrelevant same goes for most other popular object systems some however such common lisp object system provide multiple dispatch under which method calls are polymorphic all arguments polytypism main article generic programming § functional languages related concept polytypism data type genericity polytypic function more general than polymorphic such function though one can provide fixed ad hoc cases for specific data types ad hoc combinator absent implementation aspects static dynamic polymorphism main articles static polymorphism late binding dynamic dispatch polymorphism can be distinguished by when implementation selected statically at compile time dynamically at run time typically via virtual function this known respectively static dispatch dynamic dispatch corresponding forms polymorphism are accordingly called static polymorphism dynamic polymorphism static polymorphism executes faster because there no dynamic dispatch overhead but requires additional compiler support further static polymorphism allows greater static analysis by compilers notably for optimization source code analysis tools human readers programmers dynamic polymorphism more flexible but slower—for example dynamic polymorphism allows duck typing dynamically linked library may operate on objects without knowing their full type static polymorphism typically occurs ad hoc polymorphism parametric polymorphism whereas dynamic polymorphism usual for subtype polymorphism however possible achieve static polymorphism with subtyping through more sophisticated use template metaprogramming namely curiously recurring template pattern see also type theory duck typing for polymorphism without static types polymorphic code computer virus terminology system f for lambda calculus with parametric polymorphism type class virtual inheritance references bjarne stroustrup february bjarne stroustrup's c++ glossary polymorphism – providing single interface entities different types b c cardelli luca wegner peter december on understanding types data abstraction polymorphism pdf acm computing surveys new york ny usa acm 471–523 doi 101145/60416042 issn 0360-0300 polymorphic types are types whose operations are applicable values more than one type booch et al object-oriented analysis design with applications addison-wesley b c strachey – fundamental concepts programming languages allen b tucker june computer science handbook second edition taylor & francis pp 91– isbn 978-1-58488-360-9 pierce b c types programming languages mit press ralf lammel joost visser typed combinators for generic traversal practical aspects declarative languages 4th international symposium p external links c++ examples polymorphism objects polymorphism visual prolog v t e data types uninterpreted bit byte trit tryte word bit array numeric arbitrary-precision bignum complex decimal fixed point floating point o double precision o extended precision o half precision o long double o minifloat o octuple precision o quadruple precision o single precision integer o signedness interval rational text character string o null-terminated pointer address o physical o virtual reference composite algebraic data type o generalized array associative array class dependent equality inductive list object o metaobject option type product record set union o tagged other boolean bottom type collection enumerated type exception function type opaque data type recursive data type semaphore stream top type type class unit type void related topics abstract data type data structure generic kind o metaclass parametric polymorphism primitive data type protocol o interface subtyping type constructor type conversion type system see also platform-dependent independent units information retrieved from https//enwikipediaorg/w/indexphptitle=polymorphismcomputerscience&oldid=748355419 categories polymorphism computer science functional programming object-oriented programming programming language concepts type theory data types navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version other projects wikibooks languages বাংলা беларуская тарашкевіца‎ български bosanski català čeština deutsch eesti español فارسی français 한국어 հայերեն हिन्दी hrvatski italiano עברית lietuvių nederlands 日本語 polski português русский svenska தமிழ் తెలుగు türkçe українська 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 