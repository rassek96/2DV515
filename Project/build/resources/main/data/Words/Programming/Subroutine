subroutine from wikipedia free encyclopedia jump navigation search this article needs additional citations for verification please help improve this article by adding citations reliable sources unsourced material may be challenged removed february learn how when remove this template message computer programming subroutine sequence program instructions that perform specific task packaged unit this unit can then be used programs wherever that particular task should be performed subprograms may be defined within programs separately libraries that can be used by multiple programs different programming languages subroutine may be called procedure function routine method subprogram generic term callable unit sometimes used name subprogram suggests subroutine behaves much same way computer program that used one step larger program another subprogram subroutine often coded so that can be started called several times from several places during one execution program including from other subroutines then branch back return next instruction after call once subroutine's task done maurice wilkes david wheeler stanley gill are credited with invention this concept which they termed closed subroutine contrasted with open subroutine macro subroutines are powerful programming tool syntax many programming languages includes support for writing using them judicious use subroutines for example through structured programming approach will often substantially reduce cost developing maintaining large program while increasing its quality reliability subroutines often collected into libraries are important mechanism for sharing trading software discipline object-oriented programming based on objects methods which are subroutines attached these objects object classes compiling method called threaded code executable program basically sequence subroutine calls contents main concepts language support advantages disadvantages history o language support o subroutine libraries o return by indirect jump o jump subroutine o call stack o delayed stacking c c++ examples visual basic examples pl/i example local variables recursion reentrancy overloading closures conventions o return codes optimization subroutine calls o inlining see also references main concepts content subroutine its body which piece program code that executed when subroutine called invoked subroutine may be written so that expects obtain one more data values from calling program its parameters formal parameters calling program provides actual values for these parameters called arguments different programming languages may use different conventions for passing arguments convention description common use call by value argument evaluated copy value passed subroutine default most algol-like languages after algol such pascal delphi simula cpl pl/m modula oberon ada many others c c++ java references objects arrays are also passed by value call by reference reference argument typically its address passed selectable most algol-like languages after algol such algol pascal delphi simula cpl pl/m modula oberon ada many others c++ fortran pl/i call by result parameter value copied back argument on return from subroutine ada out parameters call by value-result parameter value copied back on entry subroutine again on return algol call by name like macro – replace parameters with unevaluated argument expressions algol scala call by constant value like call by value except that parameter treated constant pl/i nonassignable parameters ada parameters subroutine may return computed value its caller its return value provide various result values output parameters indeed common use subroutines implement mathematical functions which purpose subroutine purely compute one more results whose values are entirely determined by parameters passed subroutine examples might include computing logarithm number determinant matrix subroutine call may also have side effects such modifying data structures computer memory reading from writing peripheral device creating file halting program machine even delaying program's execution for specified time subprogram with side effects may return different results each time called even if called with same arguments example random number function available many languages that returns different pseudo-random number each time called widespread use subroutines with side effects characteristic imperative programming languages subroutine can be coded so that may call itself recursively at one more places perform its task this method allows direct implementation functions defined by mathematical induction recursive divide conquer algorithms subroutine whose purpose compute one boolean-valued function that answer yes/no question sometimes called predicate logic programming languages often all subroutines are called predicates since they primarily determine success failure for example any type function subroutine but not main language support high-level programming languages usually include specific constructs delimit part program body that makes up subroutine assign identifier name subroutine specify names data types its parameters return values provide private naming scope for its temporary variables identify variables outside subroutine that are accessible within call subroutine provide values its parameters specify return values from within its body return calling program dispose values returned by call handle any exceptional conditions encountered during call package subroutines into module library object class etc some programming languages such pascal fortran ada many dialects basic distinguish between functions function subprograms which provide explicit return value calling program subroutines procedures which do not those languages function calls are normally embedded expressions eg sqrt function may be called y = z + sqrtx procedure calls either behave syntactically statements eg print procedure may be called if x > then printx are explicitly invoked by statement such call gosub eg call printx other languages such c lisp do not distinguish between functions subroutines strictly functional programming languages such haskell subprograms can have no side effects which means that various internal states program will not change functions will always return same result if repeatedly called with same arguments such languages typically only support functions since subroutines that do not return value have no use unless they can cause side effect programming languages such c c++ c subroutines may also simply be called functions not be confused with mathematical functions functional programming which are different concepts language's compiler will usually translate procedure calls returns into machine instructions according well-defined calling convention so that subroutines can be compiled separately from programs that call them instruction sequences corresponding call return statements are called procedure's prologue epilogue advantages advantages breaking program into subroutines include decomposing complex programming task into simpler steps this one two main tools structured programming along with data structures reducing duplicate code within program enabling reuse code across multiple programs dividing large programming task among various programmers various stages project hiding implementation details from users subroutine improving traceability ie most languages offer ways obtain call trace which includes names involved subroutines perhaps even more information such file names line numbers by not decomposing code into subroutines debugging would be impaired severely disadvantages invoking subroutine versus using in-line code imposes some computational overhead call mechanism subroutine typically requires standard housekeeping code – both at entry exit from function function prologue epilogue – usually saving general purpose registers return address minimum history idea subroutine was worked out after computing machines had already existed for some time arithmetic conditional jump instructions were planned ahead time have changed relatively little but special instructions used for procedure calls have changed greatly over years earliest computers microprocessors such small-scale experimental machine rca did not have single subroutine call instruction subroutines could be implemented but they required programmers use call sequence—a series instructions—at each call site some very early computers microprocessors such ibm intel pic microcontrollers have single-instruction subroutine call that uses dedicated hardware stack store return addresses—such hardware supports only few levels subroutine nesting but can support recursive subroutines machines before mid 1960s—such univac i pdp-1 ibm 1130—typically use calling convention which saved instruction counter first memory location called subroutine this allows arbitrarily deep levels subroutine nesting but does not support recursive subroutines pdp-11 one first computers with stack-pushing subroutine call instruction this feature supports both arbitrarily deep subroutine nesting also supports recursive subroutines language support very early assemblers subroutine support was limited subroutines were not explicitly separated from each other from main program indeed source code subroutine could be interspersed with that other subprograms some assemblers would offer predefined macros generate call return sequences by 1960s assemblers usually had much more sophisticated support for both inline separately assembled subroutines that could be linked together subroutine libraries even with this cumbersome approach subroutines proved very useful for one thing they allowed use same code many different programs moreover memory was very scarce resource on early computers subroutines allowed significant savings size programs many early computers loaded program instructions into memory from punched paper tape each subroutine could then be provided by separate piece tape loaded spliced before after main program mainline same subroutine tape could then be used by many different programs similar approach applied computers which used punched cards for their main input name subroutine library originally meant library literal sense which kept indexed collections tapes card-decks for collective use return by indirect jump remove need for self-modifying code computer designers eventually provided indirect jump instruction whose operand instead being return address itself was location variable processor register containing return address on those computers instead modifying subroutine's return jump calling program would store return address variable so that when subroutine completed would execute indirect jump that would direct execution location given by predefined variable jump subroutine another advance was jump subroutine instruction which combined saving return address with calling jump thereby minimizing overhead significantly ibm system/360 for example branch instructions bal balr designed for procedure calling would save return address processor register specified instruction return subroutine had only execute indirect branch instruction br through that register if subroutine needed that register for some other purpose such calling another subroutine would save register's contents private memory location register stack systems such hp jsb instruction would perform similar task except that return address was stored memory location that was target branch execution procedure would actually begin at next memory location hp assembly language one would write for example jsb mysub calls subroutine mysub bb will return here after mysub done call subroutine called mysub from main program subroutine would be coded mysub nop storage for mysub's return address aa start mysub's body jmp mysubi returns calling program jsb instruction placed address next instruction namely bb into location specified its operand namely mysub then branched next location after that namely aa = mysub + subroutine could then return main program by executing indirect jump jmp mysubi which branched location stored at location mysub compilers for fortran other languages could easily make use these instructions when available this approach supported multiple levels calls however since return address parameters return values subroutine were assigned fixed memory locations did not allow for recursive calls incidentally similar method was used by lotus 1-2-3 early 1980s discover recalculation dependencies spreadsheet namely location was reserved each cell store return address since circular references are not allowed for natural recalculation order this allows tree walk without reserving space for stack memory which was very limited on small computers such ibm pc call stack most modern implementations use call stack special case stack data structure implement subroutine calls returns each procedure call creates new entry called stack frame at top stack when procedure returns its stack frame deleted from stack its space may be used for other procedure calls each stack frame contains private data corresponding call which typically includes procedure's parameters internal variables return address call sequence can be implemented by sequence ordinary instructions approach still used reduced instruction set computing risc very long instruction word vliw architectures but many traditional machines designed since late 1960s have included special instructions for that purpose call stack usually implemented contiguous area memory arbitrary design choice whether bottom stack lowest highest address within this area so that stack may grow forwards backwards memory however many architectures chose latter some designs notably some forth implementations used two separate stacks one mainly for control information like return addresses loop counters other for data former was worked like call stack was only indirectly accessible programmer through other language constructs while latter was more directly accessible when stack-based procedure calls were first introduced important motivation was save precious memory with this scheme compiler does not have reserve separate space memory for private data parameters return address local variables each procedure at any moment stack contains only private data calls that are currently active namely which have been called but haven't returned yet because ways which programs were usually assembled from libraries was still not uncommon find programs that include thousands subroutines which only handful are active at any given moment for such programs call stack mechanism could save significant amounts memory indeed call stack mechanism can be viewed earliest simplest method for automatic memory management however another advantage call stack method that allows recursive subroutine calls since each nested call same procedure gets separate instance its private data delayed stacking one disadvantage call stack mechanism increased cost procedure call its matching return extra cost includes incrementing decrementing stack pointer some architectures checking for stack overflow accessing local variables parameters by frame-relative addresses instead absolute addresses cost may be realized increased execution time increased processor complexity both this overhead most obvious objectionable leaf procedures leaf functions which return without making any procedure calls themselves reduce that overhead many modern compilers try delay use call stack until really needed for example call procedure p may store return address parameters called procedure certain processor registers transfer control procedure's body by simple jump if procedure p returns without making any other call call stack not used at all if p needs call another procedure q will then use call stack save contents any registers such return address that will be needed after q returns c c++ examples c c++ programming languages subprograms are termed functions member functions when associated with class these languages use special keyword void indicate that function takes no parameters especially c does not return any value note that c/c++ functions can have side-effects including modifying any variables whose addresses are passed parameters ie passed by reference examples void function1void { / some code / } function does not return value has be called stand-alone function eg function1 int function2void { return } this function returns result number call can be part expression eg x + function2 char function3int number { char selection = {'s''m''t''w''t''f''s'} return selection } this function converts number between into initial letter corresponding day week namely 's' 'm' 's' result calling might be assigned variable eg numday = function3number void function4int pointertovar { pointertovar++ } this function does not return value but modifies variable whose address passed parameter would be called with function4&variabletoincrement visual basic examples visual basic language subprograms are termed functions subs methods when associated with class visual basic uses various terms called types define what being passed parameter by default unspecified variable registered variant type can be passed byref default byval also when function sub declared given public private friend designation which determines whether can be accessed outside module project that was declared by value – way passing value argument procedure instead passing address this allows procedure access copy variable result variable's actual value can't be changed by procedure which passed by reference – way passing address argument procedure instead passing value this allows procedure access actual variable result variable's actual value can be changed by procedure which passed unless otherwise specified arguments are passed by reference public optional – indicates that function procedure accessible all other procedures all modules if used module that contains option private procedure not available outside project private optional – indicates that function procedure accessible only other procedures module where declared friend optional – used only class module indicates that function procedure visible throughout project but not visible controller instance object private function function1 ' some code here end function function does not return value has be called stand-alone function eg function1 private function function2 integer function2 = end function this function returns result number call can be part expression eg x + function2 private function function3byval intvalue integer string dim strarray6 string strarray = arraym t w t f s s function3 = strarrayintvalue end function this function converts number between into initial letter corresponding day week namely 'm' 't' 's' result calling might be assigned variable eg numday = function3number private function function4byref intvalue integer intvalue = intvalue + end function this function does not return value but modifies variable whose address passed parameter would be called with function4variabletoincrement pl/i example pl/i called procedure may be passed descriptor providing information about argument such string lengths array bounds this allows procedure be more general eliminates need for programmer pass such information by default pl/i passes arguments by reference trivial subroutine change sign each element two-dimensional array might look like changesign procedurearray declare array float array = -array end changesign this could be called with various arrays follows / first array bounds from / declare array1 39float / second array bounds from / declare array2 float call changesignarray1 call changesignarray2 local variables recursion reentrancy subprogram may find useful make use certain amount scratch space that memory used during execution that subprogram hold intermediate results variables stored this scratch space are termed local variables scratch space termed activation record activation record typically has return address that tells where pass control back when subprogram finishes subprogram may have any number nature call sites if recursion supported subprogram may even call itself causing its execution suspend while another nested execution same subprogram occurs recursion useful means simplify some complex algorithms breaking down complex problems recursive languages generally provide new copy local variables on each call if programmer desires value local variables stay same between calls they can be declared static some languages global values common areas can be used here example recursive subroutine c/c++ find fibonacci numbers int fibint n { ifn double areadouble h double w { return h w } double areadouble r { return r r } int main { double rectanglearea = area3 double circlearea = area5 stdcout wiktionary free dictionary function mathematics method computer programming evaluation strategy modular programming transclusion operator overloading functional programming command-query separation coroutines subprograms that call each other if both were main programs event handler subprogram that called response input event interrupt references us election assistance commission definitions words with special meanings voluntary voting system guidelines retrieved wheeler d j use sub-routines programmes proceedings acm national meeting pittsburgh on - acm '52 p doi 101145/609784609816 wilkes m v wheeler d j gill s preparation programs for electronic digital computer addison-wesley dainith john open subroutine dictionary computing encyclopediacom retrieved january donald e knuth art computer programming volume i fundamental algorithms addison-wesley isbn 0-201-89683-4 o-j dahl e w dijkstra c r hoare structured programming academic press isbn 0-12-200550-3 guy lewis steele jr ai memo 'debunking expensive procedure call myth procedure call implementations considered harmful section c why procedure calls have bad reputation frank thomas s introduction pdp-11 its assembly language prentice-hall software series prentice-hall p isbn retrieved we could supply our assembling clerk with copies source code for all our useful subroutines then when presenting him with mainline program for assembly tell him which subroutines will be called mainline arm information center infocenterarmcom retrieved overview x64 calling conventions msdnmicrosoftcom retrieved function types msdnmicrosoftcom retrieved authority control gnd 4253859-2 retrieved from https//enwikipediaorg/w/indexphptitle=subroutine&oldid=751823919 categories source code university cambridge computer laboratory holism programming constructs subroutines hidden categories articles needing additional references from february all articles needing additional references all wikipedia articles needing clarification wikipedia articles needing clarification from november all articles with unsourced statements articles with unsourced statements from november articles with unsourced statements from november wikipedia articles needing clarification from november articles with unsourced statements from june articles with unsourced statements from may wikipedia articles with gnd identifiers articles with example c code navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages العربية বাংলা български bosanski català čeština deutsch eesti ελληνικά español فارسی français 한국어 hrvatski íslenska עברית қазақша magyar nederlands 日本語 олык марий polski português русский slovenčina српски / srpski suomi tagalog ไทย українська tiếng việt 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 