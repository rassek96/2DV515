programming language specification from wikipedia free encyclopedia jump navigation search computing programming language specification standard definition documentation artifact that defines programming language so that users implementors can agree on what programs that language mean specifications are typically detailed formal primarily used by implementors with users referring them case ambiguity c++ specification frequently cited by users for instance due complexity related documentation includes programming language reference which intended expressly for users programming language rationale which explains why specification written these are typically more informal than specification contents standardization forms syntax semantics o natural language o formal semantics o reference implementation o test suite see also external links o language specifications notes standardization not all major programming languages have specifications languages can exist be popular for decades without specification language may have one more implementations whose behavior acts de facto standard without this behavior being documented specification perl through perl notable example language without specification while php was only specified after being use for years language may be implemented then specified specified then implemented these may develop together which usual practice today this because implementations specifications provide checks on each other writing specification requires precisely stating behavior implementation implementation checks that specification possible practical consistent writing specification before implementation has largely been avoided since algol due unexpected difficulties implementation when implementation deferred however languages are still occasionally implemented gain popularity without formal specification implementation essential for use while specification desirable but not essential informally code talks “ algol was first possibly one last major language for which full formal definition was made before was implemented ” — cha koster forms programming language specification can take several forms including following explicit definition syntax semantics language while syntax commonly specified using formal grammar semantic definitions may be written natural language eg approach taken for c language formal semantics eg standard mland scheme specifications notable example c language which gained popularity without formal specification instead being described part book c programming language only much later being formally standardized ansi c description behavior compiler sometimes called translator for language eg c++ language fortran syntax semantics language has be inferred from this description which may be written natural formal language model implementation sometimes written language being specified eg prolog syntax semantics language are explicit behavior model implementation syntax syntax programming language usually described using combination following two components regular expression describing its lexemes context-free grammar which describes how lexemes may be combined form syntactically correct program semantics formulating rigorous semantics large complex practical programming language daunting task even for experienced specialists resulting specification can be difficult for anyone but experts understand following are some ways which programming language semantics can be described all languages use at least one these description methods some languages combine more than one natural language description by human natural language formal semantics description by mathematics reference implementations description by computer program test suites description by examples programs their expected behaviors while few language specifications start off this form evolution some language specifications has been influenced by semantics test suite eg past specification ada has been modified match behavior ada conformity assessment test suite natural language most widely used languages are specified using natural language descriptions their semantics this description usually takes form reference manual for language these manuals can run hundreds pages eg print version java language specification 3rd ed pages long imprecision natural language vehicle for describing programming language semantics can lead problems with interpreting specification for example semantics java threads were specified english was later discovered that specification did not provide adequate guidance for implementors formal semantics main article formal semantics programming languages formal semantics are grounded mathematics result they can be more precise less ambiguous than semantics given natural language however supplemental natural language descriptions semantics are often included aid understanding formal definitions for example iso standard for modula-2 contains both formal natural language definition on opposing pages programming languages whose semantics are described formally can reap many benefits for example formal semantics enable mathematical proofs program correctness formal semantics facilitate design type systems proofs about soundness those type systems formal semantics can establish unambiguous uniform standards for implementations language automatic tool support can help realize some these benefits for example automated theorem prover theorem checker can increase programmer's language designer's confidence correctness proofs about programs language itself power scalability these tools varies widely full formal verification computationally intensive rarely scales beyond programs containing few hundred lines may require considerable manual assistance from programmer more lightweight tools such model checkers require fewer resources have been used on programs containing tens thousands lines many compilers apply static type checks any program they compile reference implementation reference implementation single implementation programming language that designated authoritative behavior this implementation held define proper behavior program written language this approach has several attractive properties first precise requires no human interpretation disputes meaning program can be settled simply by executing program on reference implementation provided that implementation behaves deterministically for that program on other hand defining language semantics through reference implementation also has several potential drawbacks chief among them that conflates limitations reference implementation with properties language for example if reference implementation has bug then that bug must be considered be authoritative behavior another drawback that programs written this language may rely on quirks reference implementation hindering portability across different implementations nevertheless several languages have successfully used reference implementation approach for example perl interpreter considered define authoritative behavior perl programs case perl open source model software distribution has contributed fact that nobody has ever produced another implementation language so issues involved using reference implementation define language semantics are moot test suite defining semantics programming language terms test suite involves writing number example programs language then describing how those programs ought behave — perhaps by writing down their correct outputs programs plus their outputs are called test suite language any correct language implementation must then produce exactly correct outputs on test suite programs chief advantage this approach semantic description that easy determine whether language implementation passes test suite user can simply execute all programs test suite compare outputs desired outputs however when used by itself test suite approach has major drawbacks well for example users want run their own programs which are not part test suite indeed language implementation that could only run programs its test suite would be largely useless but test suite does not by itself describe how language implementation should behave on any program not test suite determining that behavior requires some extrapolation on implementor's part different implementors may disagree addition difficult use test suite test behavior that intended allowed be nondeterministic therefore common practice test suites are used only combination with one other language specification techniques such natural language description reference implementation see also programming language reference external links language specifications few examples official draft language specifications specifications written primarily formal mathematics o definition standard ml revised edition - formal definition operational semantics style o scheme r5rs - formal definition denotational semantics style specifications written primarily natural language o algol report o ada reference manual o java language specification o draft c++ standard specifications via test suite o ruby's de facto community-driven specification notes announcing specification for php july joel marcey shorter history algol68 archived from original on august retrieved september milner r m tofte r harper d macqueen definition standard ml revised mit press isbn 0-262-63181-4 cite uses deprecated parameter |coauthors= help kelsey richard william clinger jonathan rees february section formal semantics revised5 report on algorithmic language scheme retrieved jones d forms language specification pdf retrieved william pugh java memory model fatally flawed concurrency practice experience 126445-455 august retrieved from https//enwikipediaorg/w/indexphptitle=programminglanguagespecification&oldid=730051349 categories programming language topics hidden categories pages containing cite templates with deprecated parameters articles with attributed pull quotes all articles with unsourced statements articles with unsourced statements from february navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages العربية edit links this page was last modified on july at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 