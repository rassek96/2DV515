formal specification from wikipedia free encyclopedia jump navigation search computer science formal specifications are mathematically based techniques whose purpose are help with implementation systems software they are used describe system analyze its behavior aid its design by verifying key properties interest through rigorous effective reasoning tools these specifications are formal sense that they have syntax their semantics fall within one domain they are able be used infer useful information contents motivation uses limitations paradigms software tools examples see also references external links motivation each passing decade computer systems have become increasingly more powerful result they have become more impactful society because this better techniques are needed assist design implementation reliable software established engineering disciplines use mathematical analysis foundation creating validating product design formal specifications are one such way achieve this software engineering reliability once predicted other methods such testing are more commonly used enhance code quality uses given such specification possible use formal verification techniques demonstrate that system design correct with respect its specification this allows incorrect system designs be revised before any major investments have been made into actual implementation another approach use provably correct refinement steps transform specification into design which ultimately transformed into implementation that correct by construction important note that formal specification not implementation but rather may be used develop implementation formal specifications describe what system should do not how system should do good specification must have some following attributes adequate internally consistent unambiguous complete satisfied minimal good specification will have constructability manageability evolvability usability communicability powerful efficient analysis one main reasons there interest formal specifications that they will provide ability perform proofs on software implementations these proofs may be used validate specification verify correctness design prove that program satisfies specification limitations design implementation cannot ever be declared “correct” on its own can only ever be “correct with respect given specification” whether formal specification correctly describes problem be solved separate issue also difficult issue address since ultimately concerns problem constructing abstracted formal representations informal concrete problem domain such abstraction step not amenable formal proof however possible validate specification by proving “challenge” theorems concerning properties that specification expected exhibit if correct these theorems reinforce specifier's understanding specification its relationship with underlying problem domain if not specification probably needs be changed better reflect domain understanding those involved with producing implementing specification formal methods software development are not widely used industry most companies do not consider cost-effective apply them their software development processes this may be for variety reasons some which are time o high initial start up cost with low measurable returns flexibility o lot software companies use agile methodologies that focus on flexibility doing formal specification whole system up front often perceived being opposite flexible however there some research into benefits using formal specifications with agile development complexity o they require high level mathematical expertise analytical skills understand apply them effectively o solution this would be develop tools models that allow for these techniques be implemented but hide underlying mathematics limited scope o they do not capture properties interest for all stakeholders project o they do not do good job specifying user interfaces user interaction not cost-effective o this not entirely true by limiting their use only core parts critical systems they have shown be cost-effective other limitations isolation low-level ontologies poor guidance poor separation concerns poor tool feedback paradigms formal specification techniques have existed various domains on various scales for quite some time implementations formal specifications will differ depending on what kind system they are attempting model how they are applied at what point software life cycle they have been introduced these types models can be categorized into following specification paradigms history-based specification o behavior based on system histories o assertions are interpreted over time state-based specification o behavior based on system states o series sequential steps eg financial transaction o languages such z vdm b rely on this paradigm transition-based specification o behavior based on transitions from state-to-state system o best used with reactive system o languages such statecharts promela step-spl rsml scr rely on this paradigm functional specification o specify system structure mathematical functions o obj asl pluss larch hol pvs rely on this paradigm operational specification o early languages such paisley gist petri nets process algebras rely on this paradigm addition above paradigms there are ways apply certain heuristics help improve creation these specifications paper referenced here best discusses heuristics use when designing specification they do so by applying divide-and-conquer approach software tools z notation example leading formal specification language others include specification languagevdm-sl vienna development method abstract machine notation amn b-method web services area formal specification often used describe non-functional properties web services quality service some tools are algebraic larch obj lotos model-based z b vdm csp petri nets tla+ examples for implementation examples refer links software tools section see also algebraic specification model-based specification formal methods specification technical standard software engineering specification language references b hierons r m krause p lüttgen g simons j h vilkomir s woodward m r zedan h bogdanov k bowen j p cleaveland r derrick j dick j gheorghe m harman m kapoor k using formal specifications support testing acm computing surveys doi101145/14593521459354 b c d e gaudel m -c formal specification techniques proceedings 16th international conference on software engineering pp 223–223 doi101109/icse1994296781 isbn 0-8186-5855-x b c d e f g h i j k l m n o lamsweerde v formal specification proceedings conference on future software engineering - icse '00 p doi101145/336512336546 isbn b c d sommerville ian formal specification pdf software engineering retrieved february b c nummenmaa timo tiensuu aleksi berki eleni mikkonen tommi kuittinen jussi kultima annakaisa august supporting agile development by facilitating natural user interaction with executable formal specifications acm sigsoft software engineering notes 1–10 doi 101145/19889972003643 b van der poll john paula kotze what design heuristics may enhance utility formal specification proceedings annual research conference south african institute computer scientists information technologists on enablement through technology saicsit '02 179–194 s-cube knowledge model formal specification external links case for formal specification technology by coryoth formal specification retrieved from https//enwikipediaorg/w/indexphptitle=formalspecification&oldid=747725691 categories formal methods formal specification languages navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages deutsch español lietuvių malagasy 日本語 português русский simple english українська edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 