fortran from wikipedia free encyclopedia   redirected from fortran jump navigation search f95 redirects here for düsseldorf-based football club see fortuna düsseldorf fortran fortran automatic coding system for ibm october first programmer's reference manual for fortran paradigm multi-paradigm structured imperative procedural object-oriented generic designed by john backus developer john backus ibm first appeared years ago stable release fortran iso/iec 1539-12010 / years ago typing discipline strong static manifest filename extensions f for f90 f95 major implementations absoft cray gfortran g95 ibm xl fortran intel hitachi lahey/fujitsu numerical algorithms group open watcom pathscale pgi silverfrost oracle solaris studio visual fortran others influenced by speedcoding influenced algol basic c chapel cms-2 julia pl/i pact i mumps ratfor fortran formerly fortran derived from formula translation general-purpose imperative programming language that especially suited numeric computation scientific computing originally developed by ibm 1950s for scientific engineering applications fortran came dominate this area programming early on has been continuous use for over half century computationally intensive areas such numerical weather prediction finite element analysis computational fluid dynamics computational physics crystallography computational chemistry popular language for high-performance computing used for programs that benchmark rank world's fastest supercomputers fortran encompasses lineage versions each which evolved add extensions language while usually retaining compatibility with prior versions successive versions have added support for structured programming processing character-based data fortran array programming modular programming generic programming fortran high performance fortran fortran object-oriented programming fortran concurrent programming fortran contents naming history o fortran + fixed layout punched cards o fortran ii + simple fortran ii program o fortran iii o ibm fortran o fortran iv o fortran o fortran + variants minnesota fortran o transition ansi standard fortran o fortran + obsolescence deletions + hello world example o fortran + conditional compilation varying length strings o fortran o fortran o fortran fortran supercomputers language features portability variants o fortran o fortran v o fortran o specific variants + for transit for ibm o fortran-based languages code examples humor see also references further reading external links naming names earlier versions language through fortran were conventionally spelled all-capitals fortran was last version which use lowercase letters keywords was strictly non-standard capitalization has been dropped referring newer versions beginning with fortran official language standards now refer language fortran rather than all-caps fortran history ibm mainframe computer late john w backus submitted proposal his superiors at ibm develop more practical alternative assembly language for programming their ibm mainframe computer backus' historic fortran team consisted programmers richard goldberg sheldon f best harlan herrick peter sheridan roy nutt robert nelson irving ziller lois haibt david sayre its concepts included easier entry equations into computer idea developed by j halcombe laning demonstrated laning zierler system draft specification for ibm mathematical formula translating system was completed by mid-1954 first manual for fortran appeared october with first fortran compiler delivered april this was first optimizing compiler because customers were reluctant use high-level programming language unless its compiler could generate code with performance comparable that hand-coded assembly language while community was skeptical that this new method could possibly outperform hand-coding reduced number programming statements necessary operate machine by factor quickly gained acceptance john backus said during interview with think ibm employee magazine much my work has come from being lazy i didn't like writing programs so when i was working on ibm writing programs for computing missile trajectories i started work on programming system make easier write programs language was widely adopted by scientists for writing numerically intensive programs which encouraged compiler writers produce compilers that could generate faster more efficient code inclusion complex number data type language made fortran especially suited technical applications such electrical engineering by versions fortran were available for ibm computers significantly increasing popularity fortran spurred competing computer manufacturers provide fortran compilers for their machines so that by over fortran compilers existed for these reasons fortran considered be first widely used programming language supported across variety computer architectures development fortran paralleled early evolution compiler technology many advances theory design compilers were specifically motivated by need generate efficient code for fortran programs fortran initial release fortran for ibm contained statements including dimension equivalence statements assignment statements three-way arithmetic if statement which passed control one three locations program depending on whether result arithmetic statement was negative zero positive if statements for checking exceptions accumulator overflow quotient overflow divide check if statements for manipulating sense switches sense lights go computed go assign assigned go do loops formatted i/o format read read input tape write write output tape print punch unformatted i/o read tape read drum write tape write drum other i/o end file rewind backspace pause stop continue frequency statement for providing optimization hints compiler arithmetic if statement was similar three-way branch instruction on ibm however branch instructions all contained only one destination address eg tze – transfer ac zero tnz – transfer ac not zero tpl – transfer ac plus tmi – transfer ac minus machine its successors 700/7000 series did have three-way skip instruction cas – compare ac with storage but using this instruction implement if would consume instruction words require constant zero word storage take machine cycles execute using transfer instructions implement if could be done instruction words required no constants storage take machine cycles execute optimizing compiler like fortran would most likely select more compact usually faster transfers instead compare use transfers also allowed frequency statement optimize ifs which could not be done using compare also compare considered −0 be different values while transfer zero transfer not zero considered them be same frequency statement fortran was used originally optionally give branch probabilities for three branch cases arithmetic if statement first fortran compiler used this weighting perform at compile time monte carlo simulation generated code results which were used optimize placement basic blocks memory – very sophisticated optimization for its time monte carlo technique documented backus et al's paper on this original implementation fortran automatic coding system fundamental unit program basic block basic block stretch program which has one entry point one exit point purpose section prepare for section table predecessors pred table which enumerates basic blocks lists for every basic block each basic blocks which can be its immediate predecessor flow together with absolute frequency each such basic block link this table obtained by running program once monte-carlo fashion which outcome conditional transfers arising out if-type statements computed go to's determined by random number generator suitably weighted according whatever frequency statements have been provided many years later frequency statement had no effect on code was treated comment statement since compilers no longer did this kind compile-time simulation similar fate has befallen compiler hints several other programming languages for example c's register keyword fixed layout punched cards fortran code on punched card showing specialized uses columns 1–5 73–80 further information computer programming punched card era before development disk files text editors terminals programs were most often entered on keypunch keyboard onto 80-column punched cards one line card resulting deck cards would be fed into card reader be compiled punched-card codes included no lower-case letters many special characters special versions ibm keypunch were offered that would correctly print repurposed special characters used fortran reflecting punched-card input practice fortran programs were originally written fixed-column format with first columns read into twelve 36-bit words letter c column caused entire card be treated comment ignored by compiler otherwise columns card were divided into four fields were label field sequence digits here was taken label for use do control statements such go if identify format statement referred write read statement leading zeros are ignored not valid label number was continuation field character other than blank zero here caused card be taken continuation statement on prior card served statement field were ignored ibm 704's card reader only used columns columns could therefore be used for identification information such punching sequence number text which could be used re-order cards if stack cards was dropped though practice this was reserved for stable production programs ibm could be used copy program deck add sequence numbers some early compilers eg ibm 650's had additional restrictions due limitations on their card readers keypunches could be programmed tab column skip out after column later compilers relaxed most fixed-format restrictions requirement was eliminated fortran standard within statement field whitespace characters blanks were ignored outside text literal this allowed omitting spaces between tokens for brevity including spaces within identifiers for clarity for example avg x was valid identifier equivalent avgofx 101010do101i=1 was valid statement equivalent do i = because zero column treated if were space while do101i=1101 was instead do101i = assignment variable called do101i note slight visual difference between comma period hollerith strings originally allowed only format data statements were prefixed by character count letter h eg 26hthis alphanumeric data allowing blanks be retained within character string miscounts were problem fortran ii ibm's fortran ii appeared main enhancement was support procedural programming by allowing user-written subroutines functions which returned values with parameters passed by reference common statement provided way for subroutines access common global variables six new statements were introduced subroutine function end call return common over next few years fortran ii would also add support for double precision complex data types early fortran compilers supported no recursion subroutines early computer architectures supported no concept stack when they did directly support subroutine calls return location was often stored one fixed location adjacent subroutine code which does not permit subroutine be called again before prior call subroutine has returned although not specified fortran many f77 compilers supported recursion option while became standard fortran simple fortran ii program this program for heron's formula reads data on tape reel containing three 5-digit integers b c input if b c cannot represent sides triangle plane geometry then program's execution will end with error code stop otherwise output line will be printed showing input values for b c followed by computed area triangle floating-point number with digits after decimal point c area triangle with standard square root function c input - tape reader unit integer input c output - line printer unit real output c input error display error output code job control listing read input tape ia ib ic format 3i5 c ia ib ic may not be negative c furthermore sum two sides triangle c must be greater than third side so we check for that too if ia if ib if ic if ia+ib-ic if ia+ic-ib if ib+ic-ia stop c using heron's formula we calculate c area triangle s = floatf ia + ib + ic / area = sqrtf s s - floatfia s - floatfib + s - floatfic write output tape ia ib ic area format 4h a= i55h b= i55h c= i58h area= f102 + 13h square units stop end fortran iii fortran coding form printed on paper intended be used by programmers prepare programs for punching onto cards by keypunch operators now obsolete ibm also developed fortran iii that allowed for inline assembly code among other features however this version was never released product like fortran fortran ii fortran iii included machine-dependent features that made code written unportable from machine machine early versions fortran provided by other vendors suffered from same disadvantage ibm fortran fortran was provided for ibm computer by innovative 63-phase compiler that ran entirely its core memory only 6-bit characters compiler could be run from tape from 2200-card deck used no further tape disk storage kept program memory loaded overlays that gradually transformed place into executable form described by haines ibm document c24-1455 executable form was not entirely machine language rather floating-point arithmetic subscripting input/output function references were interpreted anticipating ucsd pascal p-code by two decades ibm later provided fortran iv compiler for series computers described ibm document c24-3322 fortran iv starting result customer demands ibm began development fortran iv that removed machine-dependent features fortran ii such read input tape while adding new features such logical data type logical boolean expressions logical if statement alternative arithmetic if statement fortran iv was eventually released first for ibm stretch computer followed by versions for ibm ibm later for ibm by fortran iv was supposed be compliant with standard being developed by american standards association x343 fortran working group at about this time fortran iv had started become important educational tool implementations such university waterloo's watfor watfiv were created simplify complex compile link processes earlier compilers fortran perhaps most significant development early history fortran was decision by american standards association now american national standards institute ansi form committee sponsored by bema business equipment manufacturers association develop american standard fortran resulting two standards approved march defined two languages fortran based on fortran iv which had served de facto standard basic fortran based on fortran ii but stripped its machine-dependent features fortran defined by first standard officially denoted x39-1966 became known fortran although many continued term fortran iv language on which standard was largely based fortran effectively became first industry-standard version fortran fortran included main program subroutine function block data program units integer real double precision complex logical data types common dimension equivalence statements data statement for specifying initial values intrinsic external eg library functions assignment statement go computed go assigned go assign statements logical if arithmetic three-way if statements do loop statement read write backspace rewind endfile statements for sequential i/o format statement assigned format call return pause stop statements hollerith constants data format statements arguments procedures identifiers up six characters length comment lines end line fortran fortran-77 program with compiler output written on cdc at rwth aachen university germany bsd for digital equipment corporation dec vax displaying manual for fortran f77 compiler after release fortran standard compiler vendors introduced several extensions standard fortran prompting ansi committee x3j3 begin work on revising standard under sponsorship cbema computer business equipment manufacturers association formerly bema final drafts this revised standard circulated leading formal approval new fortran standard april new standard called fortran officially denoted x39-1978 added number significant features address many shortcomings fortran block if end if statements with optional else else if clauses provide improved language support for structured programming do loop extensions including parameter expressions negative increments zero trip counts open close inquire statements for improved i/o capability direct-access file i/o implicit statement override implicit conventions that undeclared variables are integer if their name begins with i j k l m n real otherwise character data type replacing hollerith strings with vastly expanded facilities for character input output processing character-based data parameter statement for specifying constants save statement for persistent local variables generic names for intrinsic functions eg sqrt also accepts arguments other types such complex real16 set intrinsics lge lgt lle llt for lexical comparison strings based upon ascii collating sequence these ascii functions were demanded by us department defense their conditional approval vote this revision standard number features were removed altered manner that might invalidate formerly standard-conforming programs removal was only allowable alternative x3j3 at that time since concept deprecation was not yet available for ansi standards while most items conflict list see appendix a2 x39-1978 addressed loopholes pathological cases permitted by prior standard but rarely used small number specific capabilities were deliberately removed such hollerith constants hollerith data such greet = 12hhello there reading into h edit hollerith field descriptor format specification overindexing array bounds by subscripts dimension a105 y= a111 transfer control out back into range do loop also known extended range variants minnesota fortran control data corporation computers had another version fortran called minnesota fortran mnf designed especially for student use with variations output constructs special uses commons data statements optimizations code levels for compiling detailed error listings extensive warning messages debugs transition ansi standard fortran development revised standard succeed fortran would be repeatedly delayed standardization process struggled keep up with rapid changes computing programming practice meantime standard fortran for nearly fifteen years fortran would become historically most important dialect important practical extension fortran was release mil-std-1753 this specification developed by us department defense standardized number features implemented by most fortran compilers but not included ansi fortran standard these features would eventually be incorporated into fortran standard do while end do statements include statement implicit none variant implicit statement bit manipulation intrinsic functions based on similar functions included industrial real-time fortran ansi/isa s611 ieee posix standard released provided simple means for fortran programmers issue posix system calls over calls were defined document – allowing access posix-compatible process control signal handling file system control device control procedure pointing stream i/o portable manner fortran much delayed successor fortran informally known fortran prior that fortran 8x was finally released iso/iec standard ansi standard addition changing official spelling from fortran fortran this major revision added many new features reflect significant changes programming practice that had evolved since standard free-form source input also with lowercase fortran keywords identifiers up characters length previous standard was only characters inline comments ability operate on arrays array sections whole thus greatly simplifying math engineering computations o whole partial masked array assignment statements array expressions such x1n=r1ncosa1n o where statement for selective array assignment o array-valued constants expressions o user-defined array-valued functions array constructors recursive procedures modules group related procedures data together make them available other program units including capability limit accessibility only specific parts module vastly improved argument-passing mechanism allowing interfaces be checked at compile time user-written interfaces for generic procedures operator overloading derived structured data types new data type declaration syntax specify data type other attributes variables dynamic memory allocation by means allocatable attribute allocate deallocate statements pointer attribute pointer assignment nullify statement facilitate creation manipulation dynamic data structures structured looping constructs with end do statement for loop termination exit cycle statements for terminating normal do loop iterations orderly way select case construct for multi-way selection portable specification numerical precision under user's control new enhanced intrinsic procedures obsolescence deletions unlike prior revision fortran removed no features appendix b1 says list deleted features this standard empty any standard-conforming fortran program also standard-conforming under fortran either standard should be usable define its behavior small set features were identified obsolescent expected be removed future standard obsolescent feature example status/fate fortran arithmetic if-statement if x non-integer do parameters control variables do x= deleted shared do-loop termination termination with statement other than end do continue do j= do k= l= j + k branching end if from outside block go if e then end if deleted alternate return call subr x y pause statement pause deleted assign statement assigned go statement assign h go h deleted assigned format specifiers assign f write f deleted h edit descriptors format 9h1goodbye deleted computed go statement go index obsolete statement functions foil x y = x2 + 2xy + y2 obsolete data statements among executable statements x= data b c / / obsolete character form character declaration character8 string use character8 obsolete assumed character length functions character string obsolete fixed form source code column contains c for comments column for continuation obsolete hello world example program helloworld print hello world end program helloworld fortran main article fortran language features fortran published officially iso/iec 1539-11997 was minor revision mostly resolve some outstanding issues from fortran standard nevertheless fortran also added number extensions notably from high performance fortran specification forall nested where constructs aid vectorization user-defined pure elemental procedures default initialization derived type components including pointer initialization expanded ability use initialization expressions for data objects initialization pointers null clearly defined that allocatable arrays are automatically deallocated when they go out scope number intrinsic functions were extended for example dim argument was added maxloc intrinsic several features noted fortran be obsolescent were removed from fortran do statements using real double precision index variables branching end if statement from outside its block pause statement assign assigned go statement assigned format specifiers h edit descriptor important supplement fortran was iso technical report tr-15581 enhanced data type facilities informally known allocatable tr this specification defined enhanced use allocatable arrays prior availability fully fortran 2003-compliant fortran compilers such uses include allocatable arrays derived type components procedure dummy argument lists function return values allocatable arrays are preferable pointer-based arrays because allocatable arrays are guaranteed by fortran be deallocated automatically when they go out scope eliminating possibility memory leakage addition elements allocatable arrays are contiguous aliasing not issue for optimization array references allowing compilers generate faster code than case pointers another important supplement fortran was iso technical report tr-15580 floating-point exception handling informally known ieee tr this specification defined support for ieee floating-point arithmetic floating point exception handling conditional compilation varying length strings addition mandatory base language defined iso/iec 1539-1 fortran language also includes two optional modules varying length character strings iso/iec 1539-2 conditional compilation iso/iec 1539-3 which together compose multi-part international standard iso/iec according standards developers optional parts describe self-contained features which have been requested by substantial body users and/or implementors but which are not deemed be sufficient generality for them be required all standard-conforming fortran compilers nevertheless if standard-conforming fortran does provide such options then they must be provided accordance with description those facilities appropriate part standard fortran fortran officially published iso/iec 1539-12004 major revision introducing many new features comprehensive summary new features fortran available at fortran working group iso/iec jtc1/sc22/wg5 official web site from that article major enhancements for this revision include derived type enhancements parameterized derived types improved control accessibility improved structure constructors finalizers object-oriented programming support type extension inheritance polymorphism dynamic type allocation type-bound procedures providing complete support for abstract data types data manipulation enhancements allocatable components incorporating tr deferred type parameters volatile attribute explicit type specification array constructors allocate statements pointer enhancements extended initialization expressions enhanced intrinsic procedures input/output enhancements asynchronous transfer stream access user specified transfer operations for derived types user specified control rounding during format conversions named constants for preconnected units flush statement regularization keywords access error messages procedure pointers support for ieee floating-point arithmetic floating point exception handling incorporating tr interoperability with c programming language support for international usage access iso 4-byte characters choice decimal comma numeric formatted input/output enhanced integration with host operating system access command line arguments environment variables processor error messages important supplement fortran was iso technical report tr-19767 enhanced module facilities fortran this report provided submodules which make fortran modules more similar modula-2 modules they are similar ada private child subunits this allows specification implementation module be expressed separate program units which improves packaging large libraries allows preservation trade secrets while publishing definitive interfaces prevents compilation cascades fortran most recent standard iso/iec 1539-12010 informally known fortran was approved september with fortran this minor upgrade incorporating clarifications corrections fortran well introducing select few new capabilities new capabilities include submodules – additional structuring facilities for modules supersedes iso/iec tr coarray fortran – parallel execution model do concurrent construct – for loop iterations with no interdependencies contiguous attribute – specify storage layout restrictions block construct – can contain declarations objects with construct scope recursive allocatable components – alternative recursive pointers derived types final draft international standard fdis available document n1830 important supplement fortran iso technical specification ts on further interoperability fortran with c which has been submitted iso may for approval specification adds support for accessing array descriptor from c allows ignoring type rank arguments fortran next revision language fortran intended be minor revision planned for release mid-2018 currently planned include further interoperability between fortran c additional parallel features removal simple deficiencies discrepancies between existing facilities fortran supercomputers although journal article by authors basic already described fortran old-fashioned since fortran has been use for many decades there vast body fortran software daily use throughout scientific engineering communities jay pasachoff wrote that physics astronomy students simply have learn fortran so much exists fortran that seems unlikely that scientists will change pascal modula-2 whatever cecil e leith called fortran mother tongue scientific computing adding that its replacement by any other possible language may remain forlorn hope primary language for some most intensive supercomputing tasks such astronomy weather climate modeling numerical linear algebra lapack numerical libraries imsl nag structural engineering hydrological modeling optimization satellite simulation data analysis computational fluid dynamics computational chemistry computational economics computational physics many floating-point benchmarks gauge performance new computer processors – such cfp2006 floating-point component spec cpu2006 benchmarks – are written fortran on other hand more modern code generally uses large program libraries such petsc trilinos for linear algebra capabilities metis for graph partitioning dealii fenics for mesh finite element support other generic libraries since late 1990s almost all most widely used support libraries have been written c more often c++ consequently growing fraction scientific code also written these languages for this reason facilities for interoperation with c were added fortran enhanced by iso/iec technical specification which will be incorporated into fortran this shift also evident selection applications between spec cpu spec cpu floating point benchmarks language features precise characteristics syntax fortran are discussed fortran language features portability this section does not cite any sources please help improve this section by adding citations reliable sources unsourced material may be challenged removed september learn how when remove this template message portability was problem early days because there was no agreed standard – not even ibm's reference manual – computer companies vied differentiate their offerings from others by providing incompatible features standards have improved portability standard provided reference syntax semantics but vendors continued provide incompatible extensions although careful programmers were coming realize that use incompatible extensions caused expensive portability problems were therefore using programs such pfort verifier was not until after standard when national bureau standards now nist published fips pub that processors purchased by us government were required diagnose extensions standard rather than offer two processors essentially every compiler eventually had at least option diagnose extensions incompatible extensions were not only portability problem for numerical calculations important take account characteristics arithmetic this was addressed by fox et al context standard by port library ideas therein became widely used were eventually incorporated into standard by way intrinsic inquiry functions widespread now almost universal adoption ieee standard for binary floating-point arithmetic has essentially removed this problem access computing environment eg program's command line environment variables textual explanation error conditions remained problem until was addressed by standard large collections library software that could be described being loosely related engineering scientific calculations such graphics libraries have been written c therefore access them presented portability problem this has been addressed by incorporation c interoperability into standard now possible relatively easy write entirely portable program fortran even without recourse preprocessor variants fortran fortran was marketed by data general corp late 1970s early 1980s for nova eclipse mv line computers had optimizing compiler that was quite good for minicomputers its time language most closely resembles fortran name pun on earlier fortran iv fortran v fortran v was distributed by control data corporation for cdc series language was based upon fortran iv univac also offered compiler for series known fortran v spinoff univac fortran v was athena fortran fortran fortran visual fortran was licensed compaq by microsoft they have licensed compaq visual fortran have provided visual studio environment interface for compaq v6 up v61 specific variants vendors high-performance scientific computers eg burroughs control data corporation cdc cray honeywell ibm texas instruments univac added extensions fortran take advantage special hardware features such instruction cache cpu pipelines vector arrays for example one ibm's fortran compilers h extended iup had level optimization which reordered machine code instructions keep multiple internal arithmetic units busy simultaneously another example cfd special variant fortran designed specifically for illiac iv supercomputer running at nasa's ames research center ibm research labs also developed extended fortran-based language called vectran for processing vectors matrices object-oriented fortran was object-oriented extension fortran which data items can be grouped into objects which can be instantiated executed parallel was available for sun iris ipsc ncube but no longer supported such machine-specific extensions have either disappeared over time have had elements incorporated into main standards major remaining extension openmp which cross-platform extension for shared memory programming one new extension coarray fortran intended support parallel programming for transit for ibm for transit was name reduced version ibm fortran language which was implemented for ibm using translator program developed at carnegie late 1950s following comment appears ibm reference manual for transit automatic coding system c28-4038 copyright by ibm fortran system was designed for more complex machine than consequently some statements found fortran programmer's reference manual are not acceptable for transit system addition certain restrictions fortran language have been added however none these restrictions make source program written for for transit incompatible with fortran system for permissible statements were arithmetic assignment statements eg = b go n go n1 n2 nm i if n1 n2 n3 pause stop do n i = m1 m2 continue end read n list punch n list dimension v v v equivalence abc dc up ten subroutines could be used one program for transit statements were limited columns through only punched cards were used for input output on ibm three passes were required translate source code language then compile statements into soap assembly language finally produce object program which could then be loaded into machine run program using punched cards for data input outputting results onto punched cards two versions existed for 650s with word memory drum for transit i s for transit ii latter for machines equipped with indexing registers automatic floating point decimal bi-quinary arithmetic appendix manual included wiring diagrams for ibm card reader/punch control panel fortran-based languages prior fortran number preprocessors were commonly used provide friendlier language with advantage that preprocessed code could be compiled on any machine with standard fortran compiler these preprocessors would typically support structured programming variable names longer than six characters additional data types conditional compilation even macro capabilities popular preprocessors included flecs iftran mortran sftran s-fortran ratfor ratfiv ratfor ratfiv for example implemented c-like language outputting preprocessed code standard fortran despite advances fortran language preprocessors continue be used for conditional compilation macro substitution one earliest versions fortran introduced 60's was popularly used colleges universities developed supported distributed by university waterloo watfor was based largely on fortran iv watfor student could submit their batch fortran job if there were no syntax errors program would move straight execution this simplification allowed students concentrate on their program's syntax semantics execution logic flow rather than dealing with submission job control language jcl compile/link-edit/execution successive processes other complexities mainframe/minicomputer environment down side this simplified environment was that watfor was not good choice for programmers needing expanded abilities their host processors eg watfor typically had very limited access i/o devices watfor was succeeded by watfiv its later versions program s=0 i=1n s=s+1 stop i s='s' stop line programing lrltran was developed at lawrence radiation laboratory provide support for vector arithmetic dynamic storage among other extensions support systems programming distribution included ltss operating system fortran-95 standard includes optional part which defines optional conditional compilation capability this capability often referred coco many fortran compilers have integrated subsets c preprocessor into their systems simscript application specific fortran preprocessor for modeling simulating large discrete systems f programming language was designed be clean subset fortran that attempted remove redundant unstructured deprecated features fortran such equivalence statement f retains array features added fortran removes control statements that were made obsolete by structured programming constructs added both fortran fortran f described by its creators compiled structured array programming language especially well suited education scientific computing lahey fujitsu teamed up create fortran for microsoft net framework silverfrost ftn95 also capable creating net code code examples for more details on this topic see wikibooksfortran/fortran examples following program illustrates dynamic memory allocation array-based operations two features introduced with fortran particularly noteworthy absence do loops if/then statements manipulating array mathematical operations are applied array whole also apparent use descriptive variable names general code formatting that conform with contemporary programming style this example computes average over data entered interactively program average read some numbers take average written if there are no data points average zero returned while this may not be desired behavior keeps this example simple implicit none real dimension allocatable points integer numberofpoints real averagepoints=0 positiveaverage=0 negativeaverage=0 write input number points average read numberofpoints allocate pointsnumberofpoints write enter points average read points take average by summing points dividing by numberofpoints if numberofpoints > averagepoints = sumpoints / numberofpoints now form average over positive negative points only if countpoints > > then positiveaverage = sumpoints points > / countpoints > end if if countpoints then negativeaverage = sumpoints points pdf cray inc retrieved fortran american heritage dictionary english language ed free dictionary retrieved john backus history fortran i ii iii pdf softwarepreservationorg retrieved november eugene loh june ideal hpc programming language queue association computing machines hpl – portable implementation high-performance linpack benchmark for distributed-memory computers retrieved softwarepreservationorg retrieved september mindell david digital apollo mit press cambridge ma p99 fortran i compiler fortran i compiler was first major project code optimization tackled problems crucial importance whose general solution was important research focus compiler technology for several decades many classical techniques for compiler analysis optimization can trace their origins inspiration fortran i compiler fortran creator john backus dies msnbccom retrieved november backus j w h stern i ziller r hughes r nutt r j beeber s best r goldberg l m haibt h l herrick r nelson d sayre p b sheridan fortran automatic coding system western joint computer conference techniques for reliability los angeles california institute radio engineers american institute electrical engineers acm 188–198 doi 101145/14555671455599 cs1 maint multiple names authors list link online at reference manual ibm data processing system ibm a22-6528-3 fortran ii user manual pdf bitsaversorg retrieved november ibibilioorg ibiblioorg retrieved september haines l h serial compilation fortran compiler ibm systems journal 73–80 doi101147/sj410073 this article was reprinted edited both editions lee john n anatomy compiler van nostrand reinhold mccracken daniel d preface guide fortran iv programming new york wiley p v isbn 0-471-58281-6 fortran compilers loaders chilton-programmingorguk retrieved november mil-std-1753 dod supplement x39-1978 united states government printing office posix 10039-1992 posix fortran language interface – part binding for system application program interface api ieee retrieved november fortran variable declarations compaq fortran texas huston us compaq computer corporation retrieved november form character obsolescent feature fortran fortran reference gnuorg retrieved may fortran 2003- last working draft gnuorg retrieved may fortran working group wg5 may also be downloaded pdf file gzipped postscript file ftpnagcouk n1836 summary voting/table replies on iso/iec fdis 1539-1 information technology – programming languages – fortran – part base language fortran – last working draft pdf gnuorg retrieved may n1830 information technology – programming languages – fortran – part base language iso page iso/iec dts further interoperability fortran with c draft technical specification ts doctor fortran one door closes softwareintelcom retrieved september doctor fortran goes dutch fortran softwareintelcom retrieved november f2015 working document august kemeny john g kurtz thomas e october dartmouth time-sharing science 223–228 phillips lee scientific computing's future can any coding language top 1950s behemoth ars technica retrieved may pasachoff jay m april scientists fortran vs modula-2 byte letter p retrieved february galperin boris large eddy simulation complex engineering geophysical flows london cambridgey p isbn 0-521-43009-7 healy mjr towards fortran vi advanced scientific fortran by cdc cdc pp 169–172 retrieved april third party release notes for fortran v61 cs-softwarecom march retrieved november internal translator compiler for ibm by j perlis j w smith h r van zoeren computation center carnegie institute technology f programming language homepage fortrancom retrieved november fortran for net language system ftn95 fortran for windows silverfrostcom retrieved november x3j3 post-meeting distribution for meeting held at brookhaven national laboratory november obliteration o computer weekly march rules for data typing fortran language reference docsoraclecom retrieved further reading articles allen fe september history language processor technology ibm pdf ibm journal research development ibm doi 101147/rd2550535 backus j w h stern i ziller r hughes r nutt r j beeber s best r goldberg l m haibt h l herrick r nelson d sayre p b sheridan ziller i hughes r nutt r beeber r j best s goldberg r haibt l m herrick h l nelson r sayre d sheridan p b fortran automatic coding system western joint computer conference techniques for reliability los angeles california institute radio engineers american institute electrical engineers acm 188–198 doi101145/14555671455599 cs1 maint multiple names authors list link chivers ian d sleightholme jane compiler support for fortran & standards acm sigplan fortran forum acm 26–28 doi101145/15207521520755 issn 1061-7264 pigott diarmuid fortran – backus et al high-level compiler computer language encyclopedia computer languages murdoch university archived from original on october retrieved may roberts mark l griffiths peter d design considerations for ibm personal computer professional fortran optimizing compiler pdf ibm systems journal ibm 49–60 doi 101147/sj2410049 core language standards ansi x39-1966 usa standard fortran pdf american national standards institute informally known fortran ansi x39-1978 american national standard – programming language fortran american national standards institute also known iso 1539-1980 informally known fortran ansi x3198-1992 r1997 / iso/iec american national standard – programming language fortran extended american national standards institute / iso/iec informally known fortran iso/iec 1539-11997 information technology – programming languages – fortran – part base language pdf informally known fortran there are further two parts this standard part has been formally adopted by ansi iso/iec 1539-12004 information technology – programming languages – fortran – part base language pdf informally known fortran iso/iec 1539-12010 final draft international standard information technology – programming languages – fortran – part base language pdf informally known fortran related standards kneis wilfried october draft standard industrial real-time fortran acm sigplan notices acm press 45–60 doi 101145/947864947868 issn 0362-1340 iso 8651-11988 information processing systems – computer graphics – graphical kernel system gks language bindings – part fortran geneva switzerland iso other reference material ecma standard on fortran pdf european computer manufacturers association april retrieved fortran reference manual pdf sun microsystems inc retrieved fortran coding form pdf ibm retrieved ibm system/360 system/370 fortran iv language pdf international business machines may retrieved goerz michael modern fortran reference card pdf retrieved textbooks adams jeanne c brainerd walter s hendrickson richard maine richard e martin jeanne t smith brian t fortran handbook 1st ed springer isbn 978-1-84628-378-9 akin ed object oriented programming via fortran 90/95 1st ed cambridge university press isbn 0-521-52408-3 chapman stephen j fortran 95/2003 for scientists engineers 3rd ed mcgraw-hill isbn 978-0-07-319157-7 chivers ian sleightholme jane introduction programming with fortran 3rd ed springer isbn 978-3-319-17700-7 etter d m structured fortran for engineers scientists 3rd ed benjamin/cummings publishing company inc isbn 0-8053-0051-1 ellis t m r phillips ivor r lahey thomas m fortran programming 1st ed addison wesley isbn 0-201-54446-6 kupferschmid michael classical fortran programming for engineering scientific applications marcel dekker crc press isbn 0-8247-0802-4 mccracken daniel d guide fortran programming new york wiley lccn metcalf michael john reid malcolm cohen modern fortran explained oxford university press isbn 0-19-960142-9 nyhoff larry sanford leestma fortran for engineers scientists with introduction fortran 4th ed prentice hall isbn 0-13-363003-x page clive g professional programmer's guide fortran77 june ed london pitman isbn 0-273-02856-1 retrieved may press william h numerical recipes fortran art parallel scientific computing cambridge uk cambridge university press isbn 0-521-57439-0 sleighthome jane chivers ian david interactive fortran hands-on approach computers their applications 2nd ed chichester e horwood isbn 0-13-466764-6 external links wikibooks has book on topic fortran wikiquote has quotations related fortran iso/iec jtc1/sc22/wg5 – official home fortran standards fortran standards documents – gfortran standards history fortran fortran ii – computer history museum fortran compilerator – online fortran f compiler for small experiments tinkering v t e ibm history history ibm mergers acquisitions think motto operating systems products cell microprocessor mainframe personal computer ibm power systems information management software lotus software rational software spss ilog tivoli software service automation manager websphere alphaworks criminal reduction utilising statistical history mashup center purequery redbooks flashsystem fortran connections business entities cloud computing global services international subsidiaries jstart kenexa research weather company facilities towers o rené-lévesque montreal qc o one atlantic center atlanta ga software labs o rome software lab o toronto software lab ibm buildings o north wabash chicago il o johannesburg o seattle research labs o africa o almaden o austin laboratory o australia o brazil o china laboratory o haifa laboratory o india laboratory o ireland o thomas j watson center new york o tokyo o zurich laboratory facilities o hakozaki facility o yamato facility cambridge scientific center ibm hursley canada head office building ibm rochester somers office complex initiatives academy technology centers for advanced studies cascon deep thunder ibm fellow pulse conference great mind challenge developerworks develothon linux technology center ibm virtual universe community smarter planet world community grid inventions automated teller machine electronic keypunch hard disk drive floppy disk dram relational model selectric typewriter financial swaps universal product code magnetic stripe card sabre airline reservation system scanning tunneling microscope terminology globally integrated enterprise commercial processing workload consumability technology dividend e-business ceos thomas j watson 1914–1956 thomas watson jr 1956–1971 t vincent learson 1971–1973 frank t cary 1973–1981 john r opel 1981–1985 john fellows akers 1985–1993 louis v gerstner jr 1993–2002 samuel j palmisano 2002–2011 ginni rometty 2012–present board directors alain belda william r brody kenneth chenault michael l eskew david farr shirley ann jackson andrew n liveris james mcnerney james w owens samuel j palmisano virginia m rometty joan e spero sidney taurel lorenzo zambrano other boy his atom common public license/ibm public license customer engineer deep blue deep thought dynamic infrastructure guide international ibm holocaust ibm international chess tournament lucifer cipher mathematica share computing scicomp watson v t e programming languages comparison timeline history assembly basic c c++ c cobol fortran go haskell java javascript js lisp lua objective-c pascal perl php python ruby shell smalltalk swift visual basic net vbnet more category comparison lists o alphabetical o categorical o generational o non-english-based retrieved from https//enwikipediaorg/w/indexphptitle=fortran&oldid=751639819 categories fortran fortran programming language family american inventions array programming languages computer standards numerical programming languages object-oriented programming languages procedural programming languages programming languages statically typed programming languages unix programming tools programming languages created computer-related introductions programming languages with iso standard hidden categories cs1 maint multiple names authors list all articles with dead external links articles with dead external links from january all articles lacking reliable references articles lacking reliable references from august use dmy dates from january pages using deprecated image syntax all articles with unsourced statements articles with unsourced statements from september articles with unsourced statements from october articles needing additional references from september all articles needing additional references articles with unsourced statements from january articles with unsourced statements from july articles with dead external links from may navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version other projects wikimedia commons wikibooks wikiquote wikiversity languages العربية azərbaycanca বাংলা беларуская български bosanski català чӑвашла čeština dansk deutsch eesti ελληνικά español esperanto euskara فارسی français gaeilge 한국어 हिन्दी hrvatski bahasa indonesia interlingua italiano עברית қазақша kurdî latina latviešu lietuvių magyar മലയാളം मराठी bahasa melayu mirandés монгол မြန်မာဘာသာ nederlands 日本語 norsk bokmål norsk nynorsk occitan polski português română русский саха тыла shqip simple english slovenčina slovenščina کوردیی ناوەندی српски / srpski srpskohrvatski / српскохрватски suomi svenska தமிழ் taqbaylit తెలుగు ไทย тоҷикӣ türkçe українська tiếng việt 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 