theory computation from wikipedia free encyclopedia jump navigation search this article needs additional citations for verification please help improve this article by adding citations reliable sources unsourced material may be challenged removed september learn how when remove this template message artistic representation turing machine turing machines are frequently used theoretical models for computing theoretical computer science mathematics theory computation branch that deals with how efficiently problems can be solved on model computation using algorithm field divided into three major branches automata theory language computability theory computational complexity theory which are linked by question what are fundamental capabilities limitations computers order perform rigorous study computation computer scientists work with mathematical abstraction computers called model computation there are several models use but most commonly examined turing machine computer scientists study turing machine because simple formulate can be analyzed used prove results because represents what many consider most powerful possible reasonable model computation see church–turing thesis might seem that potentially infinite memory capacity unrealizable attribute but any decidable problem solved by turing machine will always require only finite amount memory so principle any problem that can be solved decided by turing machine can be solved by computer that has finite amount memory contents history branches o automata theory o formal language theory o computability theory o computational complexity theory models computation references further reading external links history theory computation can be considered creation models all kinds field computer science therefore mathematics logic are used last century became independent academic discipline was separated from mathematics some pioneers theory computation were alonzo church kurt gödel alan turing stephen kleene john von neumann claude shannon branches automata theory main article automata theory grammar languages automaton production rules constraints type-0 recursively enumerable turing machine α → β {\displaystyle \alpha \rightarrow \beta } no restrictions type-1 context-sensitive linear-bounded non-deterministic turing machine α β → α γ β {\displaystyle \alpha a\beta \rightarrow \alpha \gamma \beta } type-2 context-free non-deterministic pushdown automaton → γ {\displaystyle a\rightarrow \gamma } type-3 regular finite state automaton → {\displaystyle a\rightarrow a} → b {\displaystyle a\rightarrow ab} automata theory study abstract machines more appropriately abstract 'mathematical' machines systems computational problems that can be solved using these machines these abstract machines are called automata automata comes from greek word αυτόματα which means that something doing something by itself automata theory also closely related formal language theory automata are often classified by class formal languages they are able recognize automaton can be finite representation formal language that may be infinite set automata are used theoretical models for computing machines are used for proofs about computability formal language theory main article formal language set inclusions described by chomsky hierarchy language theory branch mathematics concerned with describing languages set operations over alphabet closely linked with automata theory automata are used generate recognize formal languages there are several classes formal languages each allowing more complex language specification than one before ie chomsky hierarchy each corresponding class automata which recognizes because automata are used models for computation formal languages are preferred mode specification for any problem that must be computed computability theory main article computability theory computability theory deals primarily with question extent which problem solvable on computer statement that halting problem cannot be solved by turing machine one most important results computability theory example concrete problem that both easy formulate impossible solve using turing machine much computability theory builds on halting problem result another important step computability theory was rice's theorem which states that for all non-trivial properties partial functions undecidable whether turing machine computes partial function with that property computability theory closely related branch mathematical logic called recursion theory which removes restriction studying only models computation which are reducible turing model many mathematicians computational theorists who study recursion theory will refer computability theory computational complexity theory main article computational complexity theory representation relation among complexity classes complexity theory considers not only whether problem can be solved at all on computer but also how efficiently problem can be solved two major aspects are considered time complexity space complexity which are respectively how many steps does take perform computation how much memory required perform that computation order analyze how much time space given algorithm requires computer scientists express time space required solve problem function size input problem for example finding particular number long list numbers becomes harder list numbers grows larger if we say there are n numbers list then if list not sorted indexed any way we may have look at every number order find number we're seeking we thus say that order solve this problem computer needs perform number steps that grows linearly size problem simplify this problem computer scientists have adopted big o notation which allows functions be compared way that ensures that particular aspects machine's construction do not need be considered but rather only asymptotic behavior problems become large so our previous example we might say that problem requires o n {\displaystyle on} steps solve perhaps most important open problem all computer science question whether certain broad class problems denoted np can be solved efficiently this discussed further at complexity classes p np p versus np problem one seven millennium prize problems stated by clay mathematics institute official problem description was given by turing award winner stephen cook models computation main article model computation aside from turing machine other equivalent see church–turing thesis models computation are use lambda calculus computation consists initial lambda expression two if you want separate function its input plus finite sequence lambda terms each deduced from preceding term by one application beta reduction combinatory logic concept which has many similarities λ {\displaystyle \lambda } -calculus but also important differences exist eg fixed point combinator y has normal form combinatory logic but not λ {\displaystyle \lambda } -calculus combinatory logic was developed with great ambitions understanding nature paradoxes making foundations mathematics more economic conceptually eliminating notion variables thus clarifying their role mathematics μ-recursive functions computation consists mu-recursive function ie its defining sequence any input values sequence recursive functions appearing defining sequence with inputs outputs thus if defining sequence recursive function f x {\displaystyle fx} functions g x {\displaystyle gx} h x y {\displaystyle hxy} appear then terms form 'g5=7' 'h32=10' might appear each entry this sequence needs be application basic function follow from entries above by using composition primitive recursion μ recursion for instance if f x = h x g x {\displaystyle fx=hxgx} then for 'f5=3' appear terms like 'g5=6' 'h56=3' must occur above computation terminates only if final term gives value recursive function applied inputs markov algorithm string rewriting system that uses grammar-like rules operate on strings symbols register machine theoretically interesting idealization computer there are several variants most them each register can hold natural number unlimited size instructions are simple few number eg only decrementation combined with conditional jump incrementation exist halting lack infinite dynamically growing external store seen at turing machines can be understood by replacing its role with gödel numbering techniques fact that each register holds natural number allows possibility representing complicated thing eg sequence matrix etc by appropriate huge natural number — unambiguity both representation interpretation can be established by number theoretical foundations these techniques addition general computational models some simpler computational models are useful for special restricted applications regular expressions for example specify string patterns many contexts from office productivity software programming languages another formalism mathematically equivalent regular expressions finite automata are used circuit design some kinds problem-solving context-free grammars specify programming language syntax non-deterministic pushdown automata are another formalism equivalent context-free grammars primitive recursive functions are defined subclass recursive functions different models computation have ability do different tasks one way measure power computational model study class formal languages that model can generate such way chomsky hierarchy languages obtained references michael sipser introduction theory computation 3rd cengage learning isbn 978-1-133-18779-0 central areas theory computation automata computability complexity page andrew hodges alan turing enigma centenary edition princeton university press isbn 978-0-691-15564-7 rabin michael o june turing church gödel computability complexity randomization personal view donald monk mathematical logic springer-verlag isbn hopcroft john e jeffrey d ullman introduction automata theory languages computation 3rd ed reading ma addison-wesley isbn 978-0-321-45536-9 chomsky hierarchy three models for description language information theory ire transactions on ieee 113–124 doi 101109/tit19561056813 retrieved january alan turing on computable numbers with application entscheidungsproblem proceedings london mathematical society ieee 230–265 doi 101112/plms/s2-421230 retrieved january henry gordon rice classes recursively enumerable sets their decision problems transactions american mathematical society american mathematical society 358–366 doi102307/1990888 jstor martin davis undecidable basic papers on undecidable propositions unsolvable problems computable functions dover ed dover publications isbn 978-0486432281 further reading textbooks aimed at computer scientists there are many textbooks this area this list by necessity incomplete hopcroft john e jeffrey d ullman introduction automata theory languages computation 3rd ed reading ma addison-wesley isbn 978-0-321-45536-9 one standard references field michael sipser introduction theory computation 3rd ed cengage learning isbn 978-1-133-18779-0 eitan gurari introduction theory computation computer science press isbn 0-7167-8182-4 hein james l theory computation sudbury ma jones & bartlett isbn 978-0-86720-497-1 gentle introduction field appropriate for second-year undergraduate computer science students taylor r gregory models computation formal languages new york oxford university press isbn 978-0-19-510983-2 unusually readable textbook appropriate for upper-level undergraduates beginning graduate students lewis f d essentials theoretical computer science textbook covering topics formal languages automata grammars emphasis appears be on presenting overview results their applications rather than providing proofs results martin davis ron sigal elaine j weyuker computability complexity languages fundamentals theoretical computer science 2nd ed academic press isbn 0-12-206382-1 covers wider range topics than most other introductory books including program semantics quantification theory aimed at graduate students books on computability theory from wider mathematical perspective hartley rogers jr theory recursive functions effective computability mit press isbn 0-262-68052-1 s barry cooper computability theory chapman hall/crc isbn 1-58488-237-9 carl h smith recursive introduction theory computation springer isbn 0-387-94332-3 shorter textbook suitable for graduate students computer science historical perspective richard l epstein walter carnielli computability computable functions logic foundations mathematics with computability timeline 2nd ed wadsworth/thomson learning isbn 0-534-54644-7 external links theory computation at mit theory computation at harvard computability logic - theory interactive computation main web source on this subject v t e areas mathematics outline topic lists areas algebra o elementary o linear o multilinear o abstract arithmetic / number theory calculus / analysis category theory combinatorics computation control theory differential equations / dynamical systems functional analysis game theory geometry o discrete o algebraic o differential o finite graph theory information theory lie theory mathematics art mathematical logic mathematical physics mathematical statistics numerical analysis optimization order theory probability recreational mathematics representation theory set theory statistics topology trigonometry divisions pure applied discrete computational category portal retrieved from https//enwikipediaorg/w/indexphptitle=theoryofcomputation&oldid=738223425 categories theory computation hidden categories articles needing additional references from september all articles needing additional references navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version other projects wikimedia commons languages العربية bosanski ελληνικά español esperanto فارسی gĩkũyũ 한국어 hrvatski bahasa indonesia italiano bahasa melayu 日本語 polski português русский simple english slovenčina српски / srpski srpskohrvatski / српскохрватски suomi tagalog ไทย тоҷикӣ türkçe українська اردو 中文 edit links this page was last modified on september at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 