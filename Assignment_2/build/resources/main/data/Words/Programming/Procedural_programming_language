procedural programming from wikipedia free encyclopedia   redirected from procedural programming language jump navigation search this article about computer programming paradigm for method algorithmic content creation see procedural generation this article needs additional citations for verification please help improve this article by adding citations reliable sources unsourced material may be challenged removed april learn how when remove this template message programming paradigms action agent-oriented array-oriented automata-based concurrent computing o relativistic programming data-driven declarative contrast imperative o constraint + constraint logic concurrent constraint logic o dataflow + flow-based + cell-oriented spreadsheets + reactive o functional + functional logic + purely functional o logic + abductive logic + answer set + concurrent logic + functional logic + inductive logic dynamic end-user programming event-driven o service-oriented o time-driven expression-oriented feature-oriented function-level contrast value-level generic imperative contrast declarative o literate o procedural inductive programming language-oriented o natural language programming o discipline-specific o domain-specific o grammar-oriented + dialecting o intentional metaprogramming o automatic o reflective + attribute-oriented o homoiconic o template + policy-based non-structured contrast structured o array nondeterministic parallel computing o process-oriented point-free style o concatenative semantic structured contrast non-structured o block-structured o modular contrast monolithic o object-oriented + actor-based + class-based + concurrent + prototype-based + by separation concerns aspect-oriented role-oriented subject-oriented o recursive value-level contrast function-level probabilistic concept v t e procedural programming programming paradigm derived from structured programming based upon concept procedure call procedures also known routines subroutines functions not be confused with mathematical functions but similar those used functional programming simply contain series computational steps be carried out any given procedure might be called at any point during program's execution including by other procedures itself procedural programming languages include c go fortran pascal ada basic computer processors provide hardware support for procedural programming through stack register instructions for calling procedures returning from them hardware support for other types programming possible but no attempt was commercially successful for example lisp machines java processors contents procedures modularity comparison with imperative programming comparison with object-oriented programming comparison with functional programming comparison with logic programming see also references external links procedures modularity main article modular programming modularity generally desirable especially large complicated programs inputs are usually specified syntactically form arguments outputs delivered return values scoping another technique that helps keep procedures modular prevents procedure from accessing variables other procedures vice versa including previous instances itself without explicit authorization less modular procedures often used small quickly written programs tend interact with large number variables execution environment which other procedures might also modify because ability specify simple interface be self-contained be reused procedures are convenient vehicle for making pieces code written by different people different groups including through programming libraries comparison with imperative programming procedural programming languages are also imperative languages because they make explicit references state execution environment this could be anything from variables which may correspond processor registers something like position turtle logo programming language often terms procedural programming imperative programming are used synonymously however procedural programming relies heavily on blocks scope whereas imperative programming whole may may not have such features such procedural languages generally use reserved words that act on blocks such if while for implement control flow whereas non-structured imperative languages use goto statements branch tables for same purpose comparison with object-oriented programming focus procedural programming break down programming task into collection variables data structures subroutines whereas object-oriented programming break down programming task into objects that expose behavior methods data members attributes using interfaces most important distinction that while procedural programming uses procedures operate on data structures object-oriented programming bundles two together so object which instance class operates on its own data structure nomenclature varies between two although they have similar semantics procedural object-oriented procedure method record object module class procedure call message comparison with functional programming principles modularity code reuse practical functional languages are fundamentally same procedural languages since they both stem from structured programming so for example procedures correspond functions both allow reuse same code various parts programs at various points its execution by same token procedure calls correspond function application functions their invocations are modularly separated from each other same manner by use function arguments return values variable scopes main difference between styles that functional programming languages remove at least deemphasize imperative elements procedural programming feature set functional languages therefore designed support writing programs much possible terms pure functions whereas procedural languages model execution program sequence imperative commands that may implicitly alter shared state functional programming languages model execution evaluation complex expressions that only depend on each other terms arguments return values for this reason functional programs can have freer order code execution languages may offer little control over order which various parts program are executed for example arguments procedure invocation scheme are executed arbitrary order functional programming languages support heavily use first-class functions anonymous functions closures although these concepts are being included newer procedural languages functional programming languages tend rely on tail call optimization higher-order functions instead imperative looping constructs many functional languages however are fact impurely functional offer imperative/procedural constructs that allow programmer write programs procedural style combination both styles common for input/output code functional languages be written procedural style there do exist few esoteric functional languages like unlambda that eschew structured programming precepts for sake being difficult program therefore challenging these languages are exception common ground between procedural functional languages comparison with logic programming logic programming program set premises computation performed by attempting prove candidate theorems from this point view logic programs are declarative focusing on what problem rather than on how solve however backward reasoning technique implemented by sld resolution used solve problems logic programming languages such prolog treats programs goal-reduction procedures thus clauses form h - b1 … bn have dual interpretation both procedures show/solve h show/solve b1 … bn logical implications b1 … bn implies h experienced logic programmers use procedural interpretation write programs that are effective efficient they use declarative interpretation help ensure that programs are correct see also comparison programming paradigms declarative programming functional programming contrast imperative programming logic programming object-oriented programming programming paradigms programming language structured programming sql procedural extensions references welcome ieee xplore use procedural programming languages for controlling production systems ieeexploreieeeorg retrieved stevenson joseph procedural programming vs object oriented programming neonbrandcom retrieved external links procedural languages at dmoz v t e types programming languages actor-based array aspect-oriented class-based concatenative concurrent data-structured dataflow declarative domain-specific dynamic esoteric event-driven extensible functional imperative logic macro metaprogramming+multi-paradigm object-based object-oriented pipeline procedural prototype-based reflective rule-based scripting synchronous templating assembly compiled interpreted machine low-level high-level very high-level first generation second generation third generation fourth generation fifth generation non-english-based visual retrieved from https//enwikipediaorg/w/indexphptitle=proceduralprogramming&oldid=747593687 categories programming paradigms hidden categories articles needing additional references from april all articles needing additional references articles with dmoz links navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages العربية беларуская тарашкевіца‎ deutsch eesti ελληνικά español فارسی français gaeilge 한국어 italiano עברית bahasa melayu монгол 日本語 polski português română русский srpskohrvatski / српскохрватски suomi svenska தமிழ் türkçe українська tiếng việt 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 