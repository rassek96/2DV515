extensible programming from wikipedia free encyclopedia jump navigation search extensible programming term used computer science describe style computer programming that focuses on mechanisms extend programming language compiler runtime environment extensible programming languages supporting this style programming were active area work 1960s but movement was marginalized 1970s extensible programming has become topic renewed interest 21st century contents historical movement o character historical movement o death historical movement modern movement o extensible syntax o extensible compiler o extensible runtime o content separated from form o source language debugging support examples see also references external links o general o tools o programming languages with extensible syntax historical movement first paper usually associated with extensible programming language movement m douglas mcilroy's paper on macros for higher-level programming languages another early description principle extensibility occurs brooker morris's paper on compiler-compiler peak movement was marked by two academic symposia by survey article on movement by thomas standish was essentially post mortem forth programming language was exception but went essentially unnoticed character historical movement typically envisioned extensible programming language consisted base language providing elementary computing facilities meta-language capable modifying base language program then consisted meta-language modifications code modified base language most prominent language-extension technique used movement was macro definition grammar modification was also closely associated with movement resulting eventual development adaptive grammar formalisms lisp language community remained separate from extensible language community apparently because one researcher observed any programming language which programs data are essentially interchangeable can be regarded extendible language this can be seen very easily from fact that lisp has been used extendible language for years at conference simula was presented extensible programming language standish described three classes language extension which he called paraphrase orthophrase metaphrase otherwise paraphrase metaphrase being translation terms paraphrase defines facility by showing how exchange for something previously defined be defined examples he mentions macro definitions ordinary procedure definitions grammatical extensions data definitions operator definitions control structure extensions orthophrase adds features language that could not be achieved using base language such adding i/o system base language that previously had no i/o primitives extensions must be understood orthophrase relative some given base language since feature not defined terms base language must be defined terms some other language orthophrase corresponds modern notion plug-ins metaphrase modifies interpretation rules used for pre-existing expressions corresponds modern notion reflection death historical movement standish attributed failure extensibility movement difficulty programming successive extensions ordinary programmer might build single shell macros around base language but if second shell macros was be built around that programmer would have be intimately familiar with both base language first shell third shell would require familiarity with base both first second shells so on note that shielding programmer from lower-level details intent abstraction movement that supplanted extensibility movement despite earlier presentation simula extensible by standish's survey does not seem practice have included newer abstraction-based technologies though he used very general definition extensibility that technically could have included them history programming abstraction from invention computer then present day made no mention macros gave no hint that extensible languages movement had ever occurred macros were tentatively admitted into abstraction movement by late 1980s perhaps due advent hygienic macros by being granted pseudonym syntactic abstractions modern movement modern sense system that supports extensible programming will provide all features described below extensible syntax see also categoryextensible syntax programming languages this simply means that source languages be compiled must not be closed fixed static must be possible add new keywords concepts structures source languages languages which allow addition constructs with user defined syntax include camlp4 openc++ seed7 red rebol felix while acceptable for some fundamental intrinsic language features be immutable system must not rely solely on those language features must be possible add new ones extensible compiler extensible programming compiler not monolithic program that converts source code input into binary executable output compiler itself must be extensible point that really collection plugins that assist with translation source language input into anything for example extensible compiler will support generation object code code documentation re-formatted source code any other desired output architecture compiler must permit its users get inside compilation process provide alternative processing tasks at every reasonable step compilation process for just task translating source code into something that can be executed on computer extensible compiler should use plug-in component architecture for nearly every aspect its function determine which language language variant being compiled locate appropriate plug-in recognize validate that language use formal language specifications syntactically structurally validate arbitrary source languages assist with semantic validation arbitrary source languages by invoking appropriate validation plug-in allow users select from different kinds code generators so that resulting executable can be targeted for different processors operating systems virtual machines other execution environment provide facilities for error generation extensions allow new kinds nodes abstract syntax tree ast allow new values nodes ast allow new kinds edges between nodes support transformation input ast portions thereof by some external pass support translation input ast portions thereof into another form by some external pass assist with flow information between internal external passes they both transform translate ast into new asts other representations extensible runtime at runtime extensible programming systems must permit languages extend set operations that permits for example if system uses byte-code interpreter must allow new byte-code values be defined with extensible syntax acceptable for there be some smallish set fundamental intrinsic operations that are immutable however must be possible overload augment those intrinsic operations so that new additional behavior can be supported content separated from form extensible programming systems should regard programs data be processed those programs should be completely devoid any kind formatting information visual display editing programs users should be translation function supported by extensible compiler that translates program data into forms more suitable for viewing editing naturally this should be two-way translation this important because must be possible easily process extensible programs variety ways unacceptable for only uses source language input be editing viewing translation machine code arbitrary processing programs facilitated by de-coupling source input from specifications how should be processed formatted stored displayed edited etc source language debugging support extensible programming systems must support debugging programs using constructs original source language regardless extensions transformation program has undergone order make executable most notably cannot be assumed that only way display runtime data structures arrays debugger more correctly 'program inspector' must permit display runtime data forms suitable source language for example if language supports data structure for business process work flow must be possible for debugger display that data structure fishbone chart other form provided by plugin examples camlp4 felix seed7 red programming language rebol ruby programming language metaprogramming imp programming language openc++ xl programming language forth programming language scheme programming language lisp programming language lua racket programming language pl/i see also categoryextensible syntax programming languages adaptive grammar concept programming dialecting grammar-oriented programming language-oriented programming references b c standish thomas extensibility programming language design sigplan notices no july pp 18–21 gregory v wilson extensible programming for 21st century acm queue no dec/jan 2004–2005 sammet jean e programming languages history fundamentals prentice-hall section iii72 mcilroy md macro instruction extensions compiler languages communications acm no april pp 214–220 brooker ra morris d general translation program for phrase structure languages journal acm no january pp 1–10 paper was received christensen c shaw cj eds proceedings extensible languages symposium sigplan notices no august schuman sa ed proceedings international symposium on extensible languages sigplan notices no december harrison mc panel on concept extensibility pp 53–54 symposium guarino lr evolution abstraction programming languages cmu-cs-78-120 department computer science carnegie-mellon university pennsylvania may gabriel richard p ed draft report on requirements for common prototyping system sigplan notices no march pp 93ff zingaro daniel modern extensible languages sqrl report mcmaster university october page external links general greg wilson's article acm queue slashdot discussion modern extensible languages - paper from daniel zingaro tools metal — extensible programming compiler engine implementation xps — extensible programming system development mps — jetbrains metaprogramming system programming languages with extensible syntax openzz xtc — extensible c english-script nemerle macros boo syntactic macros stanford university intermediate format compiler seed7 - extensible programming language katahdin - programming language with syntax semantics that are mutable at runtime π - another programming language with extensible syntax implemented using earley parser v t e types programming languages actor-based array aspect-oriented class-based concatenative concurrent data-structured dataflow declarative domain-specific dynamic esoteric event-driven extensible functional imperative logic macro metaprogramming+multi-paradigm object-based object-oriented pipeline procedural prototype-based reflective rule-based scripting synchronous templating assembly compiled interpreted machine low-level high-level very high-level first generation second generation third generation fourth generation fifth generation non-english-based visual retrieved from https//enwikipediaorg/w/indexphptitle=extensibleprogramming&oldid=741558173 categories programming paradigms navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages add links this page was last modified on september at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 