rexx from wikipedia free encyclopedia   redirected from rexx jump navigation search this article needs additional citations for verification please help improve this article by adding citations reliable sources unsourced material may be challenged removed december learn how when remove this template message rexx paradigm multiparadigm procedural structured designed by mike cowlishaw developer mike cowlishaw ibm first appeared years ago stable release ansi x3274 / years ago typing discipline dynamic filename extensions cmd exec rexx rex major implementations vm/sp tso/e v2 saarexx arexx brexx kexx regina dialects netrexx object rexx now oorexx influenced by pl/i algol exec exec influenced netrexx object rexx rexx programming at wikibooks rexx restructured extended executor interpreted programming language developed at ibm by mike cowlishaw structured high-level programming language designed for ease learning reading proprietary open source rexx interpreters exist for wide range computing platforms compilers exist for ibm mainframe computers rexx widely used scripting macro language often used for processing data text generating reports these similarities with perl mean that rexx works well common gateway interface cgi programming indeed used for this purpose rexx primary scripting language some operating systems eg os/2 mvs vm amigaos also used internal macro language some other software such kedit zoc terminal emulator additionally rexx language can be used for scripting macros any program that uses windows scripting host activex scripting engines languages eg vbscript jscript if one rexx engines installed rexx supplied with vm/sp on up tso/e version on up os/2 later where officially named procedures language/2 amigaos version on up pc dos windows nt resource kit regina rexx scripts for os/2 share filename extension cmd with other scripting languages first line script specifies interpreter be used rexx macros for rexx-aware applications use extensions determined by application late 1980s rexx became common scripting language for ibm systems application architecture where was renamed saa procedure language rexx rexx script command sometimes referred exec nod rexx's role replacement for older exec command language on cp/cms vm/370 exec command language on vm/sp contents features history o spelling capitalization syntax o looping + conditional loops + repetitive loops + combined loops o conditionals o testing for multiple conditions o simple variables o compound variables o keyword instructions + parse + interpret + numeric + signal o error handling exceptions + conditions see also references further reading external links features rexx has following characteristics features simple syntax ability route commands multiple environments ability support functions procedures commands associated with specific invoking environment built-in stack with ability interoperate with host stack if there one small instruction set containing just two dozen instructions freeform syntax case-insensitive tokens including variable names character string basis dynamic data typing no declarations no reserved keywords except local context no include file facilities arbitrary numerical precision decimal arithmetic floating-point rich selection built-in functions especially string word processing automatic storage management crash protection content addressable data structures associative arrays straightforward access system commands facilities simple error-handling built-in tracing debugger few artificial limitations simplified i/o facilities unconventional operators only partly supports unix style command line parameters except specific implementations provides no basic terminal control part language except specific implementations provides no generic way include functions subroutines from external libraries except specific implementations rexx has just twenty-three largely self-evident instructions such call parse select with minimal punctuation formatting requirements essentially almost free-form language with only one data-type character string this philosophy means that all data are visible symbolic debugging tracing are simplified rexx's syntax looks similar pl/i but has fewer notations this makes harder parse by program but easier use except for cases where pl/i habits may lead surprises one rexx design goals was principle least astonishment history rexx was designed first implemented assembly language 'own-time' project between march mid-1982 by mike cowlishaw ibm originally scripting programming language replace languages exec exec was designed be macro scripting language for any system such rexx considered precursor tcl python rexx was also intended by its creator be simplified easier learn version pl/i programming language however some differences from pl/i may trip up unwary was first described public at share conference houston texas where customer reaction championed by ted johnston slac led being shipped ibm product over years ibm included rexx almost all its operating systems vm/cms mvs tso/e as/400 vse/esa aix pc dos os/2 has made versions available for novell netware windows java linux first non-ibm version was written for pc dos by charles daney 1984/5 first compiler version appeared written for cms by lundin woodruff other versions have also been developed for atari amigaos unix many variants solaris dec windows windows ce pocket pc dos palm os qnx os/2 linux beos epoc32/symbian atheos openvms apple macintosh mac os x amiga version rexx called arexx was included with amigaos onwards was popular for scripting well application control many amiga applications have arexx port built into them which allows control application from rexx one single rexx script could even switch between different rexx ports order control several running applications cathy dager slac organized first independent rexx symposium which led forming rexx language association symposia are held annually several freeware versions rexx are available two most widely used open-source ports appeared ian collier's rexx/imc for unix anders christensen's regina later adopted by mark hessling for windows unix brexx well known for wince pocket pc platforms has been back-ported vm/370 mvs os/2 had visual development system from watcom vx-rexx another dialect was vispro rexx from hockware portable rexx by kilowatt personal rexx by quercus are two rexx interpreters designed for ms-dos can course be run under windows well using command prompt since mid-1990s two newer variants rexx have appeared netrexx compiles java byte-code via java source code this has no reserved keywords at all uses java object model therefore not generally upwards-compatible with 'classic' rexx object rexx object-oriented generally upwards-compatible version rexx american national standards institute ansi published standard for rexx ansi x3274–1996 information technology – programming language rexx more than two dozen books on rexx have been published since rexx marked its 25th anniversary on march which was celebrated at rexx language association's 15th international rexx symposium böblingen germany may on october ibm announced their plan release their object rexx implementation's sources under common public license recent releases object rexx contain activex wsh scripting engine implementing this version rexx language on february first public release open object rexx oorexx was announced this product contains wsh scripting engine which allows for programming windows operating system applications with rexx same fashion which visual basic jscript are implemented by default wsh installation perl tcl python third-party scripting engines command-line rexx interpreter also installed with oorexx also possible run oorexxscript programs from command line by means cscript command wscript may also be run from command line invoking windows scripting host rexx/tk toolkit for graphics be used rexx programmes same fashion tcl/tk widely available rexx ide rxxxed has been developed for windows rxsock for network communication well other add-ons implementations regina rexx have been developed rexx interpreter for windows command line supplied most resource kits for various versions windows works under all them well ms-dos spelling capitalization originally language was called rex reformed executor extra x was added avoid collisions with other products' names rex was originally all uppercase because mainframe code was uppercase oriented style those days was have all-caps names partly because almost all code was still all-caps then for product became rexx both editions mike cowlishaw's book use all-caps expansion restructured extended executor was used for system product syntax this section written like manual guidebook please help rewrite this section from descriptive neutral point view remove advice instruction december learn how when remove this template message looping loop control structure rexx begins with do ends with end but comes several varieties netrexx uses keyword loop instead do for looping while oorexx treats loop do equivalent when looping conditional loops rexx supports variety traditional structured-programming loops while testing condition either before do while after do until list instructions are executed do while end do until end repetitive loops like most languages rexx can loop while incrementing index variable stop when limit reached do index = start end increment may be omitted defaults limit can also be omitted which makes loop continue forever rexx permits counted loops where expression computed at start loop instructions within loop are executed that many times do expression end rexx can even loop until program terminated do forever end program can break out current loop with leave instruction which normal way exit do forever loop can short-circuit with iterate instruction combined loops most unusually rexx allows both conditional repetitive elements be combined same loop do index = start end do expression end conditionals testing conditions with if if then do end else do end else clause optional for single instructions do end can also be omitted if then else indentation optional but helps improve readability testing for multiple conditions select rexx's case structure like many other constructs derived from pl/i like some implementations case constructs other dynamic languages rexx's when clauses specify full conditions which need not be related each other that they are more like cascaded sets if-then-elseif-then--else code than they are like c java switch statement select when then nop when then do nop end otherwise nop end nop instruction performs no operation used when programmer wishes do nothing place where one more instructions would be required otherwise clause optional if omitted no when conditions are met then syntax condition raised simple variables variables rexx are typeless initially are evaluated their names upper case thus variable's type can vary with its use program say hello / => hello / hello = say hello / => / hello = say + say hello / => say + / interpret hello / => / drop hello say hello / => hello / compound variables unlike many other programming languages classic rexx has no direct support for arrays variables addressed by numerical index instead provides compound variables compound variable consists stem followed by tail dot used join stem tail if tails used are numeric easy produce same effect array do i = stemi = - i end afterwards following variables with following values exist stem1 = stem2 = stem3 = unlike arrays index for stem variable not required have integer value for example following code valid i = 'monday' stemi = rexx also possible set default value for stem stem = 'unknown' stem1 = 'usa' stem44 = 'uk' stem33 = 'france' after these assignments term stem3 would produce 'unknown' whole stem can also be erased with drop statement drop stem this also has effect removing any default value set previously by convention not part language compound stem0 often used keep track how many items are stem for example procedure add word list might be coded like this addword procedure expose dictionary parse arg w n = dictionary0 + dictionaryn = w dictionary0 = n return also possible have multiple elements tail compound variable for example m = 'july' d = y = dayymd = 'friday' multiple numerical tail elements can be used provide effect multi-dimensional array features similar rexx compound variables are found many other languages including associative arrays awk hashes perl hashtables java most these languages provide instruction iterate over all keys tails rexx terms such construct but this lacking classic rexx instead necessary keep auxiliary lists tail values appropriate for example program count words following procedure might be used record each occurrence word addword procedure expose count wordlist parse arg w countw = countw + / assume count has been set / if countw = then wordlist = wordlist w return then later do i = wordswordlist w = wordwordlisti say w countw end at cost some clarity possible combine these techniques into single stem addword procedure expose dictionary parse arg w dictionaryw = dictionaryw + if dictionaryw = / assume dictionary = / then do n = dictionary0+1 dictionaryn = w dictionary0 = n end return later do i = dictionary0 w = dictionaryi say i w dictionaryw end rexx provides no safety net here so if one words happens be whole number less than dictionary0 this technique will fail mysteriously recent implementations rexx including ibm's object rexx open source implementations like oorexx include new language construct simplify iteration over value stem over another collection object such array table list do i over stem say i '-->' stemi end keyword instructions parse parse instruction particularly powerful combines some useful string-handling functions its syntax parse origin where origin specifies source arg arguments at top level tail command line linein standard input eg keyboard pull rexx data queue standard input source info on how program was executed value expression with keyword with required indicate where expression ends var variable version version/release number template can be list variables column number delimiters literal delimiters upper optional if specified data will be converted upper case before parsing examples using list variables template myvar = john smith parse var myvar firstname lastname say first name firstname say last name lastname displays following first name john last name smith using delimiter template myvar = smith john parse var myvar lastname firstname say first name firstname say last name lastname also displays following first name john last name smith using column number delimiters myvar = 123-1234 parse var myvar areacode subnumber say area code areacode say subscriber number subnumber displays following area code subscriber number 123-1234 template can use combination variables literal delimiters column number delimiters interpret interpret instruction evaluates its argument treats its value rexx statement sometimes interpret clearest way perform task but often used where clearer code possible using eg value other reasons being rexx's decimal arbitrary precision arithmetic including fuzzy comparisons use parse statement with programmatic templates stemmed arrays sparse arrays --> / demonstrate interpret with square4 => / x = 'square' interpret 'say' x || '4 exit' square return arg12 this displays exits because variable contents rexx are strings including rational numbers with exponents even entire programs rexx offers interpret strings evaluated expressions this feature could be used pass functions function parameters such passing sin cos procedure calculate integrals rexx offers only basic math functions like abs digits max min sign random complete set hex plus binary conversions with bit operations more complex functions like sin had be implemented from scratch obtained from third party external libraries some external libraries typically those implemented traditional languages did not support extended precision later versions non-classic support call variable constructs together with built-in function value call can be used place many cases interpret this classic program / terminated by input exit similar / do forever interpret linein end slightly more sophisticated rexx calculator x = 'input bye quit' do until x = 'bye' interpret 'say' x pull x end pull shorthand for parse upper pull likewise arg shorthand for parse upper arg power interpret instruction had other uses valour software package relied upon rexx's interpretive ability implement oop environment another use was found unreleased westinghouse product called time machine that was able fully recover following fatal error numeric say digits fuzz form / => scientific / say 999999999+1 / => / numeric digits / only limited by available memory / say 999999999+1 / => / say 09999999999=1 / => false / numeric fuzz say 099999999=1 / => true / say 099999999==1 / => false / say / => / numeric form engineering say / => / say // / => rest division/ calculates √2 calculates e code numeric digits n=2 r=1 do forever / newton's method / rr=n/r+r/2 if r=rr then leave r=rr end say sqrt n ' = ' r numeric digits e=25 f=05 do n=3 f=f/n ee=e+f if e=ee then leave e=ee end say e = e output sqrt = e = signal signal instruction intended for abnormal changes flow control see next section however can be misused treated like goto statement found other languages although not strictly equivalent because terminates loops other constructs this can produce difficult-to-read code error handling exceptions possible rexx intercept deal with errors other exceptions using signal instruction there are seven system conditions error failure halt novalue notready lostdigits syntax handling each can be switched on off source code desired following program will run until terminated by user signal on halt do = say do / delay / end end halt say program was stopped by user exit many rexx programmers believe that relying on default value symbols dangerous employ signal on novalue similar statement this intercepts uses undefined variables which would otherwise get their own upper case name their value regardless state novalue condition status variable can always be checked with built-in function symbol returning var for defined variables value function can be used get value variables without triggering novalue condition but its main purpose read set environment variables similar posix getenv putenv conditions error positive rc from system command failure negative rc for system command eg command doesn't exist halt abnormal termination novalue unset variable was referenced notready input output error eg read attempts beyond end file syntax invalid program syntax some other error condition lostdigits significant digits are lost ansi rexx not trl second edition when condition handled by signal on sigl rc system variables can be analyzed understand situation rc contains rexx error code sigl contains line number where error arose beginning with rexx version conditions can get names there's also call on construct that's handy if external functions do not necessarily exist changecodepage procedure / protect signal settings / signal on syntax name changecodepagetrap return sysqueryprocesscodepage changecodepagetrap return / windows-1252 on os/2 / see also free software portal ispf xedit comparison computer shells comparison programming languages references mark hessling regina rexx interpreter sourceforge project regina-rexx retrieved catalog all documents filter=rexx ibm library server retrieved b m f cowlishaw design rexx language pdf ibm systems journal vol no pdf ibm research p doi101147/sj2340326 retrieved could there be high astonishment factor associated with new feature if feature accidentally misapplied by user causes what appears him be unpredictable result that feature has high astonishment factor therefore undesirable if necessary feature has high astonishment factor may be necessary redesign feature line feed character |title= at position help m f cowlishaw ibm rexx brief history ibm retrieved m f cowlishaw rex -- command programming language share retrieved lundin leigh woodruff mark t/rexx rexx compiler for cms us copyright office washington dc independent intelligence incorporated txu000295377 rexx implementations rexxla archived from original on retrieved while ansi incits 274-1996/amd1-2000 r2001 ansi incits 274-1996 r2007 are chargeable free draft can be downloaded american national standard for information systems – programming language rexx pdf x3j18-199x howard fosdick rexx programmer's reference wiley publishing p isbn 0-7645-7996-7 m f cowlishaw rexx language - practical approach programming 2nd ed prentice hall isbn 0-13-780651-5 further reading callaway merrill rexx cookbook tutorial guide rexx language os/2 & warp on ibm personal computer whitestone isbn 0-9632773-4-0 cowlishaw michael rexx language practical approach programming prentice hall isbn 0-13-780651-5 cowlishaw michael netrexx language prentice hall isbn 0-13-806332-x daney charles programming rexx mcgraw-hill tx isbn 0-07-015305-1 deuring johannes rexx grundlagen für die z/os praxis germany isbn 3-486-20025-9 ender tom object-oriented programming with rexx john wiley & sons isbn 0-471-11844-3 fosdick howard rexx programmer's reference wiley/wrox isbn 0-7645-7996-7 gargiulo gabriel rexx with os/2 tso & cms features mvs training third edition isbn 1-892559-03-x goldberg gabriel smith philip h rexx handbook mcgraw-hill tx isbn 0-07-023682-8 goran richard k rexx reference summary handbook cfs nevada inc1997 isbn 0-9639854-3-4 ibm redbooks implementing rexx support sdsf vervante isbn 0-7384-8914-x kiesel peter c rexx advanced techniques for programmers mcgraw-hill tx isbn 0-07-034600-3 marco lou ispf/rexx development for experienced programmers cbm books isbn 1-878956-50-7 o'hara robert p gomberg david roos modern programming using rexx prentice hall isbn 0-13-597329-5 rudd anthony s 'practical usage tso rexx' createspace isbn 978-1475097559 schindler william down earth rexx perfect niche software isbn 0-9677590-0-5 external links mike cowlishaw's home page rexx language page at ibm rexx language association rexx information-- downloads tools tutorials reference materials etc rexx programming language at open hub authority control gnd 4196484-6 retrieved from https//enwikipediaorg/w/indexphptitle=rexx&oldid=738846527 categories ibm software scripting languages text-oriented programming languages command shells ibm mainframe operating systems cross-platform software programming languages created rexx programming language hidden categories cs1 errors invisible characters articles needing additional references from december all articles needing additional references pages using deprecated image syntax wikipedia articles needing style editing from december all articles needing style editing wikipedia articles with gnd identifiers pages using isbn magic links navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version other projects wikimedia commons languages العربية català dansk deutsch español euskara français 한국어 íslenska italiano עברית nederlands 日本語 norsk bokmål polski português русский slovenščina suomi svenska тоҷикӣ türkçe українська 中文 edit links this page was last modified on september at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 