java virtual machine from wikipedia free encyclopedia jump navigation search jre redirects here for podcast see joe rogan experience overview java virtual machine jvm architecture based on java virtual machine specification java se edition java virtual machine jvm abstract computing machine that enables computer run java program there are three notions jvm specification implementation instance specification document that formally describes what required jvm implementation having single specification ensures all implementations are interoperable jvm implementation computer program that meets requirements jvm specification instance jvm implementation running process that executes computer program compiled into java bytecode java runtime environment jre software package that contains what required run java program includes java virtual machine implementation together with implementation java class library oracle corporation which owns java trademark distributes java runtime environment with their java virtual machine called hotspot java development kit jdk superset jre contains tools for java programmers eg javac compiler java development kit provided free charge either by oracle corporation directly by openjdk open source project which governed by oracle contents jvm specification class loader bytecode instructions jvm languages bytecode verifier o secure execution remote code bytecode interpreter just-in-time compiler jvm web browser o java applets o javascript jvms interpreters o compilation javascript java runtime environment from oracle o performance o generational heap o security see also notes references o external links jvm specification java virtual machine abstract virtual computer defined by specification this specification omits implementation details that are not essential ensure interoperability memory layout run-time data areas garbage-collection algorithm used any internal optimization java virtual machine instructions their translation into machine code main reason for this omission not unnecessarily constrain implementers any java application can be run only inside some concrete implementation abstract specification java virtual machine starting with java platform standard edition j2se changes jvm specification have been developed under java community process jsr changes specification support changes proposed class file format jsr are being done maintenance release jsr specification for jvm was published blue book preface states we intend that this specification should sufficiently document java virtual machine make possible compatible clean-room implementations oracle provides tests that verify proper operation implementations java virtual machine one oracle's jvms named hotspot other inherited from bea systems jrockit clean-room java implementations include kaffe ibm j9 oracle owns java trademark may allow its use certify implementation suites fully compatible with oracle's specification class loader main article java class loader one organizational units jvm byte code class class loader implementation must be able recognize load anything that conforms java class file format any implementation free recognize other binary forms besides class files but must recognize class files class loader performs three basic activities this strict order loading finds imports binary data for type linking performs verification preparation optionally resolution o verification ensures correctness imported type o preparation allocates memory for class variables initializing memory default values o resolution transforms symbolic references from type into direct references initialization invokes java code that initializes class variables their proper starting values general there are two types class loader bootstrap class loader user defined class loader every java virtual machine implementation must have bootstrap class loader capable loading trusted classes java virtual machine specification doesn't specify how class loader should locate classes bytecode instructions main article java bytecode jvm has instructions for following groups tasks load store arithmetic type conversion object creation manipulation operand stack management push / pop control transfer branching method invocation return throwing exceptions monitor-based concurrency aim binary compatibility each particular host operating system needs its own implementation jvm runtime these jvms interpret bytecode semantically same way but actual implementation may be different more complex than just emulating bytecode compatibly efficiently implementing java core api that must be mapped each host operating system jvm languages main article list jvm languages jvm language any language with functionality that can be expressed terms valid class file which can be hosted by java virtual machine class file contains java virtual machine instructions java byte code symbol table well other ancillary information class file format hardware- operating system-independent binary format used represent compiled classes interfaces there are several jvm languages both old languages ported jvm completely new languages jruby jython are perhaps most well-known ports existing languages ie ruby python respectively new languages that have been created from scratch compile java bytecode clojure groovy scala may be most popular ones notable feature with jvm languages that they are compatible with each other so that for example scala libraries can be used with java programs vice versa java jvm implements jsr supporting dynamically typed languages on java platform new feature which supports dynamically typed languages jvm this feature developed within da vinci machine project whose mission extend jvm so that supports languages other than java bytecode verifier basic philosophy java that inherently safe from standpoint that no user program can crash host machine otherwise interfere inappropriately with other operations on host machine that possible protect certain methods data structures belonging trusted code from access corruption by untrusted code executing within same jvm furthermore common programmer errors that often led data corruption unpredictable behavior such accessing off end array using uninitialized pointer are not allowed occur several features java combine provide this safety including class model garbage-collected heap verifier jvm verifies all bytecode before executed this verification consists primarily three types checks branches are always valid locations data always initialized references are always type-safe access private package private data methods rigidly controlled first two these checks take place primarily during verification step that occurs when class loaded made eligible for use third primarily performed dynamically when data items methods class are first accessed by another class verifier permits only some bytecode sequences valid programs eg jump branch instruction can only target instruction within same method furthermore verifier ensures that any given instruction operates on fixed stack location allowing jit compiler transform stack accesses into fixed register accesses because this that jvm stack architecture does not imply speed penalty for emulation on register-based architectures when using jit compiler face code-verified jvm architecture makes no difference jit compiler whether gets named imaginary registers imaginary stack positions that must be allocated target architecture's registers fact code verification makes jvm different from classic stack architecture which efficient emulation with jit compiler more complicated typically carried out by slower interpreter original specification for bytecode verifier used natural language that was incomplete incorrect some respects number attempts have been made specify jvm formal system by doing this security current jvm implementations can more thoroughly be analyzed potential security exploits prevented will also be possible optimize jvm by skipping unnecessary safety checks if application being run proven be safe secure execution remote code virtual machine architecture allows very fine-grained control over actions that code within machine permitted take assumes code semantically correct that successfully passed formal bytecode verifier process materialized by tool possibly off-board virtual machine this designed allow safe execution untrusted code from remote sources model used by java applets other secure code downloads once bytecode-verified downloaded code runs restricted sandbox which designed protect user from misbehaving malicious code addition bytecode verification process publishers can purchase certificate with which digitally sign applets safe giving them permission ask user break out sandbox access local file system clipboard execute external pieces software network formal proof bytecode verifiers have been done by javacard industry formal development embedded verifier for java card byte code bytecode interpreter just-in-time compiler for each hardware architecture different java bytecode interpreter needed when computer has java bytecode interpreter can run any java bytecode program same program can be run on any computer that has such interpreter when java bytecode executed by interpreter execution will always be slower than execution same program compiled into native machine language this problem mitigated by just-in-time jit compilers for executing java bytecode jit compiler may translate java bytecode into native machine language while executing program translated parts program can then be executed much more quickly than they could be interpreted this technique gets applied those parts program frequently executed this way jit compiler can significantly speed up overall execution time there no necessary connection between java java bytecode program written java can be compiled directly into machine language real computer programs written other languages than java can be compiled into java bytecode java bytecode intended be platform-independent secure some jvm implementations do not include interpreter but consist only just-in-time compiler jvm web browser since very early stages design process java jvm has been marketed web technology for creating rich internet applications java applets main article java applet on client side web browsers may be extended with npapi java plugin which executes so called java applets embedded into html pages applet allowed draw into rectangular region on page assigned use restricted set apis that allow for example access user's microphone acceleration java applets were superior javascript both performance features until approximately when javascript engines browsers were made significantly faster html suite web technologies started enhancing javascript with new apis java applets are not able modify page outside its rectangular region which not true about javascript adobe flash player main competing technology works same way this respect java applets are not restricted java general can be created any jvm language april google chrome does not allow use any npapi plugins mozilla firefox will also ban npapi plugins by end this means that java applets can no longer be used either browser oracle ultimately announced january that will discontinue java web browser plugin effective java june according w3techs java applet use had fallen 01% all web sites flash had fallen 108% silverlight 01% web sites javascript jvms interpreters may javapoly allows users import unmodified java libraries invoke them directly from javascript javapoly allows websites use run unmodified java libraries even if user does not have java installed on their computer compilation javascript with continuing improvements javascript execution speed combined with increased use mobile devices whose web browsers do not implement support for plugins there are efforts target those users through compilation javascript possible either compile source code jvm bytecode javascript compiling jvm bytecode which universal across jvm languages allows building upon existing compiler bytecode main jvm bytecode javascript compilers are teavm compiler contained dragome web sdk bck2brwsr j2js-compiler leading compilers from jvm languages javascript include java javascript compiler contained google web toolkit clojurescript clojure grooscript groovy scalajs scala others java runtime environment from oracle main article hotspot java runtime environment jre released by oracle software distribution containing stand-alone java vm hotspot browser plugin java standard libraries configuration tool most common java environment installed on windows computers freely available for download at website javacom performance main article java performance jvm specification gives lot leeway implementors regarding implementation details since java jre from oracle contains jvm called hotspot has been designed be high-performance jvm speed-up code execution hotspot relies on just-in-time compilation speed-up object allocation garbage collection hotspot uses generational heap generational heap java virtual machine heap area memory used by jvm for dynamic memory allocation hotspot heap divided into generations young generation stores short-lived objects that are created immediately garbage collected objects that persist longer are moved old generation also called tenured generation this memory subdivided into two survivors spaces where objects that survived first next garbage collections are stored permanent generation permgen was used for class definitions associated metadata prior java permanent generation was not part heap permanent generation was removed from java originally there was no permanent generation objects classes were stored together same area but class unloading occurs much more rarely than objects are collected moving class structures specific area allowed significant performance improvements security oracle's jre installed on large number computers since any web page user visits may run java applets java provides easily accessible attack surface malicious web sites that user visits kaspersky labs reports that java web browser plugin method choice for computer criminals java exploits are included many exploit packs that hackers deploy onto hacked web sites past end users were often using out-of-date version jre which was vulnerable many known attacks this led widely shared belief between users that java inherently insecure since java oracle's jre for windows includes automatic update functionality see also java portal list java virtual machines comparison java virtual machines comparison application virtual machines automated exception handling java performance list jvm languages java processor common language runtime notes bill venners inside java virtual machine chapter java community processsm program - jsrs java specification requests - detail jsr jcporg retrieved java community processsm program - jsrs java specification requests - detail jsr jcporg retrieved java virtual machine specification first second editions are also available online java virtual machine specification java se edition pdf docsoraclecom retrieved frequently asked questions - java interoperability scala-langorg retrieved java community processsm program - jsrs java specification requests - detail jsr jcporg retrieved da vinci machine project openjdkjavanet retrieved new jdk feature support for dynamically typed languages java virtual machine oraclecom retrieved verification process java virtual machine specification sun microsystems retrieved stephen n freund john c mitchell formal framework for java bytecode language verifier proceedings 14th acm sigplan conference on object-oriented programming systems languages applications oopsla '99 michael berman ed association for computing machinery new york pp147–166 doi 101145/320384320397 david j eck introduction programming using java seventh edition version august at section java virtual machine oracle jrockit introduction release r28 at understanding just-in-time compilation optimization chrome starts pushing java off web by disabling plugins ars technica retrieved december firefox will stop supporting plugins by end following chrome's lead pc world retrieved december oracle deprecates java browser plugin prepares for its demise ars technica retrieved april historical yearly trends usage client-side programming languages june w3techscom retrieved krill paul may javapolyjs imports existing java code invokes directly from javascript infoworld retrieved july teavm project home page teavmorg retrieved dragome web sdk dragomecom retrieved bck2brwsr - apidesign wikiapidesignorg retrieved wolfgang kuehn decatur j2js-compiler github list languages that compile js · jashkenas/coffeescript wiki · github githubcom retrieved frequently asked questions about garbage collection hotspot java virtual machine sun microsystems february retrieved february b masamitsu jon november presenting permanent generation retrieved february nutter charles september first taste invokedynamic retrieved february jep remove permanent generation oracle corporation retrieved there any protection against java exploits | kaspersky lab kasperskycom retrieved what java insecure should i use lifehackercom retrieved references clarifications amendments java virtual machine specification second edition includes list changes be made support j2se jsr jsr specifies changes class file format support source-level debugging languages such javaserver pages jsp sqlj that are translated java external links java virtual machine specification java implementations at dmoz how download install prebuilt openjdk packages how install java jre from oracle v t e java virtual machines comparison sun/oracle hotspot kvm openjdk maxine vm major implementations excelsior jet jamvm jikes rvm ikvmnet ibm j9 jrockit embedded excelsior jet embedded jamaicavm mika vm mysaifu squawk sun others cacao dalvik jx more… discontinued apache harmony gcj kaffe microsoft jvm sablevm jupiter more… v t e java java platforms java language jvm micro edition standard edition enterprise edition java card android sdk oracle technologies squawk java development kit openjdk java virtual machine javafx maxine vm platform technologies applets servlets midlets jsp web start jnlp major third-party technologies eclipse gnu classpath gwt harmony hibernate icedtea jazelle spring struts toplink wildfly history java version history java community process sun microsystems free java implementations major programming languages beanshell clojure groovy oxygene java tcl jruby jython kotlin processing rhino scala java conferences javaone devoxx v t e sun microsystems acquired by oracle corp people bill joy andy bechtolsheim scott mcnealy vinod khosla list notable employees hardware sun-1 sun-2 sun-3 sun386i sun-4 sparcstation netra ultra enterprise sun blade sun fire sparc enterprise sparc javastation sun ray sun modular datacenter more software sunos solaris nis + nfs zfs sunview news openwindows java desktop system sun studio java staroffice iplanet/sun one/java enterprise system sun secure global desktop mysql sun xvm glassfish more storage storagetek sun open storage qfs zfs high-performance computing sun cloud sun constellation system sun visualization system sun grid engine lustre research sun labs picojava fortress project looking glass education scps bluej community common development distribution license java community process netbeans openofficeorg opensolaris opensparc openjdk osum retrieved from https//enwikipediaorg/w/indexphptitle=javavirtualmachine&oldid=748845013 categories java programming language java platform java platform software java specification requests java virtual machine stack-based virtual machines hidden categories articles containing potentially dated statements from all articles containing potentially dated statements articles containing potentially dated statements from june articles with dmoz links navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages አማርኛ العربية বাংলা bosanski català čeština deutsch español فارسی français 한국어 हिन्दी hrvatski bahasa indonesia interlingua italiano עברית қазақша magyar മലയാളം монгол မြန်မာဘာသာ nederlands 日本語 ਪੰਜਾਬੀ polski português русский shqip simple english српски / srpski srpskohrvatski / српскохрватски svenska türkçe українська 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 