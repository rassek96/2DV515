erlang programming language from wikipedia free encyclopedia jump navigation search this article about programming language for other things named erlang see erlang disambiguation erlang paradigm multi-paradigm concurrent functional designed by joe armstrong robert virding mike williams developer ericsson first appeared years ago stable release / september months ago typing discipline dynamic strong license apache license since otp erlang public license earlier releases filename extensions erl hrl website wwwerlangorg major implementations erlang influenced by prolog smalltalk plex lisp influenced f clojure rust scala opa reia elixir dart akka erlang programming at wikibooks erlang /ˈɜːrlæŋ/ er-lang general-purpose concurrent functional programming language also garbage-collected runtime system sequential subset erlang supports eager evaluation single assignment dynamic typing erlang known for its designs that are well suited for systems with following characteristics distributed fault-tolerant soft real-time highly available non-stop applications hot swapping where code can be changed without stopping system was originally proprietary language within ericsson developed by joe armstrong robert virding mike williams but was released open source erlang along with otp collection middleware libraries erlang are now supported maintained by otp product unit at ericsson have been widely referred erlang/otp contents history o erlang worldview o usage functional programming examples data types concurrency distribution orientation implementation hot code loading modules distribution erlang industry o software projects written erlang o companies using erlang variants references further reading external links history name erlang attributed bjarne däcker has been presumed by those working on telephony switches for whom language was designed be reference danish mathematician engineer agner krarup erlang ubiquitous use unit named for him initially at least simultaneously syllabic abbreviation ericsson language erlang was designed with aim improving development telephony applications initial version erlang was implemented prolog was influenced by programming language plex used earlier ericsson exchanges by erlang had proven that was suitable for prototyping telephone exchanges but prolog interpreter was far too slow one group within ericsson estimated that would need be times faster order be suitable for production use work began on beam virtual machine which compiles erlang c using mix natively compiled code threaded code strike balance between performance disk space according armstrong language went from lab product real applications following collapse next-generation axe exchange named axe-n result erlang was chosen for next atm exchange axd ericsson announced axd301 switch containing over million lines erlang reported achieve high availability nine 9s shortly thereafter ericsson radio systems banned in-house use erlang for new products citing preference for non-proprietary languages ban caused armstrong others leave ericsson implementation was open-sourced at end year ericsson eventually lifted ban re-hired armstrong native symmetric multiprocessing support was added runtime system virtual machine erlang worldview erlang view world joe armstrong co-inventor erlang summarized his phd thesis everything process processes are strongly isolated process creation destruction lightweight operation message passing only way for processes interact processes have unique names if you know name process you can send message processes share no resources error handling non-local processes do what they are supposed do fail joe armstrong pointed out interview with rackspace “if java right one run anywhere then erlang right one run forever” usage erlang has now been adopted by companies worldwide including nortel t-mobile erlang used ericsson’s support nodes gprs 3g lte mobile networks worldwide tim bray director web technologies at sun microsystems expressed his keynote at oscon july if somebody came me wanted pay me lot money build large scale message handling system that really had be up all time could never afford go down for years at time i would unhesitatingly choose erlang build functional programming examples erlang function that uses recursion count ten -modulecounttoten -export counttoten -> docount0 docount10 -> docountcode -> docountcode + factorial algorithm implemented erlang -modulefact % this file 'facterl' module filename must match -export % this exports function 'fac' arity parameter no type no name fac0 -> % if then return otherwise note semicolon meaning 'else' facn when n > isintegern -> n facn-1 % recursively determine then return result % note period meaning 'endif' 'function end' %% this function will crash if anything other than nonnegative integer given %% illustrates let crash philosophy erlang fibonacci algorithm implemented erlang note this only for demonstrating erlang syntax this algorithm rather slow -modulefib % this file 'fiberl' module filename must match -export % this exports function 'fib' arity fib1 -> % if then return otherwise note semicolon meaning 'else' fib2 -> % if then return otherwise fibn -> fibn - + fibn - quicksort erlang using list comprehension %% qsortqsortlist %% sort list items -moduleqsort % this file 'qsorterl' -export % function 'qsort' with parameter exported no type no name qsort -> % if list empty return empty list nothing sort qsort -> % compose recursively list with 'front' for all elements that should be before 'pivot' % then 'pivot' then 'back' for all elements that should be after 'pivot' qsort above example recursively invokes function qsort until nothing remains be sorted expression % if list empty return empty list ignore second parameter qsort smaller -> % partition list with 'smaller' elements front 'pivot' not-'smaller' elements % after 'pivot' sort sublists qsort denotes list whose first element dh whose remaining elements are list dt syntax denotes empty list syntax short for ]]] first element list can be accessed constant time first element list called head list remainder list when its head has been removed called tail list maps maps contain variable number key-value associations syntax {key1=>value1keyn=>valuen} two forms syntactic sugar are provided strings strings are written doubly quoted lists characters this syntactic sugar for list integer ascii codes for characters string thus for example string cat shorthand for has partial support for unicode strings records records provide convenient way for associating tag with each elements tuple this allows one refer element tuple by name not by position pre-compiler takes record definition replaces with appropriate tuple reference erlang has no method defining classes although there are external libraries available concurrency distribution orientation erlang's main strength support for concurrency has small but powerful set primitives create processes communicate among them erlang conceptually similar occam programming language though recasts ideas communicating sequential processes csp functional framework uses asynchronous message passing processes are primary means structure erlang application they are neither operating system processes nor operating system threads but lightweight processes that are scheduled by erlang's beam vm like operating system processes but unlike operating system threads they share no state with each other estimated minimal overhead for each words thus many processes can be created without degrading performance benchmark with million processes has been successfully performed erlang has supported symmetric multiprocessing since release r11b may while threads require external library support most languages erlang provides language-level features for creating managing processes with aim simplifying concurrent programming though all concurrency explicit erlang processes communicate using message passing instead shared variables which removes need for explicit locks locking scheme still used internally by vm inter-process communication works via shared-nothing asynchronous message passing system every process has mailbox queue messages that have been sent by other processes not yet consumed process uses receive primitive retrieve messages that match desired patterns message-handling routine tests messages turn against each pattern until one them matches when message consumed removed from mailbox process resumes execution message may comprise any erlang structure including primitives integers floats characters atoms tuples lists functions code example below shows built-in support for distributed processes % create process invoke function webstartserverport maxconnections serverprocess = spawnweb startserver % create remote process invoke function % webstartserverport maxconnections on machine remotenode remoteprocess = spawnremotenode web startserver % send message serverprocess asynchronously message consists tuple % with atom pause number serverprocess {pause 10} % receive messages sent this process receive amessage -> dosomething {data datacontent} -> handledatacontent {hello text} -> ioformatgot hello message ~s {goodbye text} -> ioformatgot goodbye message ~s end example shows processes may be created on remote nodes communication with them transparent sense that communication with remote processes works exactly communication with local processes concurrency supports primary method error-handling erlang when process crashes neatly exits sends message controlling process which can then take action such for instance starting new process that takes over old process's task implementation ericsson erlang implementation loads virtual machine bytecode which converted threaded code at load time also includes native code compiler on most platforms developed by high performance erlang project hipe at uppsala university since october hipe system fully integrated ericsson's open source erlang/otp system also supports interpreting directly from source code via abstract syntax tree via script r11b-5 release erlang hot code loading modules erlang supports language-level dynamic software updating implement this code loaded managed module units module compilation unit system can keep two versions module memory at same time processes can concurrently run code from each versions are referred new old version process will not move into new version until makes external call its module example mechanism hot code loading %% process whose only job keep counter %% first version -modulecounter -export start -> loop0 loopsum -> receive {increment count} -> loopsum+count {counter pid} -> pid {counter sum} loopsum codeswitch -> modulecodeswitchsum % force use 'codeswitch/1' from latest module version end codeswitchsum -> loopsum for second version we add possibility reset count zero %% second version -modulecounter -export start -> loop0 loopsum -> receive {increment count} -> loopsum+count reset -> loop0 {counter pid} -> pid {counter sum} loopsum codeswitch -> modulecodeswitchsum end codeswitchsum -> loopsum only when receiving message consisting atom 'codeswitch' will loop execute external call codeswitch/1 module preprocessor macro for current module if there new version counter module memory then its codeswitch/1 function will be called practice having specific entry-point into new version allows programmer transform state what required newer version our example we keep state integer practice systems are built up using design principles from open telecom platform which leads more code upgradable designs successful hot code loading tricky subject code needs be written with care make use erlang's facilities distribution ericsson released erlang open source ensure its independence from single vendor increase awareness language erlang together with libraries real-time distributed database mnesia forms open telecom platform otp collection libraries ericsson few other companies offer commercial support for erlang since open source release erlang has been used by several firms worldwide including nortel t-mobile although erlang was designed fill niche has remained obscure language for most its existence its popularity growing due demand for concurrent services erlang has found some use fielding mmorpg servers erlang industry software projects written erlang configuration management o chef software for which core api server originally written ruby was completely re-written version erlang content management system o zotonic content management system web framework written erlang distributed databases o cloudant database service based on company's fork couchdb bigcouch o couchdb document-based database that uses mapreduce o couchbase server née membase database management system optimized for storing data behind interactive web applications o mnesia distributed database o riak distributed database o simpledb distributed database that part amazon web services message broker o rabbitmq implementation advanced message queuing protocol amqp online messaging o ejabberd extensible messaging presence protocol xmpp instant messaging server o mongooseim massively scalable xmpp platform solution stacks o lyme software bundle serve dynamic web pages o lyce software bundle serve dynamic web pages tools o wings subdivision modeler used model texture polygon meshes web servers o cowboy erlang small fast modular http server written erlang o yaws web server companies using erlang companies using erlang their production systems include amazoncom uses erlang implement simpledb providing database services part amazon web services offering aol's digital advertising business using erlang for its real time bidding exchange systems battlestar galactica online game server by bigpoint bet365 online gambling firm uses language production drive its inplay betting service pushing live odds sporting events millions customers near real-time call duty server core cisco acquired tail-f systems leading provider multi-vendor network service orchestration solutions for traditional virtualized networks discord dnsimple dns provider that uses erlang run dns servers globally distributed anycast network managing billions requests per day ericsson uses erlang its support nodes used gprs 3g lte mobile networks worldwide facebook uses erlang power backend its chat service handling more than million active users can be observed some its http response headers o facebook chat system was running on ejabberd based servers github web-based hosting service for software development projects that use git version control system erlang used for rpc proxies ruby processes goldman sachs high-frequency trading programsømq mission accomplished july huffington post uses erlang for its commenting system on huffpost live issuu online digital publisher klarna swedish e-commerce company has been using erlang handle million customers million transaction since league legends chat system by riot games based on ejabberd linden lab uses erlang its games machine zone developer free-to-play games uses erlang game war fire age smarkets sports betting exchange tuenti chat based on ejabberd twitterfall service view trends patterns from twitter rackspace uses erlang some its internal applications manage networking devices rakuten uses erlang for its distributed file system vendetta online naos game server world tanks uses erlang for message delivery communication between game players whatsapp uses erlang run messaging servers achieving up million connected users per server whisper anonymous social network on mobile yahoo uses its social bookmarking service delicious which has more than million users million bookmarked urls variants elixir functional concurrent general-purpose programming language that runs on erlang virtual machine beam lisp flavored erlang lisp based programming language that runs on erlang virtual machine beam references releases joe armstrong bjarne däcker thomas lindgren håkan millroth open-source erlang - white paper archived from original on retrieved july b c d e joe armstrong history erlang hopl iii proceedings third acm sigplan conference on history programming languages isbn 978-1-59593-766-7 how tech giants spread open source programming love - ciocom erlang/otp released open source™ erlang mathematician armstrong joe august development erlang acm sigplan notices 196–203 doi101145/258948258967 retrieved february concurrency oriented programming erlang pdf november b question about erlang's future july ericsson ericssoncom retrieved redirecting retrieved may erlang -- using unicode erlang retrieved may ect - erlang class transformation - add object-oriented programming erlang - google project hosting retrieved may armstrong joe september erlang communications acm 68–75 doi101145/18108911810910 erlang conceptually similar occam programming language though recasts ideas csp functional framework uses asynchronous message passing erlang efficiency guide - processes archived from original on wiger ulf november stress-testing erlang complangfunctionalmisc retrieved august lock-free message queue retrieved december armstrong joe erlang robustness archived from original on retrieved july erlang supervision principles archived from original on retrieved july high performance erlang retrieved march who uses erlang for product development frequently asked questions about erlang retrieved july largest user erlang surprise ericsson ericsson use write software used telecommunications systems many dozens projects have used particularly large one extremely scalable axd301 atm switch other commercial users listed part faq include nortel deutsche flugsicherung german national air traffic control organisation t-mobile programming erlang retrieved december virtually all language use shared state concurrency this very difficult leads terrible problems when you handle failure scale up systemsome pretty fast-moving startups financial world have latched onto erlang for example swedish wwwkreditorse erlang next java retrieved october i do not believe that other languages can catch up with erlang anytime soon will be easy for them add language features be like erlang will take long time for them build such high-quality vm mature libraries for concurrency reliability so erlang poised for success if you want build multicore application next few years you should look at erlang clarke gavin feb battlestar galactica vets needed for online roleplay music media reg retrieved february chef released opscode february why membase uses erlang retrieved may satineorg satineorg retrieved may nat torkington amazon simpledb built on erlang online gambling firm bet365 has swapped java for erlang erlang first-person shooters pdf archived from original pdf on september retrieved august presentation about erlang call duty from demonware takahashi dean january discord raises $20m for voice comm app for multiplayer mobile games venture beat retrieved january gprs support notes pdf ericsson retrieved inside erlang – creator joe armstrong tells his story ericsson erlang at facebook - eugene letuchy pdf erlang factory april archived from original pdf on october thrift slightly more than one year later facebookcom retrieved using facebook chat via jabber- facebook developers developersfacebookcom archived from original on december retrieved erlang at facebook — eugene letuchy pdf erlang factory archived from original pdf on october retrieved way github helped erlang way erlang helped github infoqcom retrieved huffington post engineering erlang retrieved af tania andersen onsdag august - sådan fik dansk succes-website held med erlang og amazon | version2 danish version2dk retrieved erlang factory - erik stenman chief scientist klarna erlang central - believe erlang games erlang central erlang at machine zone - fredrik linder | erlang user conference chat making | tuenti corporate spanish blogtuenticom archived from original on retrieved twitter / jalada twitterfall now powered twittercom retrieved twitter / jalada @tacticalgrace sure does twittercom retrieved how rackspace using erlang introducing leofs – lion storage systems naos engine — brief guildsoftwarecom archived from original on retrieved million so // whatsapp blog last important piece our infrastracture erlang rick reed whatsapp scaling millions simultaneous connections - erlang factory sf march archived december at wayback machine million so blogwhatsappcom retrieved why whatsapp only needs engineers for its 900m users wiredcom inaka inaka / case-studies retrieved may using erlang build reliable fault tolerant scalable systems | dr dobb's further reading armstrong joe making reliable distributed systems presence software errors pdf phd dissertation royal institute technology stockholm sweden archived from original on march retrieved cs1 maint bot original-url status unknown link armstrong j history erlang proceedings third acm sigplan conference on history programming languages - hopl iii pp 6–1 doi101145/12388441238850 isbn 978-1-59593-766-7 early history erlang by bjarne däcker mattsson h nilsson h wikstrom c mnesia - distributed robust dbms for telecommunications applications first international workshop on practical aspects declarative languages padl '99 152–163 cs1 maint uses authors parameter link armstrong joe virding robert williams mike wikstrom claes january concurrent programming erlang 2nd ed prentice hall p isbn 978-0-13-508301-7 archived from original on armstrong joe july programming erlang software for concurrent world 1st ed pragmatic bookshelf p isbn 978-1-934356-00-5 thompson simon j cesarini francesco june erlang programming concurrent approach software development 1st ed sebastopol california o'reilly media inc p isbn 978-0-596-51818-9 logan martin merritt eric carlsson richard may erlang otp action 1st ed greenwich ct manning publications p isbn 978-1-933988-78-8 martin brown may introduction programming erlang part basics developerworks ibm retrieved may martin brown may introduction programming erlang part use advanced features functionality developerworks ibm retrieved may wiger ulf mar four-fold increase productivity quality industrial-strength functional programming telecom-class products pdf femsys deployment on distributed architectures ericsson telecom ab retrieved sep external links wikimedia commons has media related erlang programming language wikibooks has book on topic erlang programming official website inside erlang – creator joe armstrong tells his story - ericsson retrieved from https//enwikipediaorg/w/indexphptitle=erlangprogramminglanguage&oldid=749513132 categories declarative programming languages functional languages concurrent programming languages dynamically typed programming languages erlang programming language formerly proprietary software register-based virtual machines ericsson programming languages created programming languages created 1980s pattern matching programming languages hidden categories all articles with dead external links articles with dead external links from february cs1 danish-language sources da cs1 spanish-language sources es webarchive template wayback links pages using isbn magic links pages using deprecated image syntax all articles with unsourced statements articles with unsourced statements from july cs1 maint bot original-url status unknown cs1 maint uses authors parameter commons category with page title same on wikidata use dmy dates from january navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version other projects wikimedia commons languages العربية български català čeština dansk deutsch eesti ελληνικά español فارسی français galego 한국어 italiano ქართული nederlands 日本語 norsk bokmål polski português русский slovenščina svenska ไทย тоҷикӣ українська 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 