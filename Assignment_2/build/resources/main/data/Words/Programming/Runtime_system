runtime system from wikipedia free encyclopedia jump navigation search this article about infrastructure required run programs for execution phase software applications see run time program lifecycle phase program execution general concepts runtime system runtime library executable compiler interpreter virtual machine intermediate representation ir source code object code bytecode machine code compilation strategies just-in-time jit o tracing just-in-time ahead-of-time aot transcompilation recompilation notable runtimes android runtime art common language runtime clr crt0 java virtual machine jvm nodejs zend engine notable compilers & toolchains llvm gnu compiler collection gcc v t e runtime system also called run-time system primarily implements portions execution model this contrast runtime lifecycle phase program during which runtime system operation most languages have some form runtime system which implements control over order which work that was specified terms language gets performed over years meaning term 'runtime system' has been expanded include nearly any behaviors that are dynamically determined during execution contents overview examples advanced features history see also references overview every programming language specifies execution model many implement at least part that model runtime system one debatable way define runtime system that any behavior that not directly work program runtime system behavior this definition includes part runtime system things such putting parameters onto stack before function call behavior disk i/o parallel execution related behaviors by this definition essentially every language has runtime system including compiled languages interpreted languages embedded domain-specific languages even api invoked stand alone execution models such pthreads have runtime system that implementation execution model's behavior most scholarly papers on runtime systems focus on implementation details parallel runtime systems notable example parallel runtime system that cilk popular parallel programming model addition proto-runtime toolkit was created simplify creation parallel runtime systems addition execution model behavior runtime system may also perform support services such type checking debugging code generation optimization runtime system also gateway by which running program interacts with runtime environment which contains not only state values that are accessible during program execution but also active entities that can be interacted with during program execution like disk drives people via keyboards for example environment variables are features many operating systems are part runtime environment running program can access them via runtime system likewise hardware devices such dvd drive are active entities that program can interact with via runtime system examples simple example basic runtime system runtime system c language particular set instructions inserted into executable image by compiler among other things these instructions manage processor stack create space for local variables copy function-call parameters onto top stack there are often no clear criteria for deciding which language behavior considered inside runtime system versus which behavior compiled this case reason that c's stack behavior part runtime system opposed part keyword language that systematic maintaining state stack throughout program's execution systematic behavior implements execution model language opposed implementing semantics particular keywords which are directly translated into code that computes results another example which illuminates nature runtime system case using application programming interface api interact with runtime system calls that api look same calls regular software library however at some point during call execution model changes runtime system implements execution model different from that language library written terms person reading code normal library would be able understand library's behavior by just knowing language library was written however person reading code api that invokes runtime system would not be able understand behavior api call just by knowing language call was written at some point via some mechanism execution model stops being that language call written switches over being execution model implemented by runtime system for example trap instruction one method switching execution models this difference what distinguishes api-invoked execution model such posix threads from usual software library both posix threads calls software library calls are invoked via api but posix threads behavior cannot be understood terms language call rather posix threads calls bring into play outside execution model which implemented by posix threads runtime system this runtime system often os kernel advanced features some compiled interpreted languages provide interface that allows application code interact directly with runtime system example thread class java language which allows code that animated by one thread do things such start stop other threads normally core aspects language's behavior such task scheduling resource management are not accessible this fashion higher-level behaviors implemented by runtime system may include tasks such drawing text on screen making internet connection often case that operating systems provide these kinds behaviors well when available runtime system implemented abstraction layer that translates invocation runtime system into invocation operating system this hides complexity variations services offered by different operating systems this also implies that os kernel can itself be viewed runtime system that set os calls that invoke os behaviors may be viewed interactions with runtime system limit runtime system may provide services such p-code machine virtual machine that hide even processor's instruction set this approach followed by many interpreted languages such awk some languages like java which are meant be compiled into some machine-independent intermediate representation code such bytecode this arrangement greatly simplifies task language implementation its adaptation different machines improves efficiency sophisticated language features such reflection also allows same program be executed on any machine without explicit recompiling step feature that has become very important since proliferation world wide web speed up execution some runtime systems feature just-in-time compilation machine code at other extreme physical cpu itself can be viewed implementation runtime system specific assembly language this view execution model implemented by physical cpu memory systems analogy runtime systems for higher-level languages are themselves implemented using some other languages this creates hierarchy runtime systems with cpu itself – actually its inner digital logic structures that determine things like program counter advancement scheduling instructions – acting lowest-level runtime system modern aspect runtime systems parallel execution behaviors such behaviors exhibited by mutex constructs pthreads parallel section constructs openmp runtime system with such parallel execution behaviors may be modularized according proto-runtime approach history notable early examples runtime systems are interpreters for basic lisp these environments also included garbage collector forth early example language that was designed be compiled into intermediate representation code its runtime system was virtual machine that interpreted that code another popular if theoretical example donald knuth's mix computer c later languages that supported dynamic memory allocation runtime system also included library that managed program's memory pool object-oriented programming languages runtime system was often also responsible for dynamic type checking resolving method references see also look up run-time wiktionary free dictionary run time program lifecycle phase execution model programming model references blumofe robert d et al cilk efficient multithreaded runtime system acm open source research institute et al proto-runtime toolkit andrew w appel may runtime system pdf princeton university retrieved retrieved from https//enwikipediaorg/w/indexphptitle=runtimesystem&oldid=708431973 categories computing platforms run-time systems navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages čeština deutsch español français italiano magyar русский slovenčina српски / srpski türkçe 中文 edit links this page was last modified on march at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 