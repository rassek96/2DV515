shell script from wikipedia free encyclopedia jump navigation search this article about scripting unix-like systems for batch programming dos os/2 windows see batch file for batch programming windows powershell shell see windows powershell § scripting for programming shells cmdexe operating systems windows nt/2000 series see cmdexe for shell programming by means files called command scripts procedures on vax/vms machines see digital command language this article has multiple issues please help improve discuss these issues on talk page learn how when remove these template messages this article needs additional citations for verification please help improve this article by adding citations reliable sources unsourced material may be challenged removed february learn how when remove this template message this article's introduction may be too long for length article please help by moving some material from into body article please read layout guide lead section guidelines ensure section will still be inclusive all essential details please discuss this issue on article's talk page september learn how when remove this template message editing freebsd shell script for configuring ipfirewall shell script computer program designed be run by unix shell command-line interpreter various dialects shell scripts are considered be scripting languages typical operations performed by shell scripts include file manipulation program execution printing text script which sets up environment runs program does any necessary cleanup logging etc called wrapper term also used more generally mean automated mode running operating system shell specific operating systems they are called other things such batch files msdos-win95 stream os/2 command procedures vms shell scripts windows nt stream third-party derivatives like 4nt—article at cmdexe mainframe operating systems are associated with number terms typical unix/linux/posix-compliant installation includes korn shell ksh several possible versions such ksh88 korn shell '93 others oldest shell still common use bourne shell sh unix systems invariably include also c shell csh bourne again shell bash remote shell rsh secure shell for ssl telnet connections ssh shell which main component tcl/tk installation usually called tclsh wish gui-based tcl/tk shell c tcl shells have syntax quite similar that said programming languages korn shells bash are developments bourne shell which based on algol language with elements number others added well on other hand various shells plus tools like awk sed grep basic lisp c so forth contributed perl programming language other shells available on machine available for download and/or purchase include ash msh ysh zsh particularly common enhanced korn shell tenex c shell tcsh perl-like shell psh others related programmes such shells based on python ruby c java perl pascal rexx &c various forms are also widely available another somewhat common shell osh whose manual page states enhanced backward-compatible port standard command interpreter from sixth edition unix windows-unix interoperability software such mks toolkit cygwin uwin interix others make above shells unix programming available on windows systems all way down such things signals other inter-process communication system calls apis hamilton c shell windows shell very similar unix c shell microsoft distributes windows services for unix for use with its nt-based operating systems particular which have posix environmental subsystem contents capabilities o shortcuts o batch jobs o generalization o verisimilitude o programming other scripting languages life cycle advantages disadvantages shell scripting on other operating systems see also references external links capabilities shortcuts shell script can provide convenient variation system command where special environment settings command options post-processing apply automatically but way that allows new script still act fully normal unix command one example would be create version ls command list files giving shorter command name l which would be normally saved user's bin directory /home/username/bin/l default set command options pre-supplied /bin/sh lccollate=c ls -fcas $@ here first line shebang indicates which interpreter should execute rest script second line makes listing with options for file format indicators columns all files none omitted size blocks lccollate=c sets default collation order not fold upper lower case together not intermix dotfiles with normal filenames side effect ignoring punctuation names dotfiles are usually only shown if option like -a used $@ causes any parameters given l pass through parameters ls so that all normal options other syntax known ls can still be used user could then simply use l for most commonly used short listing another example shell script that could be used shortcut would be print list all files directories within given directory /bin/sh clear ls -al this case shell script would start with its normal starting line /bin/sh following this script executes command clear which clears terminal all text before going next line following line provides main function script ls -al command list files directories that are directory from which script being run ls command attributes could be changed reflect needs user note if implementation does not have clear command try using clr command instead batch jobs shell scripts allow several commands that would be entered manually at command-line interface be executed automatically without having wait for user trigger each stage sequence for example directory with three c source code files rather than manually running four commands required build final program from them one could instead create c shell script here named build kept directory with them which would compile them automatically /bin/csh echo compiling cc -c fooc cc -c barc cc -c quxc cc -o myprog fooo baro quxo echo done script would allow user save file being edited pause editor then just run /build create updated program test then return editor since 1980s so however scripts this type have been replaced with utilities like make which are specialized for building programs generalization simple batch jobs are not unusual for isolated tasks but using shell loops tests variables provides much more flexibility users bash unix shell script convert jpeg images png images where image names are provided on command-line—possibly via wildcards—instead each being listed within script can be created with this file typically saved file like /home/username/bin/jpg2png /bin/bash for jpg do use $jpg place each filename given turn png=${jpg%jpg}png construct png version filename by replacing jpg with png echo converting $jpg output status info user running script if convert $jpg jpgtopng then use convert program common linux create png temp file mv jpgtopng $png if worked rename temporary png image correct name else otherwise complain exit from script echo 'jpg2png error failed output saved jpgtopng' >&2 exit fi end if test construct done end for loop echo all conversions successful tell user good news exit jpg2png command can then be run on entire directory full jpeg images with just /home/username/bin/jpg2png jpg verisimilitude key feature shell scripts that invocation their interpreters handled core operating system feature so rather than user's shell only being able execute scripts that shell's language script only having its interpreter directive handled correctly if was run from shell both which were limitations early bourne shell's handling scripts shell scripts are set up executed by os itself modern shell script not just on same footing system commands but rather many system commands are actually shell scripts more generally scripts since some them are not interpreted by shell but instead by perl python some other language this extends returning exit codes like other system utilities indicate success failure allows them be called components larger programs regardless how those larger tools are implemented like standard system commands shell scripts classically omit any kind filename extension unless intended be read into running shell through special mechanism for this purpose such sh’s csh’s source programming many modern shells also supply various features usually found only more sophisticated general-purpose programming languages such control-flow constructs variables comments arrays subroutine so on with these sorts features available possible write reasonably sophisticated applications shell scripts however they are still limited by fact that most shell languages have little no support for data typing systems classes threading complex math other common full language features are also generally much slower than compiled code interpreted languages written with speed performance goal standard unix tools sed awk provide extra capabilities for shell programming perl can also be embedded shell scripts can other scripting languages like tcl perl tcl come with graphics toolkits well other scripting languages main article scripting language many powerful scripting languages have been introduced for tasks that are too large complex be comfortably handled with ordinary shell scripts but for which advantages script are desirable development overhead full-blown compiled programming language would be disadvantageous specifics what separates scripting languages from high-level programming languages frequent source debate but generally speaking scripting language one which requires interpreter life cycle shell scripts often serve initial stage software development are often subject conversion later different underlying implementation most commonly being converted perl python c interpreter directive allows implementation detail be fully hidden inside script rather than being exposed filename extension provides for seamless reimplementation different languages with no impact on end users while files with sh file extension are usually shell script some kind most shell scripts do not have any filename extension advantages disadvantages perhaps biggest advantage writing shell script that commands syntax are exactly same those directly entered at command-line programmer does not have switch totally different syntax they would if script were written different language if compiled language were used often writing shell script much quicker than writing equivalent code other programming languages many advantages include easy program file selection quick start interactive debugging shell script can be used provide sequencing decision-making linkage around existing programs for moderately sized scripts absence compilation step advantage interpretive running makes easy write debugging code into script re-run detect fix bugs non-expert users can use scripting tailor behavior programs shell scripting provides some limited scope for multiprocessing on other hand shell scripting prone costly errors inadvertent typing errors such rm -rf / instead intended rm -rf / are folklore unix community single extra space converts command from one that deletes everything sub-directories one which deletes everything—and also tries delete everything root directory similar problems can transform cp mv into dangerous weapons misuse > redirect can delete contents file this made more problematic by fact that many unix commands differ name by only one letter cp cd dd df etc another significant disadvantage slow execution speed need launch new process for almost every shell command executed when script's job can be accomplished by setting up pipeline which efficient filter commands perform most work slowdown mitigated but complex script typically several orders magnitude slower than conventional compiled program that performs equivalent task there are also compatibility problems between different platforms larry wall creator perl famously wrote that easier port shell than shell script similarly more complex scripts can run into limitations shell scripting language itself limits make difficult write quality code extensions by various shells ameliorate problems with original shell language can make problems worse many disadvantages using some script languages are caused by design flaws within language syntax implementation are not necessarily imposed by use text-based command-line there are number shells which use other shell programming languages even full-fledged languages like scsh which uses scheme shell scripting on other operating systems interoperability software such cygwin mks toolkit interix which available microsoft windows services for unix hamilton c shell uwin at&t unix for windows others allow unix shell programmes be run on machines running windows nt its successors with some loss functionality on ms-dos-windows branch well earlier mks toolkit versions for os/2 at least three dcl implementations for windows type operating systems—in addition xlnt multiple-use scripting language package which used with command shell windows script host cgi programming—are available for these systems well mac os x subsequent are unix-like well addition aforementioned tools some posix os/2 functionality can be used with corresponding environmental subsystems windows nt operating system series up windows well third 16-bit subsystem often called ms-dos subsystem uses commandcom provided with these operating systems run aforementioned ms-dos batch files console alternatives 4nt 4dos 4os2 gui take command which add functionality windows nt-style cmdexe ms-dos/windows batch files run by commandcom os/2's cmdexe 4nt respectively are similar shells that they enhance are more integrated with windows script host which comes with three pre-installed engines vbscript jscript vba which numerous third-party engines can be added with rexx perl python ruby tcl having pre-defined functions 4nt related programmes pc dos quite similar ms-dos whilst dr dos more different earlier versions windows nt are able run contemporary versions 4os2 by os/2 subsystem scripting languages are by definition able be extended for example ms-dos/windows 95/98 windows nt type systems allows for shell/batch programmes call tools like kixtart qbasic various basic rexx perl python implementations windows script host its installed engines on unix other posix-compliant systems awk sed are used extend string numeric processing ability shell scripts tcl perl rexx python have graphics toolkits can be used code functions procedures for shell scripts which pose speed bottleneck c fortran assembly language &c are much faster still add functionality not available shell language such sockets other connectivity functions heavy-duty text processing working with numbers if calling script does not have those abilities self-writing self-modifying code techniques like recursion direct memory access various types sorting more which are difficult impossible main script so on visual basic for applications vbscript can be used control communicate with such things spreadsheets databases scriptable programmes all types telecommunications software development tools graphics tools other software which can be accessed through component object model see also glue code interpreter directive shebang symbol unix shells windows powershell windows script host references kernighan brian w pike rob using shell unix programming environment prentice hall inc p isbn 0-13-937699-2 shell actually programming language has variables loops decision-making so on unix shells by example pp 7-10 programming perl 5th edition preface robbins arnold hannah elbert lamb linda learning vi vim editors p easttom chuck essential linux administration comprehensive guide for beginners p csh programming considered harmful msdn windows nt workstation resource kit external links wikibooks has book on topic shell programming introduction shell programming by greg goebel unix / linux shell scripting tutorial by steve parker shell scripting primer apple what watch out for when writing portable shell scripts by peter seebach free unix shell scripting books beginners/bashscripting ubuntu linux retrieved from https//enwikipediaorg/w/indexphptitle=shellscript&oldid=750149395 categories scripting languages hidden categories articles needing additional references from february all articles needing additional references wikipedia introduction cleanup from september all pages needing cleanup articles covered by wikiproject wikify from september all articles covered by wikiproject wikify navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages العربية čeština français galego 한국어 íslenska nederlands 日本語 português русский suomi 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 