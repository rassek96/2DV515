cobol from wikipedia free encyclopedia jump navigation search this article about compiled programming language for other uses see cobol disambiguation cobol paradigm procedural imperative object-oriented designed by howard bromberg howard discount vernon reeves jean e sammet william selden gertrude tierney developers codasyl ansi iso first appeared years ago stable release iso/iec / typing discipline weak static filename extensions cbl cob cpy website cobolstandardinfo major implementations gnucobol ibm cobol micro focus visual cobol dialects acucobol-gt cobol-it cobol/2 dec cobol-10 dec vax cobol dosvs cobol fujitsu cobol hitachi cobol2002 hp3000 cobol/ii ibm cobol saa ibm cobol/400 ibm cobol/ii ibm enterprise cobol ibm ile cobol ibm os/vs cobol icl cobol iscobol micro focus cobol microsoft cobol realia cobol ryan mcfarland rm/cobol ryan mcfarland rm/cobol-85 tandem nonstop cobol85 tandem nonstop scobol univac cobol unisys mcp cobol74 unisys mcp cobol85 unix cobol x/open visual cobol wang vs cobol influenced by aimaco c++ comtran eiffel fact flow-matic smalltalk influenced cobolscript pl/i cobol at wikibooks cobol /ˈkoʊbɒl/ acronym for common business-oriented language compiled english-like computer programming language designed for business use imperative procedural since object-oriented cobol primarily used business finance administrative systems for companies governments cobol still widely used legacy applications deployed on mainframe computers such large-scale batch transaction processing jobs but due its declining popularity retirement experienced cobol programmers programs are being migrated new platforms rewritten modern languages replaced with software packages most programming cobol now purely maintain existing applications cobol was designed by codasyl was partly based on previous programming language design work by grace hopper commonly referred grandmother cobol was created part us department defense effort create portable programming language for data processing intended stopgap department defense promptly forced computer manufacturers provide resulting its widespread adoption was standardized has since been revised four times expansions include support for structured object-oriented programming current standard iso/iec cobol has english-like syntax which was designed be self-documenting highly readable however verbose uses over reserved words contrast with modern succinct syntax like y = x cobol has more english-like syntax this case move x y cobol code split into four divisions identification environment data procedure containing rigid hierarchy sections paragraphs sentences lacking large standard library standard specifies statements functions just one class academic computer scientists were generally uninterested business applications when cobol was created were not involved its design was effectively designed from ground up computer language for businessmen with emphasis on inputs outputs whose only data types were numbers strings text cobol has been criticized throughout its life however for its verbosity design process poor support for structured programming which resulted monolithic incomprehensible programs contents history specification o background o cobol o cobol-61 cobol-65 o cobol-68 o cobol-74 o cobol-85 o cobol object-oriented cobol o cobol o legacy features o syntax o code format o identification division + object-oriented programming o environment division + files o data division + aggregated data + other data levels + data types picture clause usage clause + report writer o procedure division + procedures + statements control flow i/o data manipulation + scope termination + self-modifying code o hello world + hello world criticism defense o lack structure o compatibility issues o verbose syntax o isolation from computer science community o concerns about design process o influences on other languages see also notes references o citations o sources external links history specification background late 1950s computer users manufacturers were becoming concerned about rising cost programming survey had found that any data processing installation programming cost us$800000 on average that translating programs run on new hardware would cost $600000 at time when new programming languages were proliferating at ever increasing rate same survey suggested that if common business-oriented language were used conversion would be far cheaper faster grace hopper inventor flow-matic predecessor cobol april mary k hawes called meeting representatives from academia computer users manufacturers at university pennsylvania organize formal meeting on common business languages representatives included grace hopper inventor english-like data processing language flow-matic jean sammet saul gorn group asked department defense dod sponsor effort create common business language delegation impressed charles phillips director data system research staff at dod who thought that they thoroughly understood dod's problems dod operated computers had further on order had spent over $200 million on implementing programs run on them portable programs would save time reduce costs ease modernization phillips agreed sponsor meeting tasked delegation with drafting agenda cobol on may exactly one year after zürich algol meeting meeting was held at pentagon discuss creation common programming language for business was attended by people was chaired by phillips department defense was concerned about whether could run same data processing programs on different computers fortran only mainstream language at time lacked features needed write such programs representatives enthusiastically described language that could work wide variety environments from banking insurance utilities inventory control they agreed unanimously that more people should be able program that new language should not be restricted by limitations contemporary technology majority agreed that language should make maximal use english be capable change be machine-independent be easy use even at expense power meeting resulted creation steering committee short- intermediate- long-range committees short-range committee was given september three months produce specifications for interim language which would then be improved upon by other committees their official mission however was identify strengths weaknesses existing programming languages did not explicitly direct them create new language deadline was met with disbelief by short-range committee one member betty holberton described three-month deadline gross optimism doubted that language really would be stopgap steering committee met on june agreed name entire activity committee on data systems languages codasyl form executive committee short-range committee was made up members representing six computer manufacturers three government agencies six computer manufacturers were burroughs corporation ibm minneapolis-honeywell honeywell labs rca sperry rand sylvania electric products three government agencies were us air force navy's david taylor model basin national bureau standards now national institute standards technology committee was chaired by joseph wegstein us national bureau standards work began by investigating data description statements existing applications user experiences committee mainly examined flow-matic aimaco comtran programming languages flow-matic language was particularly influential because had been implemented because aimaco was derivative with only minor changes flow-matic's inventor grace hopper also served technical adviser committee flow-matic's major contributions cobol were long variable names english words for commands separation data descriptions instructions ibm's comtran language invented by bob bemer was regarded competitor flow-matic by short-range committee made up colleagues grace hopper some its features were not incorporated into cobol so that would not look like ibm had dominated design process jean sammet said that there had been strong anti-ibm bias from some committee members herself included one case after roy goldfinger author comtran manual intermediate-range committee member attended subcommittee meeting support his language encourage use algebraic expressions grace hopper sent memo short-range committee reiterating sperry rand's efforts create language based on english grace hopper commented that cobol 95% flow-matic that comtran had had extremely small influence furthermore she said that she would claim that work was influenced by both flow-matic comtran only keep other people happy wouldn't try knock us out features from comtran incorporated into cobol included formulas picture clause improved if statement which obviated need for go tos more robust file management system usefulness committee's work was subject great debate while some members thought language had too many compromises was result design by committee others felt was better than three languages examined some felt language was too complex others too simple controversial features included those some considered useless too advanced for data processing users such features included boolean expressions formulas table subscripts indices another point controversy was whether make keywords context-sensitive effect that would have on readability although context-sensitive keywords were rejected approach was later used pl/i partially cobol from little consideration was given interactivity interaction with operating systems few existed at that time functions thought purely mathematical no use data processing specifications were presented executive committee on september they fell short expectations joseph wegstein noted that contains rough spots requires some additions bob bemer later described them hodgepodge subcommittee was given until december improve at mid-september meeting committee discussed new language's name suggestions included busy business system infosyl information system language cocosyl common computer systems language name cobol was suggested by bob bemer october intermediate-range committee received copies fact language specification created by roy nutt its features impressed committee so much that they passed resolution base cobol on this was blow short-range committee who had made good progress on specification despite being technically superior fact had not been created with portability mind through manufacturer user consensus also lacked demonstrable implementation allowing supporters flow-matic-based cobol overturn resolution rca representative howard bromberg also blocked fact so that rca's work on cobol implementation would not go waste 'and what name do you want inscribed' i said 'i'll write for you' i wrote name down cobol 'what kind name that' 'well it's polish name we shortened got rid lot unnecessary notation' “ ” howard bromberg on how he bought cobol tombstone soon became apparent that committee was too large for any further progress be made quickly frustrated howard bromberg bought $15 tombstone with cobol engraved on sent charles phillips demonstrate his displeasure sub-committee was formed analyze existing languages was made up six individuals william selden gertrude tierney ibm howard bromberg howard discount rca vernon reeves jean e sammet sylvania electric products sub-committee did most work creating specification leaving short-range committee review modify their work before producing finished specification cover cobol report specifications were approved by executive committee on january sent government printing office which printed these cobol language's stated objectives were allow efficient portable programs be easily written allow users move new systems with minimal effort cost be suitable for inexperienced programmers codasyl executive committee later created cobol maintenance committee answer questions from users vendors improve expand specifications during list manufacturers planning build cobol compilers grew by september five more manufacturers had joined codasyl bendix control data corporation general electric ge national cash register philco all represented manufacturers had announced cobol compilers ge ibm planned integrate cobol into their own languages gecom comtran respectively contrast international computers tabulators planned replace their language codel with cobol meanwhile rca sperry rand worked on creating cobol compilers first cobol program ran on august on rca on december same cobol program albeit with minor changes ran on rca computer remington-rand univac computer demonstrating that compatibility could be achieved relative influences which languages were used continues this day recommended advisory printed all cobol reference manuals cobol industry language not property any company group companies any organization group organizations no warranty expressed implied made by any contributor by codasyl cobol committee accuracy functioning programming system language moreover no responsibility assumed by any contributor by committee connection therewith authors copyright holders copyrighted material used herein are follows flow-matic trademark unisys corporation programming for univac r i ii data automation systems copyrighted by unisys corporation ibm commercial translator form no f28-8013 copyrighted by ibm fact dsi 27a5260-2760 copyrighted by minneapolis-honeywell they have specifically authorized use this material whole part cobol specifications such authorization extends reproduction use cobol specifications programming manuals similar publications cobol-61 cobol-65 rather unlikely that cobol will be around by end decade anonymous june many logical flaws were found cobol leading ge's charles katz warn that could not be interpreted unambiguously reluctant short-term committee enacted total cleanup by march was reported that cobol's syntax was definable algol's although semantic ambiguities remained early cobol compilers were primitive slow us navy evaluation found compilation speeds 3–11 statements per minute by mid-1964 they had increased 11–1000 statements per minute was observed that increasing memory would drastically increase speed that compilation costs varied wildly costs per statement were between $023 $1891 late ibm announced that cobol would be their primary development language that development comtran would cease cobol specification was revised three times five years after its publication cobol-60 was replaced by cobol-61 this was then replaced by cobol-61 extended specifications which introduced sort report writer facilities added facilities corrected flaws identified by honeywell late letter short-range committee cobol edition brought further clarifications specifications introduced facilities for handling mass storage files tables cobol-68 efforts began standardize cobol overcome incompatibilities between versions late both iso united states america standards institute now ansi formed groups create standards ansi produced usa standard cobol x323 august which became cornerstone for later versions this version was known american national standard ans cobol was adopted by iso cobol-74 by cobol had become most widely used programming language world independently ansi committee codasyl programming language committee was working on improving language they described new versions including changes such new inter-program communication debugging file merging facilities well improved string-handling library inclusion features although codasyl was independent ansi committee codasyl journal development was used by ansi identify features that were popular enough warrant implementing programming language committee also liaised with ecma japanese cobol standard committee programming language committee was not well-known however vice-president william rinehuls complained that two-thirds cobol community did not know committee's existence was also poor lacking funds make public documents such minutes meetings change proposals freely available ansi published revised version ans cobol containing new features such file organizations delete statement segmentation module deleted features included note statement examine statement which was replaced by inspect implementer-defined random access module which was superseded by new sequential relative i/o modules these made up changes which rendered existing statements incompatible with new standard report writer was slated be removed from cobol but was reinstated before standard was published iso later adopted updated standard cobol-85 june work began on revising cobol-74 proposed standard commonly called cobol-80 differed significantly from previous one causing concerns about incompatibility conversion costs january joseph t brophy senior vice-president travelers insurance threatened sue standard committee because was not upwards compatible with cobol-74 mr brophy described previous conversions their 40-million-line code base non-productive complete waste our programmer resources later that year data processing management association dpma said was strongly opposed new standard citing prohibitive conversion costs enhancements that were forced on user during first public review period committee received responses which were negative form letters other responses were detailed analyses effect cobol-80 would have on their systems conversion costs were predicted be at least cents per line code fewer than dozen responses were favor proposed standard dpma withdrew its opposition standard citing responsiveness committee public concerns same year national bureau standards study concluded that proposed standard would present few problems year later cobol-80 compiler was released dec vax users who noted that conversion cobol-74 programs posed few problems new evaluate statement inline perform were particularly well received improved productivity thanks simplified control flow debugging second public review drew another mainly negative responses while last drew just by which time many concerns had been addressed late ansi published revised standard sixty features were changed deprecated many were added such scope terminators end-if end-perform end-read etc nested subprograms continue no-operation statement evaluate switch statement initialize statement that can set groups data their default values inline perform loop bodies – previously loop bodies had be specified separate procedure reference modification which allows access substrings i/o status codes standard was adopted by iso same year two amendments followed first introducing intrinsic functions other providing corrections iso adopted amendments respectively before subsequently taking primary ownership development standard cobol object-oriented cobol gartner group estimated that there were total billion lines cobol existence which ran 80% all business programs early 1990s work began on adding object-orientation next full revision cobol object-oriented features were taken from c++ smalltalk initial estimate was have this revision completed by iso committee draft cd was available by some vendors including micro focus fujitsu ibm introduced object-oriented syntax based on drafts full revision final approved iso standard was approved published late fujitsu/gtsoftware micro focus raincode introduced object-oriented cobol compilers targeting net framework there were many other new features many which had been codasyl cobol journal development since had missed opportunity be included cobol-85 these other features included free-form code user-defined functions recursion locale-based processing support for extended character sets such unicode floating-point binary data types until then binary items were truncated based on their declaration's base-10 specification portable arithmetic results bit boolean data types pointers syntax for getting freeing storage screen section for text-based user interfaces validate facility improved interoperability with other programming languages framework environments such net java three corrigenda were published for standard two one cobol between three technical reports were produced describing object finalization xml processing collection classes for cobol cobol suffered from poor support no compilers completely supported standard micro focus found that was due lack user demand for new features due abolition nist test suite which had been used test compiler conformance standardization process was also found be slow under-resourced cobol includes following changes portable arithmetic results have been replaced by ieee data types major features have been made optional such validate facility report writer screen-handling facility method overloading dynamic capacity tables feature dropped from draft cobol legacy cobol programs are used globally governments businesses are running on diverse operating systems such z/os vme unix openvms windows gartner group reported that 80% world's business ran on cobol with over billion lines code billion lines more being written annually near end 20th century year problem y2k was focus significant cobol programming effort sometimes by same programmers who had designed systems decades before particular level effort required correct cobol code has been attributed large amount business-oriented cobol business applications use dates heavily fixed-length data fields after clean-up effort put into these programs for y2k survey found that many remained use authors said that survey data suggest gradual decline importance cobol application development over years unless integration with other languages technologies can be adopted computerworld surveys found that over 60% organizations used cobol more than c++ visual basic net that for half those cobol was used for majority their internal software 36% managers said they planned migrate from cobol 25% said they would like if was cheaper instead some businesses have migrated their systems from expensive mainframes cheaper more modern systems while maintaining their cobol programs features syntax cobol has english-like syntax which used describe nearly everything program for example condition can be expressed x greater than y more concisely x greater y x > y more complex conditions can be abbreviated by removing repeated conditions variables for example > b > c = d can be shortened > b c = d consequence this english-like syntax cobol has over keywords some keywords are simple alternative pluralized spellings same word which provides for more english-like statements clauses eg keywords can be used interchangeably can are value values each cobol program made up four basic lexical items words literals picture character-strings see § picture clause separators words include reserved words user-defined identifiers they are up characters long may include letters digits hyphens underscores literals include numerals eg strings eg 'hello' separators include space character commas semi-colons followed by space cobol program split into four divisions identification division environment division data division procedure division identification division specifies name type source element where classes interfaces are specified environment division specifies any program features that depend on system running such files character sets data division used declare variables parameters procedure division contains program's statements each division sub-divided into sections which are made up paragraphs code format cobol can be written two formats fixed default free fixed-format code must be aligned fit certain areas until cobol these were name columns usage sequence number area 1–6 originally used for card/line numbers this area ignored by compiler indicator area following characters are allowed here – comment line / – comment line that will be printed on new page source listing - – continuation line where words literals from previous line are continued d – line enabled debugging mode which otherwise ignored area 8–11 this contains division section procedure headers level numbers file/report descriptors area b 12–72 any other code not allowed area program name area 73– historically up column for punched cards used identify program sequence card belongs cobol areas b were merged form program-text area which now ends at implementor-defined column cobol also introduced free-format code free-format code can be placed any column file newer programming languages comments are specified using > which can be placed anywhere can also be used fixed-format source code continuation lines are not present >>page directive replaces / indicator identification division identification division identifies following code entity contains definition class interface object-oriented programming classes interfaces have been cobol since classes have factory objects containing class methods variables instance objects containing instance methods variables inheritance interfaces provide polymorphism support for generic programming provided through parameterized classes which can be instantiated use any class interface objects are stored references which may be restricted certain type there are two ways calling method invoke statement which acts similarly call through inline method invocation which analogous using functions > these are equivalent invoke my-class foo returning var move my-classfoo var > inline method invocation cobol does not provide way hide methods class data can be hidden however by declaring without property clause which leaves user with no way access method overloading was added cobol environment division environment division contains configuration section input-output section configuration section used specify variable features such currency signs locales character sets input-output section contains file-related information files cobol supports three file formats organizations sequential indexed relative sequential files records are contiguous must be traversed sequentially similarly linked list indexed files have one more indexes which allow records be randomly accessed which can be sorted on them each record must have unique key but other alternate record keys need not be unique implementations indexed files vary between vendors although common implementations such c‑isam vsam are based on ibm's isam relative files like indexed files have unique record key but they do not have alternate keys relative record's key its ordinal position for example 10th record has key this means that creating record with key may require creation empty preceding records relative files also allow for both sequential random access common non-standard extension line sequential organization used process text files records file are terminated by newline may be varying length data division data division split into six sections which declare different items file section for file records working-storage section for static variables local-storage section for automatic variables linkage section for parameters return value report section screen section for text-based user interfaces aggregated data data items cobol are declared hierarchically through use level-numbers which indicate if data item part another item with higher level-number subordinate item with lower one top-level data items with level-number are called records items that have subordinate aggregate data are called group items those that do not are called elementary items level-numbers used describe standard data items are between some-record > aggregate group record item num pic > elementary item the-date > aggregate subgroup record item the-year pic > elementary item the-month pic > elementary item the-day pic > elementary item above example elementary item num group item the-date are subordinate record some-record while elementary items the-year the-month the-day are part group item the-date subordinate items can be disambiguated with keyword for example consider example code above along with following example sale-date the-year pic the-month pic the-day pic names the-year the-month the-day are ambiguous by themselves since more than one data item defined with those names specify particular data item for instance one items contained within sale-date group programmer would use the-year sale-date equivalent the-year sale-date this syntax similar dot notation supported by most contemporary languages other data levels level-number used declare re-grouping previously defined items irrespective how those items are structured this data level also referred by associated renames clause rarely used circa was usually found old programs its ability ignore hierarchical logical structure data meant its use was not recommended many installations forbade its use customer-record cust-key pic x10 cust-name cust-first-name pic x30 cust-last-name pic x30 cust-dob pic cust-balance pic 97v99 cust-personal-details renames cust-name thru cust-dob cust-all-details renames cust-name thru cust-balance level-number indicates item stand-alone such situations equivalent level-number for example following code declares two 77-level data items property-name sales-region which are non-group data items that are independent not subordinate any other data items property-name pic x80 sales-region pic level-number declares condition name so-called 88-level which true when its parent data item contains one values specified value clause for example following code defines two 88-level condition-name items that are true false depending on current character data value wage-type data item when data item contains value 'h' condition-name wage-is-hourly true whereas when contains value 's' 'y' condition-name wage-is-yearly true if data item contains some other value both condition-names are false wage-type pic x wage-is-hourly value h wage-is-yearly value s y data types standard cobol provides following data types data type sample declaration notes alphabetic pic a30 may only contain letters spaces alphanumeric pic x30 may contain any characters boolean pic usage bit data stored form 0s 1s binary number index usage index used reference table elements national pic n30 similar alphanumeric but using extended character set eg utf-8 numeric pic 95v95 may contain only numbers object usage object reference may reference either object null pointer usage pointer type safety variable cobol numeric data converted between different representations sizes silently alphanumeric data can be placed any data item that can be stored string including numeric group data contrast object references pointers may only be assigned from items same type their values may be restricted certain type picture clause picture pic clause string characters each which represents portion data item what may contain some picture characters specify type item how many characters digits occupies memory for example indicates decimal digit s indicates that item signed other picture characters called insertion editing characters specify how item should be formatted for example series + characters define character positions well how leading sign character be positioned within final character data rightmost non-numeric character will contain item's sign while other character positions corresponding + left this position will contain space repeated characters can be specified more concisely by specifying number parentheses after picture character for example equivalent picture specifications containing only digit sign s characters define purely numeric data items while picture specifications containing alphabetic alphanumeric x characters define alphanumeric data items presence other formatting characters define edited numeric edited alphanumeric data items examples picture clause value value out pic hello hello this legal but results undefined behavior pic +++++ note leading spaces pic 99/99/94 31/04/2003 pic pic x3bx3bx3 abcdefghi abc def ghi usage clause usage clause declares format data stored depending on data type can either complement be used instead picture clause while can be used declare pointers object references mostly geared towards specifying numeric types these numeric formats are binary where minimum size either specified by picture clause by usage clause such binary-long usage computational where data may be stored whatever format implementation provides often equivalent usage binary usage display default format where data stored string floating-point either implementation-dependent format according ieee usage national where data stored string using extended character set usage packed-decimal where data stored smallest possible decimal format typically packed binary-coded decimal report writer report writer declarative facility for creating reports programmer need only specify report layout data required produce freeing them from having write code handle things like page breaks data formatting headings footings reports are associated with report files which are files which may only be written through report writer statements fd report-out report sales-report each report defined report section data division report split into report groups which define report's headings footings details reports work around hierarchical control breaks control breaks occur when key variable changes value for example when creating report detailing customers' orders control break could occur when program reaches different customer's orders here example report description for report which gives salesperson's sales which warns any invalid records rd sales-report page limits lines first detail controls seller-name type page heading col value sales report col value page col pic z9 source page-counter sales-on-day type detail line + col value sales on col pic 99/99/9999 source sales-date col value were col pic $$$$999 source sales-amount invalid-sales type detail line + col value invalid record col pic x34 source sales-record type control heading seller-name line + col value seller col pic x30 source seller-name above report description describes following layout sales report page seller howard bromberg sales on 10/12/2008 were $100000 sales on 12/12/2008 were $000 sales on 13/12/2008 were $3147 invalid record howard bromberg xxxxyy seller howard discount sales report page sales on 08/05/2014 were $54398 invalid record william selden 12o52014foofoo sales on 30/05/2014 were $000 four statements control report writer initiate which prepares report writer for printing generate which prints report group suppress which suppresses printing report group terminate which terminates report processing for above sales report example procedure division might look like this open input sales output report-out initiate sales-report perform until read sales at end exit perform end-read validate sales-record if valid-record generate sales-on-day else generate invalid-sales end-if end-perform terminate sales-report close sales report-out procedure division procedures sections paragraphs procedure division collectively called procedures can be used labels simple subroutines unlike other divisions paragraphs do not need be sections execution goes down through procedures program until terminated use procedures subroutines perform verb used this transfers control specified range procedures returns only upon reaching end mine armed when screen invalid unusual control flow can trigger mines which cause control performed procedures return at unexpected times unexpected locations procedures can be reached three ways they can be called with perform jumped from go through execution falling through bottom above paragraph combinations these invoke undefined behavior creating mines specifically mines occur when execution range procedures would cause control flow go past last statement range procedures already being performed for example code adjacent image mine tripped at end update-screen when screen invalid when screen invalid control jumps fix-screen section which when done performs update-screen this recursion triggers undefined behavior there are now two overlapping ranges procedures being performed mine then triggered upon reaching end update-screen means control could return one two locations first perform statement perform statement fix-screen where would then fall-through into update-screen return first perform statement upon reaching end statements cobol has statements also called verbs which can be grouped into following broad categories control flow i/o data manipulation report writer report writer statements are covered report writer section control flow cobol's conditional statements are if evaluate evaluate switch-like statement with added capability evaluating multiple values conditions this can be used implement decision tables for example following might be used control cnc lathe evaluate true also desired-speed also current-speed when lid-closed also min-speed thru max-speed also less than desired-speed perform speed-up-machine when lid-closed also min-speed thru max-speed also greater than desired-speed perform slow-down-machine when lid-open also any also not zero perform emergency-stop when other continue end-evaluate perform statement used define loops which are executed until condition true not while unlike other languages also used call procedures ranges procedures see procedures section for more details call invoke call subprograms methods respectively name subprogram/method contained string which may be literal data item parameters can be passed by reference by content where copy passed by reference by value but only if prototype available cancel unloads subprograms from memory go causes program jump specified procedure goback statement return statement stop statement stops program exit statement has six different formats can be used return statement break statement continue statement end marker leave procedure exceptions are raised by raise statement caught with handler declarative defined declaratives portion procedure division declaratives are sections beginning with use statement which specify errors handle exceptions can be names objects resume used declarative jump statement after one that raised exception procedure outside declaratives unlike other languages uncaught exceptions may not terminate program program can proceed unaffected i/o file i/o handled by self-describing open close read write statements along with further three rewrite which updates record start which selects subsequent records access by finding record with certain key unlock which releases lock on last record accessed user interaction done using accept display data manipulation following verbs manipulate data initialize which sets data items their default values move which assigns values data items set which has formats can modify indices assign object references alter table capacities among other functions add subtract multiply divide compute which handle arithmetic with compute assigning result formula variable allocate free which handle dynamic memory validate which validates distributes data specified item's description data division string unstring which concatenate split strings respectively inspect which tallies replaces instances specified substrings within string search which searches table for first entry satisfying condition files tables are sorted using sort merge verb merges sorts files release verb provides records sort return retrieves sorted records order scope termination some statements such if read may themselves contain statements such statements may be terminated two ways by period implicit termination which terminates all unterminated statements contained by scope terminator which terminates nearest matching open statement > terminator period implicit termination if invalid-record if no-more-records next sentence else read record-file at end set no-more-records true > scope terminators explicit termination if invalid-record if no-more-records continue else read record-file at end set no-more-records true end-read end-if end-if nested statements terminated with period are common source bugs for example examine following code if x display y display z here intent display y z if condition x true however z will be displayed whatever value x because if statement terminated by erroneous period after display y another bug result dangling else problem when two if statements can associate with else if x if y display else display b above fragment else associates with if y statement instead if x statement causing bug prior introduction explicit scope terminators preventing would require else next sentence be placed after inner if self-modifying code original cobol specification supported infamous alter x proceed y statement for which many compilers generated self-modifying code x y are procedure labels single go statement procedure x executed after such alter statement means go y instead many compilers still support but was deemed obsolete cobol standard deleted hello world hello world program cobol identification division program-id hello-world procedure division display hello world hello world when – now famous – hello world program example c programming language was first published similar mainframe cobol program sample would have been submitted through jcl very likely using punch card reader column punch cards listing below with empty data division was tested using gnu/linux system/370 hercules emulator running mvs 38j jcl written july derived from hercules tutorials samples hosted by jay moseley keeping with cobol programming that era hello world displayed all capital letters //cobuclg job 001'cobol base test' // class=amsgclass=amsglevel=11 //basetest exec cobuclg //cobsysin dd validation base cobol install identification division program-id 'hello' environment division configuration section source-computer gnulinux object-computer hercules special-names console consl data division procedure division 00-main display 'hello world' upon consl stop run //lkedsyslib dd dsname=sys1coblibdisp=shr // dd dsname=sys1linklibdisp=shr //gosysprint dd sysout=a // after submitting jcl mvs console displayed job $hasp100 cobuclg on reader1 cobol base test job ief677i warning messages for job cobuclg issued job $hasp373 cobuclg started - init - class - sys bsp1 job iec130i syspunch dd statement missing job iec130i syslib dd statement missing job iec130i syspunch dd statement missing job iefactrt - stepname procstep program retcode job cobuclg basetest cob ikfcbl00 rc= job cobuclg basetest lked iewl rc= job +hello world job cobuclg basetest go pgm=dd rc= job $hasp395 cobuclg ended line console listing above highlighted for effect highlighting not part actual console output associated compiler listing generated over four pages technical detail job run information for single line output from lines cobol criticism defense lack structure 1970s programmers began moving away from unstructured spaghetti code structured programming paradigm his letter editor entitled how do we tell truths that might hurt which was critical several cobol's contemporaries computer scientist turing award recipient edsger dijkstra remarked that use cobol cripples mind its teaching should therefore be regarded criminal offense his dissenting response dijkstra's article above offensive statement computer scientist howard e tompkins defended structured cobol cobol programs with convoluted control flow indeed tend 'cripple mind' but this was because there are too many such business application programs written by programmers that have never had benefit structured cobol taught well one cause spaghetti code was go statement attempts remove go tos from cobol code however resulted convoluted programs reduced code quality go tos were largely replaced by perform statement procedures which promoted modular programming gave easy access powerful looping facilities however perform could only be used with procedures so loop bodies were not located where they were used making programs harder understand cobol programs were infamous for being monolithic lacking modularization cobol code could only be modularized through procedures which were found be inadequate for large systems was impossible restrict access data meaning procedure could access modify any data item furthermore there was no way pass parameters procedure omission jean sammet regarded committee's biggest mistake another complication stemmed from ability perform thru specified sequence procedures this meant that control could jump return from any procedure creating convoluted control flow permitting programmer break single-entry single-exit rule this situation improved cobol adopted more features cobol-74 added subprograms giving programmers ability control data each part program could access cobol-85 then added nested subprograms allowing programmers hide subprograms further control over data code came when object-oriented programming user-defined functions user-defined data types were included nevertheless much important legacy cobol software uses unstructured code which has become unmaintainable can be too risky costly modify even simple section code since may be used from unknown places unknown ways compatibility issues cobol was intended be highly portable common language however by around dialects had been created one source dialects was standard itself standard was composed one mandatory nucleus eleven functional modules each containing two three levels support this permitted official variants cobol-85 was not fully compatible with earlier versions its development was controversial joseph t brophy cio travelers insurance spearheaded effort inform cobol users heavy reprogramming costs implementing new standard result ansi cobol committee received more than letters from public mostly negative requiring committee make changes on other hand conversion cobol-85 was thought increase productivity future years thus justifying conversion costs verbose syntax cobol /koh′bol/ n weak verbose flabby language used by code grinders do boring mindless things on dinosaur mainframes its very name seldom uttered without ritual expressions disgust horror “ ” jargon file cobol syntax has often been criticized for its verbosity proponents say that this was intended make code self-documenting easing program maintenance cobol was also intended be easy for programmers learn use while still being readable non-technical staff such managers desire for readability led use english-like syntax structural elements such nouns verbs clauses sentences sections divisions yet by maintainers cobol programs were struggling deal with incomprehensible code main changes cobol-85 were there help ease maintenance jean sammet short-range committee member noted that little attempt was made cater professional programmer fact people whose main interest programming tend be very unhappy with cobol which she attributed cobol's verbose syntax isolation from computer science community cobol community has always been isolated from computer science community no academic computer scientists participated design cobol all those on committee came from commerce government computer scientists at time were more interested fields like numerical analysis physics system programming than commercial file-processing problems which cobol development tackled jean sammet attributed cobol's unpopularity initial snob reaction due its inelegance lack influential computer scientists participating design process disdain for business data processing cobol specification used unique notation metalanguage define its syntax rather than new backus–naur form because few committee members had heard this resulted severe criticism later cobol suffered from shortage material covering took until for introductory books appear with richard d irwin publishing college textbook on cobol by there were twice many books on fortran four times many on basic on cobol library congress university professors taught more modern state-of-the-art languages techniques instead cobol which was said have trade school nature donald nelson chair codasyl cobol committee said that academics hate cobol that computer science graduates had 'hate cobol' drilled into them poll by micro focus found that 20% university academics thought cobol was outdated dead that 55% believed their students thought cobol was outdated dead same poll also found that only 25% academics had cobol programming on their curriculum even though 60% thought they should teach contrast cobol featured 80% information systems curricula united states same proportion c++ java concerns about design process doubts have been raised about competence standards committee short-term committee member howard bromberg said that there was little control over development process that was plagued by discontinuity personnel lack talent jean sammet jerome garfunkel also noted that changes introduced one revision standard would be reverted next due much changes who was standard committee objective evidence cobol standards have repeatedly suffered from delays cobol-85 arrived five years later than hoped cobol was five years late cobol was six years late combat delays standard committee allowed creation optional addenda which would add features more quickly than by waiting for next standard revision however some committee members raised concerns about incompatibilities between implementations frequent modifications standard influences on other languages cobol's data structures influenced subsequent programming languages its record file structure influenced pl/i pascal redefines clause was predecessor pascal's variant records explicit file structure definitions preceded development database management systems aggregated data was significant advance over fortran's arrays cobol's copy facility although considered primitive influenced development include directives focus on portability standardization meant programs written cobol could be portable facilitated spread language wide variety hardware platforms operating systems additionally well-defined division structure restricts definition external references environment division which simplifies platform changes particular see also computer programming portal programming language genealogies alphabetical list programming languages comparison programming languages codasyl notes b c specifically influenced cobol 2002's object-oriented features tombstone currently at computer history museum vendor-specific extensions cause many implementations have far more one implementation recognizes over keywords references citations b c saade henry wallace ann october cobol '97 status report dr dobb's journal retrieved april b arranga edmund c coyle frank p february object-oriented cobol cambridge university press p isbn 978-0132611404 object-oriented cobol's style reflects influence smalltalk c++ arranga edmund c coyle frank p march cobol perception reality computer ieee doi 101109/2573683 issn 0018-9162 subscription required help imajo tetsuji et al september cobol script business-oriented scripting language enterprise distributed object computing conference makuhari japan ieee doi101109/edoc2000882363 isbn subscription required help radin george wexelblat richard l ed early history characteristics pl/i history programming languages academic press published p doi101145/8000251198410 isbn subscription required help mitchell robert l march brain drain where cobol systems go from here computerworld retrieved february b c mitchell robert l october cobol not dead yet computerworld retrieved april porter adams vicki october captain grace m hopper mother cobol infoworld issn 0199-6649 betts mitch jan grace hopper mother cobol dies computerworld issn 0010-4841 lohr steve go story math majors bridge players engineers chess wizards maverick scientists iconoclasts--the programmers who created software revolution basic books p isbn 978-0786730766 ensmenger nathan l computer boys take over computers programmers politics technical expertise mit press p isbn 978-0262050937 lccn iso/iec iso may retrieved june beyer p gürer denise pioneering women computer science sigcse bull 175–180 doi101145/543812543853 issn 0097-8418 beyer pp 281–282 sammet 1978a p beyer p beyer p early meetings conference on data systems languages ieee annals history computing doi 101109/mahc198510047 subscription required help b c d e sammet p beyer p b conner p id/9 sammet 1978a p b c d bemer p beyer p sammet 1978a p codasyl § i211 sammet 1978a p codasyl § i12 beyer p sammet jean early history cobol acm sigplan notices association for computing machinery inc 121–161 doi 101145/960118808378 retrieved january subscription required help sammet 1978a p b beyer p bemer p beyer p sammet 1978a p beyer p oral history captain grace hopper pdf computer history museum december p retrieved june sammet 1978a p marcotty p sammet 1978a pp 205–206 b sammet 1978a figure sammet 1978a pp 230–231 iso/iec jtc 1/sc 22/wg p sammet 1978a p sammet 1978a p sammet 1978a p sullivan patricia june computer pioneer bob bemer washington post p b06 retrieved june bemer bob thoughts on past future archived from original on may retrieved june beyer p beyer p b story cobol tombstone pdf computer museum report computer museum 8–9 summer archived pdf from original on april retrieved june cobol tombstone computer history museum retrieved june bemer p beyer p codasyl § i11 brown p b c bemer p b beyer p williams kathleen broome november grace hopper admiral cyber sea us naval institute press isbn 978-1612512655 oclc compaq computer corporation compaq cobol reference manual order number aa–q2g0f–tk october page xviii fujitsu corporation net cobol language reference version january ibm corporation enterprise cobol for z/os language reference version release sc23-8528-00 december garfunkel jerome november defense cobol computerworld id/19 b bemer p brown p codasyl § i224 codasyl § i23 b c d follet robert h sammet jean e ralston anthony reilly edwin d hemmendinger david eds programming language standards encyclopedia computer science 4th ed wiley p isbn subscription required help b beyer p b brown p brown p taylor alan august few realise wasted resources local dp schools computerworld triance j m programming cobol course twelve television lectures manchester university press p isbn klein p baird george n oliver paul may standard x323–1974 programming language standards—who needs them pdf technical report department navy pp 19–21 archived pdf from original on january retrieved january culleton john r jr july 'spotty' availability problem computerworld issn 0010-4841 cs1 maint multiple names authors list link simmons williams b june does cobol's report writer really miss mark computerworld issn 0010-4841 shoor rita january user threatens suit over ansi cobol-80 computerworld issn 0010-4841 shoor rita october dpma takes stand against cobol draft computerworld 1–2 issn 0010-4841 b c gallant john september revised cobol standard may be ready late '85 computerworld issn 0010-4841 b expert addresses cobol standard computerworld september issn 0010-4841 paul lois march responses cobol-80 overwhelmingly negative computerworld issn 0010-4841 paul lois april study sees few problems switching cobol-8x computerworld gillin paul november dec users get head start implementing cobol-80 computerworld issn 0010-4841 garfunkel p roy m k dastidar d ghost june features cobol-85 cobol programming problems solutions 2nd ed mcgraw-hill education pp 438–451 isbn 978-0074603185 robinson brian july cobol remains old standby at agencies despite showing its age fcw public sector media group retrieved april b cobol standards micro focus archived from original on march retrieved september netcobol for net netcobolcom gtsoftware archived from original on july retrieved january list codasyl cobol features computerworld september p id/28 issn 0010-4841 retrieved june iso/iec jtc 1/sc 22/wg annex f klein p b jtc1/sc22/wg4 - cobol iso june retrieved april billman john klink huib february thoughts on future cobol standardization pdf retrieved august iso/iec jtc 1/sc 22/wg annex e schricker don december j4 cobol standardization micro focus archived from original on february retrieved july kizior ronald j carr donald halpern paul does cobol have future pdf proceedings information systems education conference retrieved carr & kizior p carr & kizior p cobol brain drain survey results computerworld march retrieved april iso/iec jtc 1/sc 22/wg § reserved words table micro focus visual cobol cobol language reference micro focus retrieved march iso/iec jtc 1/sc 22/wg § iso/iec jtc 1/sc 22/wg § b iso/iec jtc 1/sc 22/wg § f2 iso/iec jtc 1/sc 22/wg § d182 iso/iec jtc 1/sc 22/wg § d18 iso/iec jtc 1/sc 22/wg p iso/iec jtc 1/sc 22/wg p iso/iec jtc 1/sc 22/wg § d21 file organizations file handling micro focus retrieved june iso/iec jtc 1/sc 22/wg § cutler appendix hubbell thane sams teach yourself cobol hours sams publishing p isbn 978-0672314537 lccn mccracken & golden § cutler § iso/iec jtc 1/sc 22/wg § b iso/iec jtc 1/sc 22/wg § iso/iec jtc 1/sc 22/wg § iso/iec jtc 1/sc 22/wg § iso/iec jtc 1/sc 22/wg § iso/iec jtc 1/sc 22/wg p iso/iec jtc 1/sc 22/wg § iso/iec jtc 1/sc 22/wg § field john ramalingam g september identifying procedural structure cobol programs pdf paste '99 doi 101145/381788316163 isbn veerman niels verhoeven ernst-jan november cobol minefield detection pdf software—practice experience wiley doi 101002/spev3614 archived from original pdf on march iso/iec jtc 1/sc 22/wg4 § iso/iec jtc 1/sc 22/wg §§ iso/iec jtc 1/sc 22/wg § d6522 iso/iec jtc 1/sc 22/wg § iso/iec jtc 1/sc 22/wg §149351 iso/iec jtc 1/sc 22/wg p b mccracken & golden § examples compiler support for alter can be seen following o tiffin brian september september gnu cobol retrieved january o alter statement micro focus visual cobol for visual studio cobol language reference micro focus retrieved january o alter statement nucleus pdf cobol85 reference manual fujitsu november p archived from original pdf on january retrieved january o alter statement enterprise cobol for z/os language reference ibm june retrieved january iso/iec jtc 1/sc 22/wg § f1 moseley jay january cobol compiler from mvt retrieved july dijkstra edsger w e w dijkstra archive how do we tell truths that might hurt ewd498 university texas at austin retrieved august tompkins h e defense teaching structured cobol computer science acm sigplan notices doi 101145/948176948186 subscription required help b riehle p shneiderman pp 349–350 coughlan michael march beginning cobol for programmers apress p isbn retrieved august sammet 1978b p riehle p riehle p cobol legacy code systemic risk | naked capitalism retrieved lämmel ralf verhoef chris november–december cracking 500-language problem pdf ieee software doi101109/52965809 archived from original pdf on august howkins t j harandi m t april towards more portable cobol pdf computer journal bcs doi 101093/comjnl/224290 garfunkel p garfunkel p raymond eric s october cobol jargon file version archived from original on august retrieved december brown p codasyl § ii11 shneiderman p sammet p b conner p id/10 marcotty p conner p id/14 sammet p marcotty p sammet 1978b p codasyl § shneiderman pp 348–349 b c shneiderman p shneiderman p interview cobol defender computerworld september pp id/29–id/32 issn 0010-4841 retrieved june academia needs more support tackle skills gap press release micro focus march retrieved august carr & kizior p sammet jean garfunkel jerome october summary changes cobol 1960–1985 annals history computing ieee doi101109/mahc198510033 subscription required help cook margaret m june ghosh sakti p liu leonard y eds data base facility for cobol pdf national computer conference anaheim california afips press pp 1107–1112 doi101109/afips197863 lccn 55-44701 retrieved september earliest date that new cobol standard could be developed approved year resolutions from wg4 meeting - june 26-28 las vegas nevada usa doc july p retrieved june june revision cobol standard babcock charles july cobol standard add-ons flayed computerworld marcotty michael wexelblat richard l ed full text all questions submitted history programming languages academic press published p doi101145/8000251198371 isbn subscription required help this can be seen o visual cobol ibm partnerworld ibm august archived from original on july retrieved february micro focus visual cobol delivers next generation cobol development deployment for linux x86-64 linux for system z aix hp/ux solaris windows o cobol compilers family ibmcom ibm archived from original on february retrieved february o tiffin brian january what platforms are supported by gnu cobol archived from original on december retrieved february coughlan michael introduction cobol retrieved february sources bemer bob view history cobol pdf honeywell computer journal honeywell retrieved june beyer kurt grace hopper invention information age mit press isbn 978-0262013109 lccn brown william r december cobol belzer jack holzman albert g kent allen encyclopedia computer science technology volume crc press isbn 978-0824722555 carr donald e kizior ronald j december continued relevance cobol business academia current situation comparison year study pdf information systems education journal aitp issn 1545-679x retrieved august codasyl july codasyl cobol journal development national bureau standards issn 0591-0218 lccn conner richard l may cobol your age showing computerworld international data group id/7–id/18 issn 0010-4841 cutler gary april gnu cobol programmer's guide pdf 3rd ed retrieved february garfunkel jerome cobol example book wiley isbn iso/iec jtc 1/sc 22/wg december iso/iec – programming language cobol iso archived from original zip pdf on january retrieved september iso/iec jtc 1/sc 22/wg october incits/iso/iec – programming language cobol incits klein william m october history cobol pdf archived from original pdf on january retrieved january marcotty michael wexelblat richard l ed transcript question answer session history programming languages academic press published p doi101145/8000251198370 isbn subscription required help mccracken daniel d golden donald g simplified guide structured cobol programming 2nd ed wiley isbn lccn riehle richard l august perform considered harmful communications acm acm 125–128 doi 101145/135226376106 subscription required help sammet jean e may method combining algol cobol papers presented at may 9–11 western joint ire–aiee–acm computer conference acm pp 379–387 doi101145/14606901460734 subscription required help sammet jean e 1978a wexelblat richard l ed early history cobol history programming languages academic press published doi101145/8000251198367 isbn subscription required help sammet jean e 1978b wexelblat richard l ed transcript presentation history programming languages academic press published doi101145/8000251198368 isbn subscription required help sammet jean e july cobol reilly edwin d concise encyclopedia computer science wiley isbn 978-0470090954 oclc shneiderman b october relationship between cobol computer science annals history computing ieee 348–352 doi101109/mahc198510041 external links find more aboutcobolat wikipedia's sister projects definitions from wiktionary media from commons textbooks from wikibooks learning resources from wikiversity data from wikidata official website cobol at dmoz gnucobol sandbox for gnucobol tinkering web enabled cobol-f compiler for small experiments v t e programming languages comparison timeline history assembly basic c c++ c cobol fortran go haskell java javascript js lisp lua objective-c pascal perl php python ruby shell smalltalk swift visual basic net vbnet more category comparison lists o alphabetical o categorical o generational o non-english-based v t e iso standards by standard number list iso standards / iso romanizations / iec standards 1–9999 o o o o o o o o o o o o o o o o o o o 1073-1 o o o 8820-5 o o o o o o o o o -8-i o o o o o o o o 9000/9001 10000–19999 10118-3 o o o o o tr 12234-2 o o 13406-2 o o o o o o o o o o o wip 16612-2 ts 19775-1 19794-5 20000+ series 29199-2 o o o category authority control lccn sh85027548 gnd 4010323-7 bnf cb11941315s data retrieved from https//enwikipediaorg/w/indexphptitle=cobol&oldid=749652266 categories cobol procedural programming languages cross-platform software programming languages created by women programming languages created programming languages with iso standard net programming languages object-oriented programming languages statically typed programming languages class-based programming languages software computer-related introductions hidden categories pages containing links subscription-only content cs1 maint multiple names authors list good articles use american english from october all wikipedia articles written american english all articles with unsourced statements articles with unsourced statements from march all articles lacking reliable references articles lacking reliable references from january articles with specifically marked weasel-worded phrases from march articles with dmoz links wikipedia articles with lccn identifiers wikipedia articles with gnd identifiers wikipedia articles with bnf identifiers navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version other projects wikimedia commons languages afrikaans العربية azərbaycanca বাংলা беларуская български bosanski català čeština dansk deutsch eesti ελληνικά español esperanto euskara فارسی français gaeilge galego 한국어 հայերեն hrvatski bahasa indonesia interlingua italiano עברית ქართული кыргызча latina latviešu lietuvių magyar മലയാളം मराठी bahasa melayu nederlands 日本語 norsk bokmål oʻzbekcha/ўзбекча polski português română русский scots simple english slovenčina slovenščina српски / srpski srpskohrvatski / српскохрватски suomi svenska தமிழ் తెలుగు ไทย тоҷикӣ türkçe українська tiếng việt ייִדיש 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 