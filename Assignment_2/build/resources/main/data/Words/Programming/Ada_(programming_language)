ada programming language from wikipedia free encyclopedia jump navigation search ada paradigm multi-paradigm designed by mil-std-1815/ada jean ichbiah ada tucker taft ada tucker taft ada tucker taft first appeared february years ago 1980-02 stable release ada tc1 / february months ago preview release ada tc1 / april year ago 2015-04 typing discipline static strong safe nominative os cross-platform multi-platform filename extensions adb ads website wwwadaicorg major implementations adacore gnat green hills software optimising ada compiler ptc inc ptc apexada ptc objectada ddc-i score dialects spark ravenscar profile influenced by algol pascal c++ ada smalltalk ada java ada eiffel ada influenced c++ chapel eiffel java nim pl/sql pl/pgsql ruby rust seed7 sql/psm vhdl ada programming at wikibooks ada structured statically typed imperative wide-spectrum object-oriented high-level computer programming language extended from pascal other languages has built-in language support for design-by-contract extremely strong typing explicit concurrency offering tasks synchronous message passing protected objects non-determinism ada improves code safety maintainability by using compiler find errors favor runtime errors ada international standard current version known ada defined by iso/iec ada was originally designed by team led by jean ichbiah cii honeywell bull under contract united states department defense dod from supersede over programming languages used by dod at that time ada was named after ada lovelace 1815–1852 who credited with being first computer programmer contents features history standardization language constructs o hello world ada o data types o control structures o packages procedures functions o concurrency o pragmas see also references o international standards o rationale o books o archives external links features ada was originally targeted at embedded real-time systems ada revision designed by s tucker taft intermetrics between improved support for systems numerical financial object-oriented programming oop features ada include strong typing modularity mechanisms packages run-time checking parallel processing tasks synchronous message passing protected objects nondeterministic select statements exception handling generics ada added support for object-oriented programming including dynamic dispatch syntax ada minimizes choices ways perform basic operations prefers english keywords such else then symbols such || && ada uses basic arithmetical operators + - / but avoids using other symbols code blocks are delimited by words such declare begin end where end most cases followed by identifier block closes eg if … end if loop … end loop case conditional blocks this avoids dangling else that could pair with wrong nested if-expression other languages like c java ada designed for development very large software systems ada packages can be compiled separately ada package specifications package interface can also be compiled separately without implementation check for consistency this makes possible detect problems early during design phase before implementation starts large number compile-time checks are supported help avoid bugs that would not be detectable until run-time some other languages would require explicit checks be added source code for example syntax requires explicitly named closing blocks prevent errors due mismatched end tokens adherence strong typing allows detection many common software errors wrong parameters range violations invalid references mismatched types etc either during compile-time otherwise during run-time concurrency part language specification compiler can some cases detect potential deadlocks compilers also commonly check for misspelled identifiers visibility packages redundant declarations etc can provide warnings useful suggestions on how fix error ada also supports run-time checks protect against access unallocated memory buffer overflow errors range violations off-by-one errors array access errors other detectable bugs these checks can be disabled interest runtime efficiency but can often be compiled efficiently also includes facilities help program verification for these reasons ada widely used critical systems where any anomaly might lead very serious consequences eg accidental death injury severe financial loss examples systems where ada used include avionics atc railways banking military space technology ada's dynamic memory management high-level type-safe ada does not have generic untyped pointers nor does implicitly declare any pointer type instead all dynamic memory allocation deallocation must take place through explicitly declared access types each access type has associated storage pool that handles low-level details memory management programmer can either use default storage pool define new ones this particularly relevant for non-uniform memory access even possible declare several different access types that all designate same type but use different storage pools also language provides for accessibility checks both at compile time at run time that ensures that access value cannot outlive type object points though semantics language allow automatic garbage collection inaccessible objects most implementations do not support by default would cause unpredictable behaviour real-time systems ada does support limited form region-based memory management also creative use storage pools can provide for limited form automatic garbage collection since destroying storage pool also destroys all objects pool ada was designed resemble english language its syntax for comments double-dash -- resembling em dash denotes comment text comments stop at end line so there no danger unclosed comments accidentally voiding whole sections source code prefixing each line column with -- will skip all that code while being clearly denoted column repeated -- down page there no limit nesting comments thereby allowing prior code with commented-out sections be commented-out even larger sections all unicode characters are allowed comments such for symbolic formulas e=m×c² compiler double-dash treated end-of-line allowing continued parsing language context-free grammar semicolon statement terminator null no-operation statement null single without statement terminate not allowed unlike most iso standards ada language definition known ada reference manual arm sometimes language reference manual lrm free content thus common reference for ada programmers not just programmers implementing ada compilers apart from reference manual there also extensive rationale document which explains language design use various language constructs this document also widely used by programmers when language was revised new rationale document was written one notable free software tool that used by many ada programmers aid them writing ada source code gnat programming studio history 1970s us department defense dod was concerned by number different programming languages being used for its embedded computer system projects many which were obsolete hardware-dependent none which supported safe modular programming working group high order language working group holwg was formed with intent reduce this number by finding creating programming language generally suitable for department's uk ministry defence requirements after many iterations beginning with original straw man proposal eventual programming language was named ada total number high-level programming languages use for such projects fell from over by wikisource has original text related this article steelman language requirements holwg working group crafted steelman language requirements series documents stating requirements they felt programming language should satisfy many existing languages were formally reviewed but team concluded that no existing language met specifications requests for proposals for new programming language were issued four contractors were hired develop their proposals under names red intermetrics led by benjamin brosgol green cii honeywell bull led by jean ichbiah blue softech led by john goodenough yellow sri international led by jay spitzen april after public scrutiny red green proposals passed next phase may green proposal designed by jean ichbiah at cii honeywell bull was chosen given name ada—after augusta ada countess lovelace this proposal was influenced by programming language lis that ichbiah his group had developed 1970s preliminary ada reference manual was published acm sigplan notices june military standard reference manual was approved on december ada lovelace's birthday given number mil-std-1815 honor ada lovelace's birth year c r hoare took advantage his turing award speech criticize ada for being overly complex hence unreliable but subsequently seemed recant foreword he wrote for ada textbook ada attracted much attention from programming community whole during its early days its backers others predicted that might become dominant language for general purpose programming not just defense-related work ichbiah publicly stated that within ten years only two programming languages would remain ada lisp early ada compilers struggled implement large complex language both compile-time run-time performance tended be slow tools primitive compiler vendors expended most their efforts passing massive language-conformance-testing government-required acvc validation suite that was required another novel feature ada language effort first validated ada implementation was nyu ada/ed translator certified on april nyu ada/ed implemented high-level set language setl number commercial companies began offering ada compilers associated development tools including alsys telesoft ddc-i advanced computer techniques tartan laboratories tld systems verdix others augusta ada king countess lovelace us department defense began require use ada ada mandate for all software though exceptions this rule were often granted department defense ada mandate was effectively removed dod began embrace cots technology similar requirements existed other nato countries by late 1980s early 1990s ada compilers had improved performance but there were still barriers full exploitation ada's abilities including tasking model that was different from what most real-time programmers were used because ada's safety-critical support features now used not only for military applications but also commercial projects where software bug can have severe consequences eg avionics air traffic control commercial rockets eg ariane satellites other space systems railway transport banking for example airplane information management system fly-by-wire system software boeing was written ada developed by honeywell air transport systems collaboration with consultants from ddc-i became arguably best-known any ada project civilian military canadian automated air traffic system was written million lines ada sloc count featured advanced distributed processing distributed ada database object-oriented design ada also used other air traffic systems eg uk’s next-generation interim future area control tools support ifacts air traffic control system designed implemented using spark ada also used french tvm in-cab signalling system on tgv high-speed rail system metro suburban trains paris london hong kong new york city standardization language became ansi standard ansi/mil-std 1815a without any further changes became iso standard iso-86521987 this version language commonly known ada from date its adoption by ansi but sometimes referred also ada from date its adoption by iso ada joint iso/ansi standard iso-86521995 was published february making ada first iso standard object-oriented programming language help with standard revision future acceptance us air force funded development gnat compiler presently gnat compiler part gnu compiler collection work has continued on improving updating technical content ada programming language technical corrigendum ada was published october major amendment iso/iec 86521995/amd was published on march at ada-europe conference stockholm ada resource association ara ada-europe announced completion design latest version ada programming language submission reference manual international organization for standardization iso for approval iso/iec was published december other related standards include iso 8651-31988 information processing systems—computer graphics—graphical kernel system gks language bindings—part ada language constructs ada algol-like programming language featuring control structures with reserved words such if then else while for so on however ada also has many data structuring facilities other abstractions which were not included original algol such type definitions records pointers enumerations such constructs were part inherited inspired from pascal hello world ada common example language's syntax hello world program helloadb with adatextio use adatextio procedure hello begin putline hello world end hello this program can be compiled by using freely available open source compiler gnat by executing gnatmake helloadb data types ada's type system not based on set predefined primitive types but allows users declare their own types this declaration turn not based on internal representation type but on describing goal which should be achieved this allows compiler determine suitable memory size for type check for violations type definition at compile time run time ie range violations buffer overruns type consistency etc ada supports numerical types defined by range modulo types aggregate types records arrays enumeration types access types define reference instance specified type untyped pointers are not permitted special types provided by language are task types protected types for example date might be represented type daytype range type monthtype range type yeartype range type hours mod type weekday monday tuesday wednesday thursday friday saturday sunday type date record day daytype month monthtype year yeartype end record types can be refined by declaring subtypes subtype workinghours hours range -- at most hours work day subtype workingday weekday range monday friday -- days work workload constant arrayworkingday workinghours -- implicit type declaration = friday => monday => others => -- lookup table for working hours with initialization types can have modifiers such limited abstract private etc private types can only be accessed limited types can only be modified copied within scope package that defines them ada adds additional features for object-oriented extension types control structures ada structured programming language meaning that flow control structured into standard statements all standard constructs deep level early exit are supported so use also supported 'go to' commands seldom needed -- while not equal b loop while /= b loop adatextioputline waiting end loop if > b then adatextioputline condition met else adatextioputline condition not met end if for i loop adatextioput iteration adatextioput i adatextioputline end loop loop = + exit when = end loop case i when => adatextioput zero when => adatextioput one when => adatextioput two -- case statements have cover all possible cases when others => adatextioput none above end case for aweekday weekday'range loop -- loop over enumeration putline weekday'imageaweekday -- output string representation enumeration if aweekday workingday then -- check subtype enumeration putline work for & workinghours'image workloadaweekday -- access into lookup table end if end loop packages procedures functions among parts ada program are packages procedures functions example package specification exampleads package example type number range procedure printandincrement j out number end example package body exampleadb with adatextio package body example i number = number'first procedure printandincrement j out number function next k number return number begin return k + end next begin adatextioputline total & number'imagej j = next j end printandincrement -- package initialization executed when package elaborated begin while i -- guard statement - only accept if there are no tasks queuing on requestapproach accept requesttakeoff id airplaneid takeoff out runwayaccess do -- start synchronized part myrunwayassignaircraft id -- reserve runway potentially blocking call if protected object busy entry guard false takeoff = myrunway -- assign out parameter value tell airplane which runway end requesttakeoff -- end synchronised part accept requestapproach id airplaneid approach out runwayaccess do myrunwayassignaircraft id approach = myrunway end requestapproach -- terminate if no tasks left who could call terminate end select end loop end task body airplane rwy runwayaccess begin controller1requesttakeoff id rwy -- this call blocks until controller task accepts completes accept block putline airplaneid'image id & taking off delay rwyclearedrunway id -- call will not block clear rwy now false no other tasks should be inside protected object delay -- fly around bit loop select -- try request runway controller1requestapproach id rwy -- this blocking call - will run on controller reaching accept block return on completion exit -- if call returned we're clear for landing - leave select block proceed delay -- timeout - if no answer seconds do something else everything following block putline airplaneid'image id & holding pattern -- simply print message end select end loop delay -- do landing approach putline airplaneid'image id & touched down rwyclearedrunway id -- notify runway that we're done here end newairplane airplaneaccess begin for i airplaneid'range loop -- create few airplane tasks newairplane = new airplane i -- will start running directly after creation delay end loop end traffic pragmas pragma compiler directive that conveys information compiler allow specific manipulation compiled output certain pragmas are built into language while other are implementation-specific examples common usage compiler pragmas would be disable certain features such run-time type checking array subscript boundary checking instruct compiler insert object code lieu function call c/c++ does with inline functions see also apse – specification for programming environment support software development ada ravenscar profile – subset ada tasking features designed for safety-critical hard real-time computing spark programming language – programming language consisting highly restricted subset ada annotated with meta information describing desired component behavior individual runtime requirements references technical corrigendum for ada published by iso ada resource association retrieved consolidated ada language reference manual ada conformity assessment authority archived from original on retrieved technical corrigendum for ada ada conformity assessment authority archived from original on retrieved ptc objectada ptccom retrieved chapel spec acknowledgements pdf cray inc retrieved ada pragmas retrieved ganssle jack ada resource association – news resource for ada programming language adaicorg retrieved b iso/iec information technology -- programming languages -- ada international organization for standardization retrieved ada programming language university mich retrieved may j fuegi j francis lovelace & babbage creation 'notes' annals history computing october–december 16-26 doi101109/mahc20031253887 s tucker taft florence olsen ada helps churn out less-buggy code government computer news pp 2–3 retrieved b c feldman michael who's using ada sigada education working group john goodenough | sei staff profile seicmuedu retrieved car hoare emperor's old clothes communications acm da watt ba wichmann w findlay ada language methodology prentice-hall b c j-p rosen ada paradoxes ada letters acm sigada vol no august pp 28-35 softech inc waltham ma ada compiler validation summary report nyu ada/ed version v-001 retrieved cs1 maint uses authors parameter link dewar robert b k fisher jr gerald schonberg edmond froelich robert bryant stephen goss clinton f burke michael november nyu ada translator interpreter acm sigplan notices – proceedings acm-sigplan symposium on ada programming language 194–201 doi101145/948632948659 isbn 0-89791-030-3 ada validated compilers list ada information clearinghouse july pp 1–36 ada information clearinghouse congressional ada mandate retrieved rehmer karl hads team stellman andrew greene jennifer beautiful teams inspiring cautionary tales from veteran team leaders sebastopol california o'reilly pp 299–312 wolfe alexander october there's still some life left ada acm queue also at adacore gnat pro chosen for uk's next generation atc system adacore look who's using ada ada syntax card pdf retrieved february ada lrm sec pragmas archiveadaiccom retrieved ada lrm appendix/annex b predefined language pragmas archiveadaiccom retrieved international standards iso/iec information technology—programming languages—ada iso/iec information technology—programming languages—ada semantic interface specification asis iso/iec information technology—programming languages—ada conformity assessment language processor acats ieee standard 10035b-1996 posix ada binding ada language mapping specification corba idl ada mapping rationale these documents have been published various forms including print jean d ichbiah john g p barnes robert j firth mike woodger rationale for design ada programming language john g p barnes ada rationale language standard libraries john barnes rationale for ada books grady booch software engineering with ada california benjamin/cummings publishing company inc isbn 0-8053-0604-8 jan skansholm ada from beginning addison-wesley isbn 0-201-40376-5 geoff gilpin ada guided tour tutorial prentice hall isbn 978-0-13-004045-9 john barnes programming ada addison-wesley isbn 0-321-34078-7 john barnes programming ada plus language reference manual addison-wesley isbn 0-201-56539-0 john barnes programming ada addison-wesley isbn 0-201-34293-6 john barnes high integrity ada spark approach addison-wesley isbn 0-201-17517-7 john barnes high integrity software spark approach safety security addison-wesley isbn 0-321-13616-0 john beidler data structures algorithms object-oriented approach using ada springer-verlag isbn 0-387-94834-1 dean w gonzalez ada programmer's handbook benjamin-cummings publishing company isbn 0-8053-2529-8 m ben-ari ada for software engineers john wiley & sons isbn 0-471-97912-0 norman cohen ada second language mcgraw-hill science/engineering/math isbn 0-07-011607-5 alan burns andy wellings real-time systems programming languages ada real-time java real-time posix addison-wesley isbn 0-201-72988-1 alan burns andy wellings concurrency ada cambridge university press isbn 0-521-62911-x colin atkinson object-oriented reuse concurrency distribution ada-based approach addison-wesley isbn 0-201-56527-7 grady booch doug bryan software engineering with ada addison-wesley isbn 0-8053-0608-0 do-while jones ada action with practical programming examples john wiley & sons inc isbn 0-471-60708-8 daniel stubbs neil w webre data structures with abstract data types ada brooks cole isbn 0-534-14448-9 pascal ledru distributed programming ada with protected objects dissertationcom isbn 1-58112-034-6 fintan culwin ada developmental approach prentice hall isbn 0-13-264680-3 john english fintan culwin ada craft object oriented programming prentice hall isbn 0-13-230350-7 david wheeler ada springer-verlag isbn 0-387-94801-5 david r musser alexander stepanov ada generic library linear list processing packages springer-verlag isbn 0-387-97133-5 michael b feldman software construction data structures with ada addison-wesley isbn 0-201-88795-9 simon johnston ada for c c++ programmers addison-wesley isbn 0-201-40363-3 ada problem solving program design feldman michael b & koffman elliot b isbn 0-201-52279-9 addison-wesley publishing company & pages michael b feldman elliot b koffman ada addison-wesley isbn 0-201-36123-x nell b dale chip weems john mccormick programming problem solving with ada jones & bartlett publishers isbn 0-7637-0293-5 nell b dale john mccormick ada plus data structures object-oriented approach 2nd edition jones & bartlett publishers isbn 0-7637-3794-1 bruce c krell developing with ada life-cycle methods bantam dell pub group isbn 0-553-09102-6 judy bishop distributed ada developments experiences cambridge university press isbn 0-521-39251-9 bo sanden software systems construction with examples ada prentice hall isbn 0-13-030834-x bruce hillam introduction abstract data types using ada prentice hall isbn 0-13-045949-6 david rudd introduction software design development with ada brooks cole isbn 0-314-02829-3 ian c pyle developing safety systems guide using ada prentice hall isbn 0-13-204298-3 louis baker artificial intelligence with ada mcgraw-hill isbn 0-07-003350-1 alan burns andy wellings hrt-hood structured design method for hard real-time ada systems north-holland isbn 0-444-82164-3 walter savitch charles peterson ada introduction art science programming benjamin-cummings publishing company isbn 0-8053-7070-6 mark allen weiss data structures algorithm analysis ada benjamin-cummings publishing company isbn 0-8053-9055-3 henry ledgard ada introduction second edition springer-verlag isbn 0-387-90814-5 dines bjørner ole n oest eds towards formal description ada london springer-verlag isbn 3-540-10283-3 archives ada programming language materials 1981–1990 charles babbage institute university minnesota includes literature on software products designed for ada language us government publications including ada 9x project reports technical reports working papers newsletters user group information external links wikimedia commons has media related ada programming language wikibooks has book on topic ada programming wikisource has several original texts related ada wikiversity has learning materials about ada ada programming language ada programming language at dmoz acm sigada ada-europe organization iso home ada standards interview with stucker taft maintainer ada v t e pascal programming language family dialects pascal object pascal pascal script oxygene clascal concurrent pascal superpascal compilers current delphi oxygene pocketstudio hp pascal ip pascal prospero pascal free pascal lazarus pascalabcnet gnu pascal turbo51 midletpascal pic micro pascal ack historic virtual pascal apple pascal turbo pascal microsoft pascal ucsd pascal jrt pascal/mt+ api clx fcl firemonkey lcl object windows library openwire rtl turbo vision visual component library comparison pascal c comparison pascal delphi related algol modula-2 ada oberon modula-3 oberon-2 component pascal v t e programming languages comparison timeline history assembly basic c c++ c cobol fortran go haskell java javascript js lisp lua objective-c pascal perl php python ruby shell smalltalk swift visual basic net vbnet more category comparison lists o alphabetical o categorical o generational o non-english-based authority control gnd 4000430-2 retrieved from https//enwikipediaorg/w/indexphptitle=adaprogramminglanguage&oldid=749567948 categories ada programming language programming language standards multi-paradigm programming languages statically typed programming languages systems programming languages net programming languages avionics programming languages high integrity programming language programming languages created 1980s programming languages with iso standard hidden categories cs1 maint uses authors parameter all articles with unsourced statements articles with unsourced statements from march articles with unsourced statements from june commons category with local link same on wikidata articles with dmoz links wikipedia articles with gnd identifiers pages using isbn magic links navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version other projects wikimedia commons wikibooks wikiquote languages العربية aragonés azərbaycanca বাংলা беларуская български bosanski català чӑвашла čeština dansk deutsch eesti ελληνικά español esperanto euskara فارسی français galego 한국어 հայերեն hrvatski bahasa indonesia italiano עברית ქართული қазақша кыргызча magyar bahasa melayu nederlands 日本語 norsk bokmål norsk nynorsk ਪੰਜਾਬੀ polski português română русиньскый русский scots simple english slovenčina slovenščina српски / srpski srpskohrvatski / српскохрватски suomi svenska தமிழ் ไทย тоҷикӣ türkçe українська tiếng việt 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 