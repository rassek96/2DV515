software bug from wikipedia free encyclopedia jump navigation search report mediawiki error on wikipedia see wikipediabug reports this article needs additional citations for verification please help improve this article by adding citations reliable sources unsourced material may be challenged removed august learn how when remove this template message software development process core activities requirements design construction testing debugging deployment maintenance paradigms models software engineering waterfall prototyping incremental v-model dual vee model spiral iid agile lean devops methodologies frameworks cleanroom tsp psp rad dsdm msf scrum kanban up xp tdd atdd bdd fdd ddd mdd supporting disciplines configuration management infrastructure code documentation software quality assurance sqa project management user experience tools compiler debugger profiler gui designer modeling ide build automation release automation testing standards boks cmmi ieee standards iso iso/iec standards swebok pmbok babok v t e software bug error flaw failure fault computer program system that causes produce incorrect unexpected result behave unintended ways most bugs arise from mistakes errors made either program's source code its design components operating systems used by such programs few are caused by compilers producing incorrect code program that contains large number bugs and/or bugs that seriously interfere with its functionality said be buggy defective bugs trigger errors that may have ripple effects bugs may have subtle effects cause program crash freeze computer others qualify security bugs might for example enable malicious user bypass access controls order obtain unauthorized privileges bugs code that controls therac-25 radiation therapy machine were directly responsible for patient deaths 1980s european space agency's us$1 billion prototype ariane rocket had be destroyed less than minute after launch due bug on-board guidance computer program june royal air force chinook helicopter crashed into mull kintyre killing this was initially dismissed pilot error but investigation by computer weekly convinced house lords inquiry that may have been caused by software bug aircraft's engine control computer study commissioned by us department commerce's national institute standards technology concluded that software bugs errors are so prevalent so detrimental that they cost us economy estimated $59 billion annually about percent gross domestic product contents etymology history o bugs system report terminology prevention o typographical errors o development methodologies o programming language support o code analysis o instrumentation testing debugging bug management o severity o priority o relationship between priority severity o software releases types o arithmetic o logic o syntax o resource o multi-threading o interfacing o performance o teamworking implications well-known bugs popular culture see also notes further reading external links etymology term bug describe defects has been part engineering jargon for many decades predates computers computer software may have originally been used hardware engineering describe mechanical malfunctions for instance thomas edison wrote following words letter associate has been just so all my inventions first step intuition comes with burst then difficulties arise — this thing gives out then that bugs — such little faults difficulties are called — show themselves months intense watching study labor are requisite before commercial success failure certainly reached middle english word bugge basis for terms bugbear bugaboo terms used for monster baffle ball first mechanical pinball game was advertised being free bugs problems with military gear during world war ii were referred bugs glitches book published louise dickinson rich speaking powered ice cutting machine said ice sawing was suspended until creator could be brought take bugs out his darling isaac asimov uses term bug relate issues with robot his short story catch that rabbit published included his well known collection short stories i robot from page catch that rabbit us robots had get bugs out multiple robot there were plenty bugs there are always at least half dozen bugs left for field-testing page from harvard mark ii electromechanical computer's log featuring dead moth that was removed from device term bug was used account by computer pioneer grace hopper who publicized cause malfunction early electromechanical computer typical version story when hopper was released from active duty she joined harvard faculty at computation laboratory where she continued her work on mark ii mark iii operators traced error mark ii moth trapped relay coining term bug this bug was carefully removed taped log book stemming from first bug today we call errors glitches program bug hopper did not find bug she readily acknowledged date log book was september operators who found including william bill burke later naval weapons laboratory dahlgren virginia were familiar with engineering term amusedly kept insect with notation first actual case bug being found hopper loved recount story this log book complete with attached moth part collection smithsonian national museum american history related term debug also appears predate its usage computing oxford english dictionary's etymology word contains attestation from context aircraft engines history concept that software might contain errors dates back ada lovelace's notes on analytical engine which she speaks possibility program cards for charles babbage's analytical engine being erroneous analysing process must equally have been performed order furnish analytical engine with necessary operative data that herein may also lie possible source error granted that actual mechanism unerring its processes cards may give wrong orders bugs system report open technology institute run by group new america released report bugs system august stating that us policymakers should make reforms help researchers identify address software bugs report highlights need for reform field software vulnerability discovery disclosure one report’s authors said that congress has not done enough address cyber software vulnerability even though congress has passed number bills combat larger issue cyber security government researchers companies cyber security experts are people who typically discover software flaws report calls for reforming computer crime copyright laws computer fraud abuse act digital millennium copyright act electronic communications privacy act criminalize create civil penalties for actions that security researchers routinely engage while conducting legitimate security research report said terminology there ongoing debate over use term bug describe software errors one argument that word bug divorced from sense that human being caused problem instead implies that defect arose on its own leading push abandon term bug favor terms such defect with limited success since 1970s gary kildall somewhat humorously suggested use term blunder software engineering mistake metamorphism from greek meta = change morph = form refers evolution defect final stage software deployment transformation mistake committed by analyst early stages software development lifecycle which leads defect final stage cycle has been called 'mistake metamorphism' different stages mistake entire cycle may be described mistakes anomalies faults failures errors exceptions crashes bugs defects incidents side effects prevention software industry has put much effort into reducing bug counts these include typographical errors bugs usually appear when programmer makes logic error various innovations programming style defensive programming are designed make these bugs less likely easier spot some typos especially symbols logical/mathematical operators allow program operate incorrectly while others such missing symbol misspelled name may prevent program from operating compiled languages can reveal some typos when source code compiled development methodologies several schemes assist managing programmer activity so that fewer bugs are produced software engineering which addresses software design issues well applies many techniques prevent defects for example formal program specifications state exact behavior programs so that design bugs may be eliminated unfortunately formal specifications are impractical for anything but shortest programs because problems combinatorial explosion indeterminacy unit testing involves writing test for every function unit that program perform test-driven development unit tests are written before code code not considered complete until all tests complete successfully agile software development involves frequent software releases with relatively small changes defects are revealed by user feedback open source development allows anyone examine source code school thought popularized by eric s raymond linus's law says that popular open-source software has more chance having few no bugs than other software because given enough eyeballs all bugs are shallow this assertion has been disputed however computer security specialist elias levy wrote that easy hide vulnerabilities complex little understood undocumented source code because even if people are reviewing code that doesn't mean they're qualified do so programming language support programming languages include features help prevent bugs such static type systems restricted namespaces modular programming for example when programmer writes pseudocode let realvalue pi = three bit although this may be syntactically correct code fails type check compiled languages catch this without having run program interpreted languages catch such errors at runtime some languages deliberate exclude features that easily lead bugs at expense slower performance general principle being that almost always better write simpler slower code than inscrutable code that runs slightly faster especially considering that maintenance cost substantial for example java programming language does not support pointer arithmetic implementations some languages such pascal scripting languages often have runtime bounds checking arrays at least debugging build code analysis tools for code analysis help developers by inspecting program text beyond compiler's capabilities spot potential problems although general problem finding all programming errors given specification not solvable see halting problem these tools exploit fact that human programmers tend make same kinds mistakes when writing software instrumentation tools monitor performance software running either specifically find problems such bottlenecks give assurance correct working may be embedded code explicitly perhaps simple statement saying print i am here provided tools often surprise find where most time taken by piece code this removal assumptions might cause code be rewritten testing software testers are professionals whose primary task find bugs write code support testing on some projects more resources may be spent on testing than developing program measurements during testing can provide estimate number likely bugs remaining this becomes more reliable longer product tested developed debugging typical bug history gnu classpath project data new bug submitted by user unconfirmed once has been reproduced by developer confirmed bug confirmed bugs are later fixed bugs belonging other categories unreproducible will not be fixed etc are usually minority main article debugging finding fixing bugs debugging major part computer programming maurice wilkes early computing pioneer described his realization late 1940s that much rest his life would be spent finding mistakes his own programs usually most difficult part debugging finding bug once found correcting usually relatively easy programs known debuggers help programmers locate bugs by executing code line by line watching variable values other features observe program behavior without debugger code may be added so that messages values may be written console window log file trace program execution show values however even with aid debugger locating bugs something art not uncommon for bug one section program cause failures completely different section thus making especially difficult track for example error graphics rendering routine causing file i/o routine fail apparently unrelated part system sometimes bug not isolated flaw but represents error thinking planning on part programmer such logic errors require section program be overhauled rewritten part code review stepping through code imagining transcribing execution process may often find errors without ever reproducing bug such more typically first step locating bug reproduce reliably once bug reproducible programmer may use debugger other tool while reproducing error find point at which program went astray some bugs are revealed by inputs that may be difficult for programmer re-create one cause therac-25 radiation machine deaths was bug specifically race condition that occurred only when machine operator very rapidly entered treatment plan took days practice become able do this so bug did not manifest testing when manufacturer attempted duplicate other bugs may disappear when program run with debugger these heisenbugs humorously named after heisenberg uncertainty principle since 1990s particularly following ariane flight disaster interest automated aids debugging rose such static code analysis by abstract interpretation some classes bugs have nothing do with code faulty documentation hardware may lead problems system use even though code matches documentation some cases changes code eliminate problem even though code then no longer matches documentation embedded systems frequently work around hardware bugs since make new version rom much cheaper than remanufacturing hardware especially if they are commodity items bug management bug management includes process documenting categorizing assigning reproducing correcting releasing corrected code proposed changes software – bugs well enhancement requests even entire releases – are commonly tracked managed using bug tracking systems issue tracking systems items added may be called defects tickets issues following agile development paradigm stories epics categories may be objective subjective combination such version number area software severity priority well what type issue such feature request bug severity severity impact bug has on system operation this impact may be data loss financial loss goodwill wasted effort severity levels are not standardized impacts differ across industry crash video game has totally different impact than crash web browser real time monitoring system for example bug severity levels might be crash hang no workaround meaning there no way customer can accomplish given task has workaround meaning user can still accomplish task visual defect for example missing image displaced button form element documentation error some software publishers use more qualified severities such critical high low blocker trivial severity bug may be separate category its priority for fixing two may be quantified managed separately priority priority controls where bug falls on list planned changes priority decided by each software producer priorities are sometimes numerical sometimes named such critical high low deferred note that these may be similar even identical severity ratings when looking at different software producers for example priority bugs may always be fixed for next release while bugs may never be fixed industry practice employs inverted scale so that highest priority are low numbers while larger numbers indicate lower priority relationship between priority severity severe bugs may still not be high priority for example crash high severity that happens only rarely may be low priority priority strictly increasing function probability occurrence severity given probability p = severity defines priority when p = severity irrelevant low severity bugs may get low priority regardless probability occurrence one formula for defining relationship p p s = b − ⌈ k p s ⌉ {\displaystyle pps=b-\lceil kps\rceil } where p probability while s severity k scaling constant invert value b base ceiling function limits domain priority only integers also assigns priority-b almost never occurring bugs software releases common practice release software with known low-priority bugs most big software projects maintain two lists known bugs – those known software team those be told users second list informs users about bugs that are not fixed specific release workarounds may be offered releases are different kinds bugs sufficiently high priority may warrant special release part code containing only modules with those fixes these are known patches most releases include mixture behavior changes multiple bug fixes releases that emphasize bug fixes are known maintenance releases releases that emphasize feature additions/changes are known major releases often have names distinguish new features from old reasons that software publisher opts not patch even fix particular bug include deadline must be met resources are insufficient fix all bugs by deadline bug already fixed upcoming release not high priority changes required fix bug are too costly affect too many other components requiring major testing activity users may rely on buggy behavior may introduce breaking change problem area that will be obsolete with upcoming release fixing unnecessary it's not bug misunderstanding has arisen between expected perceived behavior when such misunderstanding not due confusion arising from design flaws faulty documentation types this section contains embedded lists that may be poorly defined unverified indiscriminate please help clean up meet wikipedia's quality standards where appropriate incorporate items into main body article august this section contains embedded lists that may be better presented using prose you can help by converting list lists prose if appropriate editing help available august learn how when remove this template message software development projects mistake fault may be introduced at any stage bugs arise from oversights misunderstandings made by software team during specification design coding data entry documentation for example relatively simple program alphabetize list words design might fail consider what should happen when word contains hyphen when converting abstract design into code coder might inadvertently create off-by-one error fail sort last word list errors may be simple typing error was intended another category bug called race condition that may occur when programs have multiple components executing at same time if components interact different order than developer intended they could interfere with each other stop program from completing its tasks these bugs may be difficult detect anticipate since they may not occur during every execution program conceptual errors are developer's misunderstanging what software must do resulting may perform according developer's understanding but not what really needed other types arithmetic division by zero arithmetic overflow underflow loss arithmetic precision due rounding numerically unstable algorithms logic infinite loops infinite recursion off-by-one error counting one too many too few when looping syntax use wrong operator such performing assignment instead equality test for example some languages x=5 will set value x while x==5 will check whether x currently some other number interpreted languages allow such code fail compiled languages can catch such errors before testing begins resource null pointer dereference using uninitialized variable using otherwise valid instruction on wrong data type see packed decimal/binary coded decimal access violations resource leaks where finite system resource such memory file handles become exhausted by repeated allocation without release buffer overflow which program tries store data past end allocated storage this may may not lead access violation storage violation these bugs may form security vulnerability excessive recursion which — though logically valid — causes stack overflow use-after-free error where pointer used after system has freed memory references double free error multi-threading deadlock where task can't continue until task b finishes but at same time task b can't continue until task finishes race condition where computer does not perform tasks order programmer intended concurrency errors critical sections mutual exclusions other features concurrent processing time-of-check-to-time-of-use toctou form unprotected critical section interfacing incorrect api usage incorrect protocol implementation incorrect hardware handling incorrect assumptions particular platform incompatible systems often proposed new api new communications protocol may seem work when both computers use old version both computers use new version but upgrading only receiver exposes backward compatibility problems other cases upgrading only transmitter exposes forward compatibility problems often not feasible upgrade every computer simultaneously—in particular telecommunication industry internet even when feasible update every computer simultaneously sometimes people forget update every computer performance too high computational complexity algorithm random disk memory access teamworking unpropagated updates eg programmer changes myadd but forgets change mysubtract which uses same algorithm these errors are mitigated by don't repeat yourself philosophy comments out date incorrect many programmers assume comments accurately describe code differences between documentation product implications amount type damage software bug may cause naturally affects decision-making processes policy regarding software quality applications such manned space travel automotive safety since software flaws have potential cause human injury even death such software will have far more scrutiny quality control than for example online shopping website applications such banking where software flaws have potential cause serious financial damage bank its customers quality control also more important than say photo editing application nasa's software assurance technology center managed reduce number errors fewer than per lines code sloc but this was not felt be feasible for projects business world well-known bugs main article list software bugs number software bugs have become well-known usually due their severity examples include various space military aircraft crashes possibly most famous bug year problem also known y2k bug which was feared that worldwide economic collapse would happen at start year result computers thinking was end no major problems occurred stock trading disruption involved one such incompatibility between old api new api popular culture robert heinlein's novel moon harsh mistress computer technician manuel davis blames real bug for non-existent failure supercomputer mike presenting dead fly evidence novel space odyssey its corresponding film adaptation spaceship's onboard computer hal attempts kill all its crew members followup novel odyssey two accompanying film revealed that this action was caused by computer having been programmed with two conflicting objectives fully disclose all its information keep true purpose flight secret from crew this conflict caused hal become paranoid eventually homicidal american comedy office space plot focuses on attempt by three employees exploit company's preoccupation with fixing y2k computer bug by infecting company's computer system with virus that sends rounded off pennies separate bank account plan backfires virus itself has its own bug which sends large amounts money account prematurely joe trela correctly answered moth for million dollar question what insect shorted out early supercomputer inspired term computer bug united states version game show who wants be millionaire novel bug by ellen ullman about programmer's attempt find elusive bug database application canadian film control alt delete about computer programmer at end struggling fix bugs at his company related year problem see also this see also section may contain excessive number suggestions please ensure that only most relevant links are given that they are not red links that any links are not already this article august learn how when remove this template message software testing portal anti-pattern software rot bug bounty program glitch removal iso/iec which classifies bug either defect nonconformity orthogonal defect classification racetrack problem risks digest software defect indicator software regression notes prof simon rogerson chinook helicopter disaster ccsrcsedmuacuk retrieved september software bugs cost us economy dear webarchiveorg june archived from original on june retrieved september cs1 maint unfit url link edison puskas november edison papers edison national laboratory us national park service west orange nj cited hughes thomas parke american genesis century invention technological enthusiasm 1870-1970 penguin books p isbn 978-0-14-009741-2 computerworld staff september moth machine debugging origins 'bug' computerworld baffle ball internet pinball database see image advertisement reference entry modern aircraft carriers are result years smart experimentation life june p retrieved november dickinson rich louise we took woods jb lippincott co p lccn oclc fcat nrt test harcourt march danis sharron ann rear admiral grace murray hopper eicsvtedu february retrieved january bug jargon file ver retrieved june b log book with computer bug national museum american history smithsonian institution first computer bug naval historical center but note harvard mark ii computer was not complete until summer ieee annals history computing vol issue james s huggins first computer bug jamesshugginscom retrieved september journal royal aeronautical society 183/2 ranged through stage type test flight test ‘debugging’ wilson andi schulman ross bankston kevin herr trey bugs system pdf open policy institute retrieved b c d rozens tracy cyber reforms needed strengthen software bug discovery disclosure new america report - homeland preparedness news retrieved news at sei archive cmuedu shustek len his own words gary kildall remarkable people computer history museum kildall gary arlen kildall scott kildall kristin eds computer connections people places events evolution personal computer industry manuscript part kildall family 14–15 retrieved b testing experience germany testingexperience march issn 1866-5705 missing empty |title= help subscription required huizinga dorota kolawa adam automated defect prevention best practices software management wiley-ieee computer society press p isbn 0-470-04212-5 mcdonald marc musson robert smith ross practical guide defect prevention microsoft press p isbn 0-7356-2253-1 release early release often eric s raymond cathedral bazaar wide open source elias levy securityfocus april maurice wilkes quotes anatomy bug bugzillaorg kimbler k feature interactions telecommunications software systems v ios press p isbn 978-90-5199-431-5 syed mahbubur rahman july multimedia networking technology management applications technology management applications idea group inc igi p isbn 978-1-59140-005-9 wu chwan-hwa john irwin j david april introduction computer networks cybersecurity crc press p isbn 978-1-4665-7214-0 rfc tcp extensions considered harmful quote time distribute new version protocol all hosts can be quite long forever fact if there slightest incompatibly between old new versions chaos can result further reading allen mitch may/jun bug tracking basics beginner’s guide reporting tracking defects software testing & quality engineering magazine vol issue pp 20–24 external links mediawiki has documentation related bug management common weakness enumeration – expert website focus on bugs bug type jim gray - another bug type picture first computer bug at wayback machine archived january first computer bug – email from about adm hopper's bug retrieved from https//enwikipediaorg/w/indexphptitle=softwarebug&oldid=751529830 categories software bugs hidden categories cs1 maint unfit url all articles with dead external links articles with dead external links from august pages with citations lacking titles pages containing links subscription-only content pages using rfc magic links articles needing additional references from august all articles needing additional references use mdy dates from september all articles with unsourced statements articles with unsourced statements from november articles with unsourced statements from july articles needing cleanup from august all pages needing cleanup wikipedia list cleanup from august articles with sections that need be turned into prose from august articles with unsourced statements from september articles with unsourced statements from august articles with excessive see also sections from august webarchive template wayback links navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version other projects wikimedia commons languages العربية български català čeština dansk deutsch ελληνικά español esperanto euskara فارسی français gaeilge galego 한국어 हिन्दी hrvatski bahasa indonesia italiano עברית lëtzebuergesch lumbaart magyar മലയാളം bahasa melayu nederlands 日本語 norsk bokmål occitan polski português русский scots shqip simple english slovenščina српски / srpski suomi svenska தமிழ் తెలుగు ไทย türkçe українська 吴语 ייִדיש 粵語 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 