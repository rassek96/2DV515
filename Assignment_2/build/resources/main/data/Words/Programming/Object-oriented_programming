object-oriented programming from wikipedia free encyclopedia jump navigation search object-oriented redirects here for other meanings object-oriented see object-orientation object-oriented programming language redirects here for list object-oriented programming languages see list object-oriented programming languages programming paradigms action agent-oriented array-oriented automata-based concurrent computing o relativistic programming data-driven declarative contrast imperative o constraint + constraint logic concurrent constraint logic o dataflow + flow-based + cell-oriented spreadsheets + reactive o functional + functional logic + purely functional o logic + abductive logic + answer set + concurrent logic + functional logic + inductive logic dynamic end-user programming event-driven o service-oriented o time-driven expression-oriented feature-oriented function-level contrast value-level generic imperative contrast declarative o literate o procedural inductive programming language-oriented o natural language programming o discipline-specific o domain-specific o grammar-oriented + dialecting o intentional metaprogramming o automatic o reflective + attribute-oriented o homoiconic o template + policy-based non-structured contrast structured o array nondeterministic parallel computing o process-oriented point-free style o concatenative semantic structured contrast non-structured o block-structured o modular contrast monolithic o object-oriented + actor-based + class-based + concurrent + prototype-based + by separation concerns aspect-oriented role-oriented subject-oriented o recursive value-level contrast function-level probabilistic concept v t e object-oriented programming oop programming paradigm based on concept objects which may contain data form fields often known attributes code form procedures often known methods feature objects that object's procedures can access often modify data fields object with which they are associated objects have notion this self oop computer programs are designed by making them out objects that interact with one another there significant diversity oop languages but most popular ones are class-based meaning that objects are instances classes which typically also determine their type many most widely used programming languages are multi-paradigm programming languages that support object-oriented programming greater lesser degree typically combination with imperative procedural programming significant object-oriented languages include java c++ c python php ruby perl delphi objective-c swift common lisp smalltalk contents features o shared with non-oop predecessor languages o objects classes o dynamic dispatch/message passing o encapsulation o composition inheritance delegation o polymorphism o open recursion history oop languages o oop dynamic languages o oop network protocol design patterns o inheritance behavioral subtyping o gang four design patterns o object-orientation databases o real-world modeling relationships o oop control flow o responsibility- vs data-driven design o solid grasp guidelines criticism formal semantics see also o systems o modeling languages references further reading external links features object-oriented programming uses objects but not all associated techniques structures are supported directly languages that claim support oop features listed below are however common among languages considered strongly class- object-oriented multi-paradigm with oop support with notable exceptions mentioned see also comparison programming languages object-oriented programming list object-oriented programming terms shared with non-oop predecessor languages object-oriented programming languages typically share low-level features with high-level procedural programming languages which were invented first fundamental tools that can be used construct program include variables that can store information formatted small number built-in data types like integers alphanumeric characters this may include data structures like strings lists hash tables that are either built-in result from combining variables using memory pointers procedures – also known functions methods routines subroutines – that take input generate output manipulate data modern languages include structured programming constructs like loops conditionals modular programming support provides ability group procedures into files modules for organizational purposes modules are namespaced so code one module will not be accidentally confused with same procedure variable name another file module objects classes languages that support object-oriented programming typically use inheritance for code reuse extensibility form either classes prototypes those that use classes support two main concepts classes – definitions for data format available procedures for given type class object may also contain data procedures known class methods themselves ie classes contains data members member functions objects – instances classes objects sometimes correspond things found real world for example graphics program may have objects such circle square menu online shopping system might have objects such shopping cart customer product sometimes objects represent more abstract entities like object that represents open file object that provides service translating measurements from us customary metric each object said be instance particular class for example object with its name field set mary might be instance class employee procedures object-oriented programming are known methods variables are also known fields members attributes properties this leads following terms class variables – belong class whole there only one copy each one instance variables attributes – data that belongs individual objects every object has its own copy each one member variables – refers both class instance variables that are defined by particular class class methods – belong class whole have access only class variables inputs from procedure call instance methods – belong individual objects have access instance variables for specific object they are called on inputs class variables objects are accessed somewhat like variables with complex internal structure many languages are effectively pointers serving actual references single instance said object memory within heap stack they provide layer abstraction which can be used separate internal from external code external code can use object by calling specific instance method with certain set input parameters read instance variable write instance variable objects are created by calling special type method class known constructor program may create many instances same class runs which operate independently this easy way for same procedures be used on different sets data object-oriented programming that uses classes sometimes called class-based programming while prototype-based programming does not typically use classes result significantly different yet analogous terminology used define concepts object instance some languages classes objects can be composed using other concepts like traits mixins dynamic dispatch/message passing responsibility object not any external code select procedural code execute response method call typically by looking up method at run time table associated with object this feature known dynamic dispatch distinguishes object from abstract data type module which has fixed static implementation operations for all instances if there are multiple methods that might be run for given name known multiple dispatch method call also known message passing conceptualized message name method its input parameters being passed object for dispatch encapsulation encapsulation object oriented programming concept that binds together data functions that manipulate data that keeps both safe from outside interference misuse data encapsulation led important oop concept data hiding if class does not allow calling code access internal object data permits access through methods only this strong form abstraction information hiding known encapsulation some languages java for example let classes enforce access restrictions explicitly for example denoting internal data with private keyword designating methods intended for use by code outside class with public keyword methods may also be designed public private intermediate levels such protected which allows access from same class its subclasses but not objects different class other languages like python this enforced only by convention for example private methods may have names that start with underscore encapsulation prevents external code from being concerned with internal workings object this facilitates code refactoring for example allowing author class change how objects that class represent their data internally without changing any external code long public method calls work same way also encourages programmers put all code that concerned with certain set data same class which organizes for easy comprehension by other programmers encapsulation technique that encourages decoupling composition inheritance delegation objects can contain other objects their instance variables this known object composition for example object employee class might contain point object address class addition its own instance variables like firstname position object composition used represent has-a relationships every employee has address so every employee object has place store address object languages that support classes almost always support inheritance this allows classes be arranged hierarchy that represents is-a-type-of relationships for example class employee might inherit from class person all data methods available parent class also appear child class with same names for example class person might define variables firstname lastname with method makefullname these will also be available class employee which might add variables position salary this technique allows easy re-use same procedures data definitions addition potentially mirroring real-world relationships intuitive way rather than utilizing database tables programming subroutines developer utilizes objects user may be more familiar with objects from their application domain subclasses can override methods defined by superclasses multiple inheritance allowed some languages though this can make resolving overrides complicated some languages have special support for mixins though any language with multiple inheritance mixin simply class that does not represent is-a-type-of relationship mixins are typically used add same methods multiple classes for example class unicodeconversionmixin might provide method unicodetoascii when included class filereader class webpagescraper which don't share common parent abstract classes cannot be instantiated into objects they exist only for purpose inheritance into other concrete classes which can be instantiated java final keyword can be used prevent class from being subclassed doctrine composition over inheritance advocates implementing has-a relationships using composition instead inheritance for example instead inheriting from class person class employee could give each employee object internal person object which then has opportunity hide from external code even if class person has many public attributes methods some languages like go do not support inheritance at all open/closed principle advocates that classes functions should be open for extension but closed for modification delegation another language feature that can be used alternative inheritance polymorphism subtyping form polymorphism when calling code can be agnostic whether object belongs parent class one its descendants for example function might call makefullname on object which will work whether object class person class employee this another type abstraction which simplifies code external class hierarchy enables strong separation concerns open recursion languages that support open recursion object methods can call other methods on same object including themselves typically using special variable keyword called this self this variable late-bound allows method defined one class invoke another method that defined later some subclass thereof history terminology invoking objects oriented modern sense object-oriented programming made its first appearance at mit late 1950s early 1960s environment artificial intelligence group early object could refer identified items lisp atoms with properties attributes alan kay was later cite detailed understanding lisp internals strong influence on his thinking another early mit example was sketchpad created by ivan sutherland 1960–61 glossary technical report based on his dissertation about sketchpad sutherland defined notions object instance with class concept covered by master definition albeit specialized graphical interaction also mit algol version aed-0 established direct link between data structures plexes that dialect procedures prefiguring what were later termed messages methods member functions formal programming concept objects was introduced mid-1960s with simula major revision simula i programming language designed for discrete event simulation created by ole-johan dahl kristen nygaard norwegian computing center oslo simula was influenced by simscript car tony hoare's proposed record classes simula introduced notion classes instances objects well subclasses virtual procedures coroutines discrete event simulation part explicit programming paradigm language also used automatic garbage collection that had been invented earlier for functional programming language lisp simula was used for physical modeling such models study improve movement ships their content through cargo ports ideas simula influenced many later languages including smalltalk derivatives lisp clos object pascal c++ smalltalk language which was developed at xerox parc by alan kay others 1970s introduced term object-oriented programming represent pervasive use objects messages basis for computation smalltalk creators were influenced by ideas introduced simula but smalltalk was designed be fully dynamic system which classes could be created modified dynamically rather than statically simula smalltalk with oop were introduced wider audience by august issue byte magazine 1970s kay's smalltalk work had influenced lisp community incorporate object-based techniques that were introduced developers via lisp machine experimentation with various extensions lisp such loops flavors introducing multiple inheritance mixins eventually led common lisp object system which integrates functional programming object-oriented programming allows extension via meta-object protocol 1980s there were few attempts design processor architectures that included hardware support for objects memory but these were not successful examples include intel iapx linn smart rekursiv bertrand meyer produced first design eiffel language focused on software quality eiffel among purely object-oriented languages but differs sense that language itself not only programming language but notation supporting entire software lifecycle meyer described eiffel software development method based on small number key ideas from software engineering computer science object-oriented software construction essential quality focus eiffel meyer's reliability mechanism design by contract which integral part both method language object-oriented programming developed dominant programming methodology early mid 1990s when programming languages supporting techniques became widely available these included visual foxpro c++ delphi its dominance was further enhanced by rising popularity graphical user interfaces which rely heavily upon object-oriented programming techniques example closely related dynamic gui library oop language can be found cocoa frameworks on mac os x written objective-c object-oriented dynamic messaging extension c based on smalltalk oop toolkits also enhanced popularity event-driven programming although this concept not limited oop at eth zürich niklaus wirth his colleagues had also been investigating such topics data abstraction modular programming although this had been common use 1960s earlier modula-2 included both their succeeding design oberon included distinctive approach object orientation classes such object-oriented features have been added many previously existing languages including ada basic fortran pascal cobol adding these features languages that were not initially designed for them often led problems with compatibility maintainability code more recently number languages have emerged that are primarily object-oriented but that are also compatible with procedural methodology two such languages are python ruby probably most commercially important recent object-oriented languages are java developed by sun microsystems well c visual basicnet vbnet both designed for microsoft's net platform each these two frameworks shows its own way benefit using oop by creating abstraction from implementation vbnet c support cross-language inheritance allowing classes defined one language subclass classes defined other language oop languages this section does not cite any sources please help improve this section by adding citations reliable sources unsourced material may be challenged removed august learn how when remove this template message see also list object-oriented programming languages simula generally accepted being first language with primary features object-oriented language was created for making simulation programs which what came be called objects were most important information representation smalltalk another early example one with which much theory oop was developed concerning degree object orientation following distinctions can be made languages called pure oo languages because everything them treated consistently object from primitives such characters punctuation all way up whole classes prototypes blocks modules etc they were designed specifically facilitate even enforce oo methods examples python ruby scala smalltalk eiffel emerald jade self languages designed mainly for oo programming but with some procedural elements examples java c++ c delphi/object pascal vbnet languages that are historically procedural languages but have been extended with some oo features examples php perl visual basic derived from basic matlab cobol fortran abap ada pascal languages with most features objects classes methods inheritance but distinctly original form examples oberon oberon-1 oberon-2 languages with abstract data type support which may be used resemble oo programming but without all features object-orientation this includes object-based prototype-based languages examples javascript lua modula-2 clu chameleon languages that support multiple paradigms including oo tcl stands out among these for tcloo hybrid object system that supports both prototype-based programming class-based oo oop dynamic languages recent years object-oriented programming has become especially popular dynamic programming languages python powershell ruby groovy are dynamic languages built on oop principles while perl php have been adding object-oriented features since perl php coldfusion since version document object model html xhtml xml documents on internet has bindings popular javascript/ecmascript language javascript perhaps best known prototype-based programming language which employs cloning from prototypes rather than inheriting from class contrast class-based programming another scripting language that takes this approach lua oop network protocol messages that flow between computers request services client-server environment can be designed linearizations objects defined by class objects known both client server for example simple linearized object would consist length field code point identifying class data value more complex example would be command consisting length code point command values consisting linearized objects representing command's parameters each such command must be directed by server object whose class superclass recognizes command able provide requested service clients servers are best modeled complex object-oriented structures distributed data management architecture ddm took this approach used class objects define objects at four levels formal hierarchy fields defining data values that form messages such their length codepoint data values objects collections objects similar what would be found smalltalk program for messages parameters managers similar as/400 objects such directory files files consisting metadata records managers conceptually provide memory processing resources for their contained objects client server consisting all managers necessary implement full processing environment supporting such aspects directory services security concurrency control initial version ddm defined distributed file services was later extended be foundation distributed relational database architecture drda design patterns challenges object-oriented design are addressed by several methodologies most common known design patterns codified by gamma et al more broadly term design patterns can be used refer any general repeatable solution commonly occurring problem software design some these commonly occurring problems have implications solutions particular object-oriented development inheritance behavioral subtyping see also object-oriented design intuitive assume that inheritance creates semantic relationship thus infer that objects instantiated from subclasses can always be safely used instead those instantiated from superclass this intuition unfortunately false most oop languages particular all those that allow mutable objects subtype polymorphism enforced by type checker oop languages with mutable objects cannot guarantee behavioral subtyping any context behavioral subtyping undecidable general so cannot be implemented by program compiler class object hierarchies must be carefully designed considering possible incorrect uses that cannot be detected syntactically this issue known liskov substitution principle gang four design patterns main article design pattern computer science design patterns elements reusable object-oriented software influential book published by erich gamma richard helm ralph johnson john vlissides often referred humorously gang four along with exploring capabilities pitfalls object-oriented programming describes common programming problems patterns for solving them april book was its 36th printing book describes following patterns creational patterns factory method pattern abstract factory pattern singleton pattern builder pattern prototype pattern structural patterns adapter pattern bridge pattern composite pattern decorator pattern facade pattern flyweight pattern proxy pattern behavioral patterns chain-of-responsibility pattern command pattern interpreter pattern iterator pattern mediator pattern memento pattern observer pattern state pattern strategy pattern template method pattern visitor pattern object-orientation databases main articles object-relational impedance mismatch object-relational mapping object database both object-oriented programming relational database management systems rdbmss are extremely common software today since relational databases don't store objects directly though some rdbmss have object-oriented features approximate this there general need bridge two worlds problem bridging object-oriented programming accesses data patterns with relational databases known object-relational impedance mismatch there are number approaches cope with this problem but no general solution without downsides one most common approaches object-relational mapping found ide languages such visual foxpro libraries such java data objects ruby on rails' activerecord there are also object databases that can be used replace rdbmss but these have not been technically commercially successful rdbmss real-world modeling relationships oop can be used associate real-world objects processes with digital counterparts however not everyone agrees that oop facilitates direct real-world mapping see criticism section that real-world mapping even worthy goal bertrand meyer argues object-oriented software construction that program not model world but model some part world reality cousin twice removed at same time some principal limitations oop had been noted for example circle-ellipse problem difficult handle using oop's concept inheritance however niklaus wirth who popularized adage now known wirth's law software getting slower more rapidly than hardware becomes faster said oop his paper good ideas through looking glass this paradigm closely reflects structure systems 'in real world' therefore well suited model complex systems with complex behaviours contrast kiss principle steve yegge others noted that natural languages lack oop approach strictly prioritizing things objects/nouns before actions methods/ verbs this problem may cause oop suffer more convoluted solutions than procedural programming oop control flow oop was developed increase reusability maintainability source code transparent representation control flow had no priority was meant be handled by compiler with increasing relevance parallel hardware multithreaded coding developing transparent control flow becomes more important something hard achieve with oop responsibility- vs data-driven design responsibility-driven design defines classes terms contract that class should be defined around responsibility information that shares this contrasted by wirfs-brock wilkerson with data-driven design where classes are defined around data-structures that must be held authors hold that responsibility-driven design preferable solid grasp guidelines solid mnemonic invented by michael feathers that stands for advocates five programming practices single responsibility principle open/closed principle liskov substitution principle interface segregation principle dependency inversion principle grasp general responsibility assignment software patterns another set guidelines advocated by craig larman criticism oop paradigm has been criticised for number reasons including not meeting its stated goals reusability modularity for overemphasizing one aspect software design modeling data/objects at expense other important aspects computation/algorithms luca cardelli has claimed that oop code intrinsically less efficient than procedural code that oop can take longer compile that oop languages have extremely poor modularity properties with respect class extension modification tend be extremely complex latter point reiterated by joe armstrong principal inventor erlang who quoted saying problem with object-oriented languages they've got all this implicit environment that they carry around with them you wanted banana but what you got was gorilla holding banana entire jungle study by potok et al has shown no significant difference productivity between oop procedural approaches christopher j date stated that critical comparison oop other technologies relational particular difficult because lack agreed-upon rigorous definition oop however date darwen have proposed theoretical foundation on oop that uses oop kind customizable type system support rdbms article lawrence krubner claimed that compared other languages lisp dialects functional languages etc oop languages have no unique strengths inflict heavy burden unneeded complexity alexander stepanov compares object orientation unfavourably generic programming i find oop technically unsound attempts decompose world terms interfaces that vary on single type deal with real problems you need multisorted algebras — families interfaces that span multiple types i find oop philosophically unsound claims that everything object even if true not very interesting — saying that everything object saying nothing at all paul graham has suggested that oop's popularity within large companies due large frequently changing groups mediocre programmers according graham discipline imposed by oop prevents any one programmer from doing too much damage steve yegge noted that opposed functional programming object oriented programming puts nouns first foremost why would you go such lengths put one part speech on pedestal why should one kind concept take precedence over another it's not if oop has suddenly made verbs less important way we actually think it's strangely skewed perspective rich hickey creator clojure described object systems overly simplistic models real world he emphasized inability oop model time properly which getting increasingly problematic software systems become more concurrent eric s raymond unix programmer open-source software advocate has been critical claims that present object-oriented programming one true solution has written that object-oriented programming languages tend encourage thickly layered programs that destroy transparency raymond compares this unfavourably approach taken with unix c programming language rob pike programmer involved creation utf-8 go has called object-oriented programming roman numerals computing has said that oop languages frequently shift focus from data structures algorithms types furthermore he cites instance java professor whose idiomatic solution problem was create six new classes rather than simply use lookup table formal semantics see also formal semantics programming languages objects are run-time entities object-oriented system they may represent person place bank account table data any item that program has handle there have been several attempts at formalizing concepts used object-oriented programming following concepts constructs have been used interpretations oop concepts co algebraic data types abstract data types which have existential types allow definition modules but these do not support dynamic dispatch recursive types encapsulated state inheritance records are basis for understanding objects if function literals can be stored fields like functional programming languages but actual calculi need be considerably more complex incorporate essential features oop several extensions system f for formal definitions many oop concepts constructs often diverge widely for example some definitions focus on mental activities some on program structuring one simpler definitions that oop act using map data structures arrays that can contain functions pointers other maps all with some syntactic scoping sugar on top inheritance can be performed by cloning maps sometimes called prototyping see also computer programming portal comparison programming languages object-oriented programming comparison programming paradigms component-based software engineering design by contract object association object database object modeling language object-oriented analysis design object-relational impedance mismatch third manifesto object-relational mapping systems cades common object request broker architecture corba distributed component object model distributed data management architecture jeroo modeling languages idef4 interface description language lepus3 uml references kindler e krivy i object-oriented simulation systems with sophisticated control international journal general systems 313–343 lewis john loftus william java software solutions foundations programming design 6th ed pearson education inc isbn 0-321-53205-8 section object-oriented programming deborah j armstrong quarks object-oriented development survey nearly years computing literature which identified number fundamental concepts found large majority definitions oop descending order popularity inheritance object class encapsulation method message passing polymorphism abstraction john c mitchell concepts programming languages cambridge university press isbn 0-521-78098-5 p278 lists dynamic dispatch abstraction subtype polymorphism inheritance michael lee scott programming language pragmatics edition morgan kaufmann isbn 0-12-633951-1 p lists encapsulation inheritance dynamic dispatch pierce benjamin types programming languages mit press isbn 0-262-16209-1 section what object-oriented programming lists dynamic dispatch encapsulation multi-methods multiple dispatch subtype polymorphism inheritance delegation open recursion this/self booch grady software engineering with ada addison wesley p isbn 978-0805306088 perhaps greatest strength object-oriented approach development that offers mechanism that captures model real world jacobsen ivar magnus christerson patrik jonsson gunnar overgaard object oriented software engineering addison-wesley acm press pp 43–69 isbn 0-201-54435-0 mccarthy j brayton r edwards d fox p hodes l luckham d maling k park d russell s march lisp i programmers manual pdf boston massachusetts artificial intelligence group mit computation center research laboratory local mit patois association lists are also referred property lists atomic symbols are sometimes called objects mccarthy john abrahams paul w edwards daniel j hart swapnil d levin michael i lisp programmer's manual pdf mit press p isbn 0-262-13011-4 object — synonym for atomic symbol dr alan kay on meaning object-oriented programming retrieved february sutherland i e january sketchpad man-machine graphical communication system pdf technical report no lincoln laboratory massachusetts institute technology via defense technical information center stinetdticmil retrieved november b development simula languages kristen nygaard ole-johan dahl p254 uni-klacat ross doug first software engineering language lcs/ai lab timeline mit computer science artificial intelligence laboratory retrieved may dahl ole johan birth object orientation simula languages pdf doi101007/978-3-540-39993-33 retrieved june holmevik jan rune compiling simula historical study technological genesis pdf ieee annals history computing 25–37 doi 101109/85329756 retrieved may wilson leslie b robert g clark comparative programming languages ed addison-wesley p isbn 978-0-201-71012-0 simula was based on algol with one very important addition – class concept possible declare class generate objects that class name these objects form hierarchical structure class declarations wilson leslie b robert g clark comparative programming languages ed addison-wesley p isbn 978-0-201-71012-0 impact simula on design programming languages large original object-oriented language class concept has been taken over used many later languages such c++ ada smalltalk eiffel java bal henri e dick grune programming language essentials addison-wesley p isbn 0-201-63179-2 simula was first language use class concept hoare c nov record handling algol bulletin 39–69 doi101145/10610321061041 kay alan early history smalltalk archived from original on july retrieved september june visual foxpro foxpro evolves from procedural language object-oriented language visual foxpro introduces database container seamless client/server capabilities support for activex technologies ole automation null support summary fox releases foxpro history web site foxprohistoryorg reviewers guide visual foxpro dfpugde https//booksgooglecouk/booksid=mhmqfsbtxsac&pg=pa16&lpg=pa16 emerald programming language neward ted june vietnam computer science interoperability happens retrieved june meyer second edition p mtrofimov ooop – third o solution open oop first class omg vol issue p14 wirth nicklaus good ideas through looking glass pdf computer magazine 28–39 retrieved yegge steve march execution kingdom nouns steve-yeggeblogspotcom retrieved july boronczyk timothy june what's wrong with oop zaemisblogspotcom retrieved july ambler scott january realistic look at object-oriented reuse wwwdrdobbscom retrieved july shelly asaf august flaws object oriented modeling intel software network retrieved july james justin october multithreading verb not noun techrepubliccom retrieved july shelly asaf august how multicore programming multiprocessing visual c++ class design guidelines member functions supportmicrosoftcom retrieved july robert harper april some thoughts on teaching fp existential type blog retrieved december b cardelli luca bad engineering properties object-oriented languages acm comput surv acm 4es doi101145/242224242415 issn 0360-0300 retrieved april b armstrong joe coders at work reflections on craft programming peter seibel ed codersatworkcom accessed november b stepanov alexander stlport interview with stepanov retrieved april b rich hickey jvm languages summit keynote are we there yet november potok thomas mladen vouk andy rindos productivity analysis object-oriented software developed commercial environment pdf software – practice experience 833–847 doi 101002/sici1097-024x199908291030co2-p retrieved april c j date introduction database systems 6th-ed page c j date hugh darwen foundation for future database systems third manifesto 2nd edition krubner lawrence object oriented programming expensive disaster which must end smashcompanycom retrieved october graham paul why arc isn't especially object-oriented paulgrahamcom retrieved november stevey's blog rants b eric s raymond art unix programming unix object-oriented languages retrieved pike rob re threads sewing badges honor onto kernel composplan9 mailing list retrieved pike rob less exponentially more retrieved pike rob few years ago i saw this page retrieved poll erik subtyping inheritance for categorical datatypes pdf retrieved june b abadi martin cardelli luca theory objects springer-verlag new york inc isbn 0-387-94775-2 retrieved april further reading abadi martin luca cardelli theory objects springer verlag isbn 0-387-94775-2 abelson harold gerald jay sussman structure interpretation computer programs mit press isbn 0-262-01153-0 armstrong deborah j february quarks object-oriented development communications acm 123–128 doi 101145/11130341113040 issn 0001-0782 retrieved august booch grady object-oriented analysis design with applications addison-wesley isbn 0-8053-5340-2 eeles peter oliver sims building business objects john wiley & sons isbn 0-471-19176-0 gamma erich richard helm ralph johnson john vlissides design patterns elements reusable object oriented software addison-wesley isbn 0-201-63361-2 cite uses deprecated parameter |coauthors= help harmon paul william morrissey object technology casebook – lessons from award-winning business applications john wiley & sons isbn 0-471-14717-6 jacobson ivar object-oriented software engineering use case-driven approach addison-wesley isbn 0-201-54435-0 kay alan early history smalltalk meyer bertrand object-oriented software construction prentice hall isbn 0-13-629155-4 pecinovsky rudolf oop – learn object oriented thinking & programming bruckner publishing isbn 978-80-904661-8-0 rumbaugh james michael blaha william premerlani frederick eddy william lorensen object-oriented modeling design prentice hall isbn 0-13-629841-9 schach stephen object-oriented classical software engineering seventh edition mcgraw-hill isbn 0-07-319126-4 schreiner axel-tobias object oriented programming with ansi-c hanser isbn 3-446-17426-5 hdl1850/8544 taylor david object-oriented information systems – planning implementation john wiley & sons isbn 0-471-54364-0 weisfeld matt object-oriented thought process third edition addison-wesley isbn 0-672-33016-4 west david object thinking developer reference microsoft press isbn external links wikiquote has quotations related object-orientation wikiversity has learning materials about object-oriented programming at topicobject-oriented programming wikibooks has book on topic object oriented programming object-oriented programming at dmoz real life real world example object oriented programming introduction object oriented programming concepts oop more by lwc nirosh discussion about flaws ood oop concepts java tutorials science snake oil empirical software engineering thoughts on software systems engineering by ian sommerville 2011-8-29 v t e types programming languages actor-based array aspect-oriented class-based concatenative concurrent data-structured dataflow declarative domain-specific dynamic esoteric event-driven extensible functional imperative logic macro metaprogramming+multi-paradigm object-based object-oriented pipeline procedural prototype-based reflective rule-based scripting synchronous templating assembly compiled interpreted machine low-level high-level very high-level first generation second generation third generation fourth generation fifth generation non-english-based visual v t e software engineering fields computer programming requirements engineering software deployment software design software maintenance software testing systems analysis formal methods concepts data modeling enterprise architecture functional specification modeling language orthogonality programming paradigm software software archaeology software architecture software configuration management software development methodology software development process software quality software quality assurance software verification validation structured analysis orientations agile aspect-oriented object orientation ontology service orientation sdlc models developmental agile eup executable uml incremental model iterative model prototype model rad up scrum spiral model v-model waterfall model xp other spice cmmi data model er model function model information model metamodeling object model systems model view model languages idef uml sysml software engineers victor basili kent beck grady booch fred brooks barry boehm ward cunningham tom demarco edsger w dijkstra martin fowler c r hoare watts humphrey michael jackson ivar jacobson stephen j mellor bertrand meyer david parnas winston w royce james rumbaugh niklaus wirth edward yourdon mohamed fayad related fields computer science computer engineering project management risk management systems engineering category commons authority control lccn sh87007503 gnd 4233947-9 bnf cb12115131k data ndl bne xx537453 retrieved from https//enwikipediaorg/w/indexphptitle=object-orientedprogramming&oldid=750596597 categories object-oriented programming programming paradigms norwegian inventions hidden categories pages using isbn magic links all articles with failed verification articles with failed verification from june all articles with unsourced statements articles with unsourced statements from june articles with unsourced statements from february articles needing additional references from august all articles needing additional references articles containing potentially dated statements from all articles containing potentially dated statements pages containing cite templates with deprecated parameters articles with dmoz links use dmy dates from september wikipedia articles with lccn identifiers wikipedia articles with gnd identifiers wikipedia articles with bnf identifiers navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version other projects wikimedia commons wikibooks wikiversity languages afrikaans العربية azərbaycanca বাংলা беларуская беларуская тарашкевіца‎ български bosanski català čeština dansk deutsch eesti ελληνικά español esperanto euskara فارسی français galego 한국어 հայերեն हिन्दी hrvatski ido ilokano bahasa indonesia íslenska italiano עברית ქართული қазақша кыргызча latina latviešu lietuvių magyar македонски മലയാളം bahasa melayu монгол မြန်မာဘာသာ 日本語 norsk bokmål norsk nynorsk polski português română русиньскый русский scots shqip sicilianu simple english slovenčina српски / srpski srpskohrvatski / српскохрватски suomi svenska தமிழ் ไทย türkçe українська اردو tiếng việt 吴语 粵語 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 