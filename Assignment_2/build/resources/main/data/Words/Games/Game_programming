game programming from wikipedia free encyclopedia jump navigation search this article about specifics programming aspect video game development for broader overview see video game development part series on video game industry activities/jobs video game design game design game art design game development / game developer game modification game producer game programming / game programmer game publisher game studies game testing game journalism level design development game ai game design interaction design game programming level design video game art video game design video game graphics video game music types adult game casual game indie game non-game o interactive art o interactive movie nonviolent video game serious game o advergame o art game o edugame o exergame traditional game topics digital rights management drm outsourcing software license end-user license agreement eula related video game history video games lists list indie game developers list video game developers list video game industry people list video game publishers list video game websites v t e game programming subset game development software development video games game programming requires substantial skill software engineering well specialization one more following areas which overlap heavily create game simulation computer graphics artificial intelligence physics audio programming input for massively multiplayer online games additional areas such network programming database programming are often included though often engaged by professional game programmers many novices may program games hobby contents development process o prototyping o game design o production o testing o nearing completion o maintenance o duration tools o programming languages o apis libraries + graphic apis + other apis game structure hobbyists see also references external links o wikis development process professional game development usually begins with game design which itself has several possible origins occasionally game development process starts with no clear design mind but series experimentation for example game designer will wright began development sims by getting programmers experiment with several ideas prototyping programmers are often required produce prototypes gameplay ideas features great deal prototyping may take place during pre-production before design document complete may help determine what features design specifies prototypes are developed quickly with very little time for up-front design mostly act proof concept test ideas they are not expected work flawlessly but are developed try out new sometimes exotic ideas game design main article game design though programmer's main job not develop game design programmers often contribute design do game artists game designer will solicit input from both producer art programming lead for ideas strategies for game design often individuals non-lead positions also contribute such copywriters other programmers artists programmers often closely follow game design document game development progresses design document changes programming limitations new capabilities are discovered exploited production during production programmers may create great deal source code create game described game's design document along way design document modified meet limitations expanded exploit new features design document very much living document much whose life dictated by programmer's schedules talent resourcefulness while many programmers have some say game's content most game producers solicit input from lead programmer status game programming development lead responsible for knowing status all facets game's programming for pointing out limitations lead programmer may also pass on suggestions from programmers possible features they'd like implement with today's visually rich content programmer must often interact with art staff this very much depends on programmer's role course for example graphics programmer may need work side by side with game's modelers discussing strategies design considerations while ai programmer may need interact very little if at all with art staff help artists level designers with their tasks programmers may volunteer be called upon develop tools utilities many these may be for specific purpose can be buggy due time constraints time for development such tools often not included game's schedule well because they are only for in-house use anyway many game tools are developed rad languages for quicker development may be discarded after completion game testing main article game testing formal quality assurance testing process performed by professional game testers begins well into game development high-budget titles may begin testing with first playable alpha while low-budget casual games might not enter testing until release candidate ready programmers' task fix errors bugs such are discovered by qa teams nearing completion final tasks include polishing game such programmers fixing occasional bugs—from minor catastrophic—that may arise during last phases testing game developers may have beta testing period but definition such varies from developer developer often beta contains all game's features but may have few bugs incomplete content few games are given public beta period for example measure stress tolerance for game servers when game deemed complete said have gone gold shipped off publisher depending on circumstances publisher may then subject its own quality assurance may begin pressing game from gold master maintenance once game ships maintenance phase for video game begins programmers wait for period get many bug reports possible once developer thinks they've obtained enough feedback programmers start working on patch patch may take weeks months develop but it's intended fix most bugs problems with game occasionally patch may include extra features content may even alter gameplay duration most modern games take from one three years complete length development depends on number factors but programming required throughout all phases development except very early stages game design tools like other software game development programs are generated from source code actual program called executable by compiler source code can be developed with almost any text editor but many professional game programmers use full integrated development environment once again which ide one uses depends on target platform addition ides many game development companies create custom tools developed be used in-house some these include prototypes asset conversion tools programs that change artwork for example into game's custom format some custom tools may even be delivered with game such level editor game development companies are often very willing spend thousands dollars make sure their programmers are well equipped with best tools well outfitted programmer may have two three development systems multiple monitors dominating their office cubicle programming languages language features assembly potentially minimal cpu overhead c widely known widely portable numerous apis compiles machine code c++ object-oriented widely known numerous apis compiles machine code java object-oriented garbage-collected widely portable via virtual machine c visual basic net etc object-oriented garbage-collected interfaces with microsoft products objective-c swift object-oriented interfaces with apple products lua python javascript tcl etc familiar syntax easily embedded above languages often used for scripting lisp pascal perl smalltalk etc fringe game languages although bindings popular libraries are common once game's initial design has been agreed upon development language must be decided upon choice depends upon many factors such language familiarity programming staff target platforms execution speed requirements language any game engines apis libraries being used for personal computers language selected may be little more than matter preference language bindings for popular libraries such sdl allegro are widespread performance gap between idiomatic code written modern compiled languages negligible most popular languages are usually procedural/object-oriented implemented via compilers for example c c++ java however developers may take into account domain-specific features such interfacing with operating system resilience reverse engineering for online video games many games are not written one language exclusively may combine two more languages for example unity popular game engine has different pieces written c c++ c for consoles support target platform usually most considered factor past video games for consoles were written almost exclusively assembly due limited resources terms both storage processing speed however technology has advanced so have options for game development on consoles nintendo microsoft sony all have differing sdks for their wii u xbox one playstation consoles respectively high-level scripting languages are increasingly being used embedded extensions underlying game written compiled programming language for convenience both original developer anyone who would wish mod game lua very popular choice its api written ansi c language designed be embedded into other applications many developers have created custom languages altogether for their games such id software's quakec epic games' unrealscript apis libraries key decision game programming which if any apis libraries use today there are numerous libraries available which take care key tasks game programming some libraries can handle sound processing input graphics rendering some can even handle some ai tasks such pathfinding there are even entire game engines that handle most tasks game programming only require coding game logic which apis libraries one chooses depends largely on target platform for example libraries for playstation development may not be available for microsoft windows vice versa however there are game frameworks available that allow ease cross-platform development so programmers can program game single language have game run on several platforms such wii playstation xbox psp microsoft windows graphic apis today graphics are key defining feature most games while graphics used be norm for games released through mid-1990s most games now boast full graphics this true even for games which are largely nature such civilization iii most popular personal computer target platform microsoft windows since comes pre-installed on almost ninety percent pcs sold has extremely large user base two most popular graphics apis for microsoft windows are direct3d opengl benefits weaknesses each api are hotly debated among windows game programmers directx collection game apis direct3d directx's api direct3d freely available from microsoft are rest directx apis microsoft developed directx for game programmers continues add features api directx specification not controlled by open arbitration committee microsoft free add remove change features direct3d not portable designed specifically for microsoft windows no other platform though form direct3d used on microsoft's xbox windows phone smartphones mobile devices which run pocket pc operating system opengl portable api specification code written with opengl easily ported between platforms with compatible implementation for example quake ii which uses opengl was ported from windows linux by fan game opengl standard maintained by opengl architecture review board arb arb meets periodically update standard by adding emerging support for features latest hardware since standards based has been around longest opengl used by taught colleges universities around world addition development tools provided by manufacturers some video game consoles such nintendo gamecube nintendo ds psp use graphic apis that resemble opengl opengl often lags behind on feature updates due lack permanent development team requirement that implementations begin development after standard has been published programmers who choose use can access some hardware's latest features but only through non-standardized extensions situation may change future opengl architecture review board arb has passed control specification khronos group attempt counter problem other apis for development on microsoft windows various apis directx may be used for input sound effects music networking playback videos many commercial libraries are available accomplish these tasks but since directx available for free most widely used for console programming console manufacturers provide facilities for rendering graphics other tasks game development console manufacturers also provide complete development systems without which one cannot legally market nor develop games for their system third-party developers also sell toolkits libraries that ease development on one more these tasks provide special benefits such cross-platform development capabilities game structure central component any game from programming standpoint game loop game loop allows game run smoothly regardless user's input lack thereof most traditional software programs respond user input do nothing without for example word processor formats words text user types if user doesn't type anything word processor does nothing some functions may take long time complete but all are initiated by user telling program do something games on other hand must continue operate regardless user's input game loop allows this highly simplified game loop pseudocode might look something like this while user doesn't exit check for user input run ai move enemies resolve collisions draw graphics play sounds end while loop may be refined modified game development progresses but most games are based on this basic idea game loops differ depending on platform they are developed for for example games written for dos many consoles can dominate exploit available processing resources without restraint however games for modern pc operating system such microsoft windows must operate within constraints process scheduler some modern games run multiple threads so that for example computation character ai can be decoupled from generation smooth motion within game this has disadvantage slightly increased overhead but game may run more smoothly efficiently on hyper-threading multicore processors on multiprocessor platforms with computer industry's focus on cpus with more cores that can execute more threads this becoming increasingly important consoles like xbox playstation already have more than one core per processor execute more than one thread per core hobbyists only platforms widely available for hobbyists program are consumer operating systems this because development on game consoles requires special development systems that cost thousands dollars often these must be obtained from console manufacturer are only sold leased professional game development studios however microsoft used distribute game development framework xna which runs on both microsoft windows xbox xna was discontinued but other projects like monogame sharpdx are trying allow same access for game coding games written for windows often can be ported xbox with few changes this allows individuals small teams develop games for consoles some hobbyists also develop homebrew games especially for handheld systems obsolete consoles some software engineering students program games exercises for learning programming language operating system some hobbyists may use software packages that help with game development such adobe flash unity pygame adventure game studio gamemaker studio godot udk construct see also game development portal list gaming topics references sdl language bindings retrieved allegro - language bindings retrieved corlan alexandru-dan programming language benchmarks retrieved corlan alexandru-dan programming languages benchmarks retrieved b corlan alexandru-dan game programming c c++ retrieved b deloura mark engine survey general results retrieved corlan alexandru-dan lwjgl - projects retrieved 'no bugs' hare chapter vb from development&deployment mmog hyde randy using assembly language |access-date= requires |url= help helgason david november game developers start your unity engines gamesbeat interview interview with dean takahashi venturebeat retrieved july why sony using llvm/clang on playstation phoronixcom retrieved november corlan alexandru-dan lua uses retrieved opengl arb pass control opengl specification khronos group press release from khronos group programming linux games pdf isbn 1-886411-48-4 archived from original pdf on |chapter= ignored help external links gamedevnet leading resource for game development devmasternet another popular game development site international game developers association igda game development for software engineers short day short course offered by mit with guidance from mentors award-winning mit game lab one ex-game programmer's experience game development industry game industry veteran tom sloper's advice on game programming wikis game development wiki game programming wiki -gpwiki game development wiki -gdwiki retrieved from https//enwikipediaorg/w/indexphptitle=gameprogramming&oldid=748286705 categories video game development hidden categories pages using citations with accessdate no url cs1 errors chapter ignored all articles with unsourced statements articles with unsourced statements from may articles with unsourced statements from april navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages العربية български deutsch español français 日本語 polski português svenska türkçe 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 