trainer games from wikipedia free encyclopedia jump navigation search game trainers are programs made modify memory computer game thereby modifying its behavior using addresses values order allow cheating can freeze memory address disallowing game from lowering changing information stored at that memory address eg health meter ammo counter etc manipulate data at memory addresses specified suit needs person cheating at game contents history static access pointers vs api hooking automated tools used trainer making see also references history 1980s 1990s trainers were generally integrated straight into actual game by cracking groups when game was first started trainer loaded first asking player if he/she wished cheat which cheats would like be enabled then code would proceed actual game these embedded trainers came with intros about groups releasing game trainer often used showcase skills cracking group demo coding skills some these groups focus entirely on their demoscene today cracker group release lists intros trained games were marked with one more plus signs after them one for each option cheat trainer for example mega krew presents ms astro chicken++ modern trainers append their titles with single + writing plus number many have several functions number used represents number modifications trainer has available eg 'infinite health' 'one hit kills' another difference inclusion game version digital download source game for example hitman absolution steam trainer fear v plus trainer etc modern trainers also come separately downloadable programs instead modifying game's programming directly values stored memory are changed fact this has become such norm now that trainers today by definition only modifies memory any modification game exe frowned upon not considered true trainer but patch instead with object-oriented programming memory objects are often stored dynamically on heap but modern operating systems use address space layout randomization aslr therefore only way modify such memory reproducible manner get information from inside game process this requires reverse engineering methods like api hooking malloc free code injection searching for static access pointers trainer gets active when object has been allocated deactivates itself again when object freed modern operating systems also come with position-independent executables pie for security together with aslr binaries are loaded different virtual memory address each code execution this makes reliable modification static memory values more complex load address has be determined subtracted from found memory address obtain static memory offset this offset often exactly address static variable within pie binary eg linux tool scanmem supports pie this way for configured memory offset game trainer determines load address well adds back during run-time same method can be used for dynamic libraries well static access pointers vs api hooking searching following access pointers reverse pointers on static memory can be cumbersome doesn't provide size object if there are multiple objects same class these often can't be handled correctly there can be eg vectors lists between on heap but advantage that this method can be used attach already running process if works dma dynamic memory allocation support cheat engine example for that api hooking works completely differently preloader loads library into game process while starting library spys on dynamic memory allocations discovery starts with recording them all with static memory search parallel possible match found value address unique memory allocation idea close game process directly after value found object still exists then last matching memory allocation correct one so matching reverse method choice object size well value offset inside are discovered jump-back code address game binary can be determined by backtracing often constructor found with that possible keep track all memory objects allocates library game process game trainer need communicate with each other through inter-process communication ipc disadvantage this can be detected malware but possible find more values within objects by dumping comparing them also adaption other game compiler versions becomes simple all takes look for library function call with known parameter object size disassembly eg free open-source foss universal game trainer ugtrain shows this method completely legal with foss games examples automated tools used trainer making past trainers were often coded assembly language any high level language available at time today trainers can also be made with automated trainer making tools that just require basic information about cheats such address injection code program then compiles trainer using pre-defined values settings requiring no programming skill from end-user most popular trainer making tool used today cheat engine which supports wide variety injection types pointers other tools that were used past but are no longer applicable are trainer maker kit game trainer studio trainer creation kit etc some advanced techniques that cheat engine trainers supports include code injection code shifting flexibility versatility provided by its lua scripting which has phased out other trainer making tools which lacked support for some these features see also cheat engine code injection hooking references defacto2 group information page for fairlight contains information about their old demos releases stats retrieved february razor1911 group demos razor1911 demoscene division which coded impressive demos back early days embedded trainers retrieved february hitman trainer naming trainers by modern trainer groups november retrieved february gcw list trainers retrieved february listing by famous scene trainer making group dvt retrieved june scanmem introduce region type load address support retrieved june universal game trainer ugtrain retrieved december trainer making tools retrieved february lua cheat engine lua wiki explaining some scripting functions available ce retrieved retrieved from https//enwikipediaorg/w/indexphptitle=trainergames&oldid=738207316 categories software cracking video game cheating navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages deutsch فارسی galego русский svenska edit links this page was last modified on september at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 