abstraction software engineering from wikipedia free encyclopedia   redirected from abstraction computer science jump navigation search this article needs additional citations for verification please help improve this article by adding citations reliable sources unsourced material may be challenged removed june learn how when remove this template message essence abstractions preserving information that relevant given context forgetting information that irrelevant that context – john v guttag software engineering computer science abstraction technique for arranging complexity computer systems works by establishing level complexity on which person interacts with system suppressing more complex details below current level programmer works with idealized interface usually well defined can add additional levels functionality that would otherwise be too complex handle for example programmer writing code that involves numerical operations may not be interested way numbers are represented underlying hardware eg whether they're bit bit integers where those details have been suppressed can be said that they were abstracted away leaving simply numbers with which programmer can work addition task sending email message across continents would be extremely complex if you start with piece optic cable basic hardware components by using layers complexity that have been created abstract away physical cables network layout presenting programmer with virtual data channel this task manageable abstraction can apply control data control abstraction abstraction actions while data abstraction that data structures control abstraction involves use subprograms related concepts control flows data abstraction allows handling data bits meaningful ways for example basic motivation behind datatype one can view notion object way combine abstractions data code same abstract definition can be used common interface for family objects with different implementations behaviors but which share same meaning inheritance mechanism object-oriented programming can be used define abstract class common interface recommendation that programmers use abstractions whenever suitable order avoid duplication usually code known abstraction principle requirement that programming language provide suitable abstractions also called abstraction principle contents rationale language features o programming languages o specification methods o specification languages control abstraction o structured programming data abstraction abstraction object oriented programming o object-oriented design considerations levels abstraction o database systems o layered architecture see also references further reading external links rationale computing mostly operates independently concrete world hardware implements model computation that interchangeable with others software structured architectures enable humans create enormous systems by concentrating on few issues at time these architectures are made specific choices abstractions greenspun's tenth rule aphorism on how such architecture both inevitable complex central form abstraction computing language abstraction new artificial languages are developed express specific aspects system modeling languages help planning computer languages can be processed with computer example this abstraction process generational development programming languages from machine language assembly language high-level language each stage can be used stepping stone for next stage language abstraction continues for example scripting languages domain-specific programming languages within programming language some features let programmer create new abstractions these include subroutines modules polymorphism software components some other abstractions such software design patterns architectural styles remain invisible programming language operate only design system some abstractions try limit breadth concepts programmer needs by completely hiding abstractions that turn are built on software engineer writer joel spolsky has criticised these efforts by claiming that all abstractions are leaky — that they can never completely hide details below however this does not negate usefulness abstraction some abstractions are designed interoperate with others for example programming language may contain foreign function interface for making calls lower-level language data abstraction separation between specification data object its implementation language features programming languages main article programming language different programming languages provide different types abstraction depending on intended applications for language for example object-oriented programming languages such c++ object pascal java concept abstraction has itself become declarative statement – using keywords virtual c++ abstract interface java after such declaration responsibility programmer implement class instantiate object declaration functional programming languages commonly exhibit abstractions related functions such lambda abstractions making term into function some variable higher-order functions parameters are functions bracket abstraction making term into function variable modern lisps such clojure scheme common lisp support macro systems allow syntactic abstraction this allows lisp programmer eliminate boilerplate code abstract away tedious function call sequences implement new control flow structures implement even build domain specific languages dsls which allow domain-specific concepts be expressed some optimised way all these when used correctly improve both programmer's efficiency clarity code by making intended purpose more explicit consequence syntactic abstraction also that any lisp dialect fact almost any programming language can principle be implemented any modern lisp with significantly reduced but still non-trivial some cases effort when compared more traditional programming languages such python c java specification methods main article formal specification analysts have developed various methods formally specify software systems some known methods include abstract-model based method vdm z algebraic techniques larch clear obj act one casl process-based techniques lotos sdl estelle trace-based techniques special tam knowledge-based techniques refine gist specification languages main article specification language specification languages generally rely on abstractions one kind another since specifications are typically defined earlier project at more abstract level than eventual implementation uml specification language for example allows definition abstract classes which remain abstract during architecture specification phase project control abstraction main article control flow programming languages offer control abstraction one main purposes their use computer machines understand operations at very low level such moving some bits from one location memory another location producing sum two sequences bits programming languages allow this be done higher level for example consider this statement written pascal-like fashion = + human this seems fairly simple obvious calculation one plus two three times five fifteen however low-level steps necessary carry out this evaluation return value then assign that value variable are actually quite subtle complex values need be converted binary representation often much more complicated task than one would think calculations decomposed by compiler interpreter into assembly instructions again which are much less intuitive programmer operations such shifting binary register left adding binary complement contents one register another are simply not how humans think about abstract arithmetical operations addition multiplication finally assigning resulting value variable labeled so that can be used later involves additional 'behind-the-scenes' steps looking up variable's label resultant location physical virtual memory storing binary representation that memory location etc without control abstraction programmer would need specify all register/binary-level steps each time they simply wanted add multiply couple numbers assign result variable such duplication effort has two serious negative consequences forces programmer constantly repeat fairly common tasks every time similar operation needed forces programmer program for particular hardware instruction set structured programming main article structured programming structured programming involves splitting complex program tasks into smaller pieces with clear flow-control interfaces between components with reduction complexity potential for side-effects simple program this may aim ensure that loops have single obvious exit points where possible have single exit points from functions procedures larger system may involve breaking down complex tasks into many different modules consider system which handles payroll on ships at shore offices uppermost level may feature menu typical end-user operations within that could be standalone executables libraries for tasks such signing on off employees printing checks within each those standalone components there could be many different source files each containing program code handle part problem with only selected interfaces available other parts program sign on program could have source files for each data entry screen database interface which may itself be standalone third party library statically linked set library routines either database payroll application also has initiate process exchanging data with between ship shore that data transfer task will often contain many other components these layers produce effect isolating implementation details one component its assorted internal methods from others object-oriented programming embraces extends this concept data abstraction main article abstract data type data abstraction enforces clear separation between abstract properties data type concrete details its implementation abstract properties are those that are visible client code that makes use data type—the interface data type—while concrete implementation kept entirely private indeed can change for example incorporate efficiency improvements over time idea that such changes are not supposed have any impact on client code since they involve no difference abstract behaviour for example one could define abstract data type called lookup table which uniquely associates keys with values which values may be retrieved by specifying their corresponding keys such lookup table may be implemented various ways hash table binary search tree even simple linear list keyvalue pairs far client code concerned abstract properties type are same each case course this all relies on getting details interface right first place since any changes there can have major impacts on client code one way look at this interface forms contract on agreed behaviour between data type client code anything not spelled out contract subject change without notice languages that implement data abstraction include ada modula-2 object-oriented languages are commonly claimed offer data abstraction however their inheritance concept tends put information interface that more properly belongs implementation thus changes such information ends up impacting client code leading directly fragile binary interface problem abstraction object oriented programming main article object computer science object-oriented programming theory abstraction involves facility define objects that represent abstract actors that can perform work report on change their state communicate with other objects system term encapsulation refers hiding state details but extending concept data type from earlier programming languages associate behavior most strongly with data standardizing way that different data types interact beginning abstraction when abstraction proceeds into operations defined enabling objects different types be substituted called polymorphism when proceeds opposite direction inside types classes structuring them simplify complex set relationships called delegation inheritance various object-oriented programming languages offer similar facilities for abstraction all support general strategy polymorphism object-oriented programming which includes substitution one type for another same similar role although not generally supported configuration image package may predetermine great many these bindings at compile-time link-time loadtime this would leave only minimum such bindings change at run-time common lisp object system self for example feature less class-instance distinction more use delegation for polymorphism individual objects functions are abstracted more flexibly better fit with shared functional heritage from lisp c++ exemplifies another extreme relies heavily on templates overloading other static bindings at compile-time which turn has certain flexibility problems although these examples offer alternate strategies for achieving same abstraction they do not fundamentally alter need support abstract nouns code - all programming relies on ability abstract verbs functions nouns data structures either processes consider for example sample java fragment represent some common farm animals level abstraction suitable model simple aspects their hunger feeding defines animal class represent both state animal its functions public class animal extends livingthing { private location loc private double energyreserves public boolean ishungry { return energyreserves abstract methods classes java™ tutorials oracle retrieved september using interface type java™ tutorials oracle retrieved september luciano floridi levellism method abstraction ieg – research report this article based on material taken from free on-line dictionary computing prior november incorporated under relicensing terms gfdl version later further reading harold abelson gerald jay sussman julie sussman july structure interpretation computer programs ed mit press isbn 978-0-262-01153-2 retrieved june spolsky joel november law leaky abstractions joel on software abstraction/information hiding - cs211 course cornell university eric s roberts programming abstractions c second course computer science palermo jeffrey july onion architecture jeffrey palermo external links simarch example layered architecture for distributed simulation systems retrieved from https//enwikipediaorg/w/indexphptitle=abstractionsoftwareengineering&oldid=752237570 categories data management programming paradigms abstraction hidden categories articles needing additional references from june all articles needing additional references articles with specifically marked weasel-worded phrases from march use dmy dates from june articles with example java code navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages afrikaans العربية български bosanski català dansk deutsch español فارسی français 한국어 bahasa indonesia italiano עברית bahasa melayu 日本語 polski português русский srpskohrvatski / српскохрватски türkçe українська 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 