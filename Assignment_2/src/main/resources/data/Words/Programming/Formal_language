formal language from wikipedia free encyclopedia jump navigation search this article about technical term mathematics computer science for related studies about natural languages see formal semantics linguistics for formal modes speech natural languages see register sociolinguistics structure syntactically well-formed although nonsensical english sentence historical example from chomsky mathematics computer science linguistics formal language set strings symbols that may be constrained by rules that are specific alphabet formal language set symbols letters tokens from which strings language may be formed frequently required be finite strings formed from this alphabet are called words words that belong particular formal language are sometimes called well-formed words well-formed formulas formal language often defined by means formal grammar such regular grammar context-free grammar also called its formation rule field formal language theory studies primarily purely syntactical aspects such languages—that their internal structural patterns formal language theory sprang out linguistics way understanding syntactic regularities natural languages computer science formal languages are used among others basis for defining grammar programming languages formalized versions subsets natural languages which words language represent concepts that are associated with particular meanings semantics computational complexity theory decision problems are typically defined formal languages complexity classes are defined sets formal languages that can be parsed by machines with limited computational power logic foundations mathematics formal languages are used represent syntax axiomatic systems mathematical formalism philosophy that all mathematics can be reduced syntactic manipulation formal languages this way contents history words over alphabet definition examples o constructions language-specification formalisms operations on languages applications o programming languages o formal theories systems proofs + interpretations models see also references o citation footnotes o general references external links history ] this section needs expansion you can help by adding april first formal language thought be one used by gottlob frege his begriffsschrift literally meaning concept writing which frege described formal language pure thought axel thue's early semi-thue system which can be used for rewriting strings was influential on formal grammars words over alphabet alphabet context formal languages can be any set although often makes sense use alphabet usual sense word more generally character set such ascii unicode alphabets can also be infinite eg first-order logic often expressed using alphabet which besides symbols such ∧ ¬ ∀ parentheses contains infinitely many elements x0 x1 x2 … that play role variables elements alphabet are called its letters word over alphabet can be any finite sequence string characters letters which sometimes may include spaces are separated by specified word separation characters set all words over alphabet σ usually denoted by σ using kleene star length word number characters letters composed for any alphabet there only one word length empty word which often denoted by e ε λ by concatenation one can combine two words form new word whose length sum lengths original words result concatenating word with empty word original word some applications especially logic alphabet also known vocabulary words are known formulas sentences this breaks letter/word metaphor replaces by word/sentence metaphor definition formal language l over alphabet σ subset σ that set words over that alphabet sometimes sets words are grouped into expressions whereas rules constraints may be formulated for creation 'well-formed expressions' computer science mathematics which do not usually deal with natural languages adjective formal often omitted redundant while formal language theory usually concerns itself with formal languages that are described by some syntactical rules actual definition concept formal language only above possibly infinite set finite-length strings composed from given alphabet no more nor less practice there are many languages that can be described by rules such regular languages context-free languages notion formal grammar may be closer intuitive concept language one described by syntactic rules by abuse definition particular formal language often thought being equipped with formal grammar that describes examples following rules describe formal language l over alphabet σ = { 0 1 2 3 4 5 6 7 8 9 + = } every nonempty string that does not contain + = does not start with l string l string containing = l if only if there exactly one = separates two valid strings l string containing + but not = l if only if every + string separates two valid strings l no string l other than those implied by previous rules under these rules string 23+4=555 l but string =234=+ not this formal language expresses natural numbers well-formed addition statements well-formed addition equalities but expresses only what they look like their syntax not what they mean semantics for instance nowhere these rules there any indication that means number zero that + means addition constructions for finite languages one can explicitly enumerate all well-formed words for example we can describe language l just l = {a b ab cba} degenerate case this construction empty language which contains no words at all l = ∅ however even over finite non-empty alphabet such σ = {a b} there are infinite number words that can potentially be expressed abb ababba aaababbbbaab … therefore formal languages are typically infinite describing infinite formal language not simple writing l = {a b ab cba} here are some examples formal languages l = σ set all words over σ l = {a} = {an} where n ranges over natural numbers n means repeated n times this set words consisting only symbol set syntactically correct programs given programming language syntax which usually defined by context-free grammar set inputs upon which certain turing machine halts set maximal strings alphanumeric ascii characters on this line ie set {the set maximal strings alphanumeric ascii characters on this line i e} language-specification formalisms formal languages are used tools multiple disciplines however formal language theory rarely concerns itself with particular languages except examples but mainly concerned with study various types formalisms describe languages for instance language can be given those strings generated by some formal grammar those strings described matched by particular regular expression those strings accepted by some automaton such turing machine finite state automaton those strings for which some decision procedure algorithm that asks sequence related yes/no questions produces answer yes typical questions asked about such formalisms include what their expressive power can formalism x describe every language that formalism y can describe can describe other languages what their recognizability how difficult decide whether given word belongs language described by formalism x what their comparability how difficult decide whether two languages one described formalism x one formalism y x again are actually same language surprisingly often answer these decision problems cannot be done at all extremely expensive with characterization how expensive therefore formal language theory major application area computability theory complexity theory formal languages may be classified chomsky hierarchy based on expressive power their generative grammar well complexity their recognizing automaton context-free grammars regular grammars provide good compromise between expressivity ease parsing are widely used practical applications operations on languages certain operations on languages are common this includes standard set operations such union intersection complement another class operation element-wise application string operations examples suppose l1 l2 are languages over some common alphabet concatenation l1l2 consists all strings form vw where v string from l1 w string from l2 intersection l1 ∩ l2 l1 l2 consists all strings which are contained both languages complement ¬l language with respect given alphabet consists all strings over alphabet that are not language kleene star language consisting all words that are concatenations more words original language reversal o let e be empty word then er = e o for each non-empty word w = x1…xn over some alphabet let wr = xn…x1 o then for formal language l lr = {wr | w ∈ l} string homomorphism such string operations are used investigate closure properties classes languages class languages closed under particular operation when operation applied languages class always produces language same class again for instance context-free languages are known be closed under union concatenation intersection with regular languages but not closed under intersection complement theory trios abstract families languages studies most common closure properties language families their own right closure properties language families l {\displaystyle l{1}} op l {\displaystyle l{2}} where both l {\displaystyle l{1}} l {\displaystyle l{2}} are language family given by column after hopcroft ullman operation regular dcfl cfl ind csl recursive re union { w | w ∈ l ∨ w ∈ l } {\displaystyle \{w|w\in l{1}\lor w\in l{2}\}} yes no yes yes yes yes yes intersection { w | w ∈ l ∧ w ∈ l } {\displaystyle \{w|w\in l{1}\land w\in l{2}\}} yes no no no yes yes yes complement { w | w ∉ l } {\displaystyle \{w|w\not \in l{1}\}} yes yes no no yes yes no concatenation l ⋅ l = { w ⋅ z | w ∈ l ∧ z ∈ l } {\displaystyle l{1}\cdot l{2}=\{w\cdot z|w\in l{1}\land z\in l{2}\}} yes no yes yes yes yes yes kleene star l ∗ = { ϵ } ∪ { w ⋅ z | w ∈ l ∧ z ∈ l ∗ } {\displaystyle l{1}^{}=\{\epsilon \}\cup \{w\cdot z|w\in l{1}\land z\in l{1}^{}\}} yes no yes yes yes yes yes homomorphism yes no yes yes no no yes e-free homomorphism yes no yes yes yes yes yes substitution yes no yes yes yes no yes inverse homomorphism yes yes yes yes yes yes yes reverse { w r | w ∈ l } {\displaystyle \{w^{r}|w\in l\}} yes no yes yes yes yes yes intersection with regular language { w | w ∈ l ∧ w ∈ r } r regular {\displaystyle \{w|w\in l{1}\land w\in r\}r{\text{ regular}}} yes yes yes yes yes yes yes applications programming languages main articles syntax programming languages compiler compiler compiler usually has two distinct components lexical analyzer generated by tool like lex identifies tokens programming language grammar eg identifiers keywords which are themselves expressed simpler formal language usually by means regular expressions at most basic conceptual level parser usually generated by parser generator like yacc attempts decide if source program valid that if belongs programming language for which compiler was built course compilers do more than just parse source code — they usually translate into some executable format because this parser usually outputs more than yes/no answer typically abstract syntax tree this used by subsequent stages compiler eventually generate executable containing machine code that runs directly on hardware some intermediate code that requires virtual machine execute formal theories systems proofs this diagram shows syntactic divisions within formal system strings symbols may be broadly divided into nonsense well-formed formulas set well-formed formulas divided into theorems non-theorems main articles theory mathematical logic formal system mathematical logic formal theory set sentences expressed formal language formal system also called logical calculus logical system consists formal language together with deductive apparatus also called deductive system deductive apparatus may consist set transformation rules which may be interpreted valid rules inference set axioms have both formal system used derive one expression from one more other expressions although formal language can be identified with its formulas formal system cannot be likewise identified by its theorems two formal systems f s {\displaystyle {\mathcal {fs}}} f s ′ {\displaystyle {\mathcal {fs'}}} may have all same theorems yet differ some significant proof-theoretic way formula may be syntactic consequence formula b one but not another for instance formal proof derivation finite sequence well-formed formulas which may be interpreted propositions each which axiom follows from preceding formulas sequence by rule inference last sentence sequence theorem formal system formal proofs are useful because their theorems can be interpreted true propositions interpretations models main articles formal semantics logic interpretation logic model theory formal languages are entirely syntactic nature but may be given semantics that give meaning elements language for instance mathematical logic set possible formulas particular logic formal language interpretation assigns meaning each formulas—usually truth value study interpretations formal languages called formal semantics mathematical logic this often done terms model theory model theory terms that occur formula are interpreted mathematical structures fixed compositional interpretation rules determine how truth value formula can be derived from interpretation its terms model for formula interpretation terms such that formula becomes true see also combinatorics on words grammar framework formal method mathematical notation associative array string computer science references citation footnotes see eg reghizzi stefano crespi formal languages compilation texts computer science springer p isbn alphabet finite set martin davis influences mathematical logic on computer science rolf herken universal turing machine half-century survey springer p isbn 978-3-211-82637-9 hopcroft & ullman chapter closure properties families languages general references g hamilton logic for mathematicians cambridge university press isbn 0-521-21838-1 seymour ginsburg algebraic automata theoretic properties formal languages north-holland isbn 0-7204-2506-9 michael harrison introduction formal language theory addison-wesley john e hopcroft jeffrey d ullman introduction automata theory languages computation addison-wesley publishing reading massachusetts isbn 81-7808-347-7 rautenberg wolfgang concise introduction mathematical logic 3rd ed new york springer science+business media doi 101007/978-1-4419-1221-3 isbn 978-1-4419-1220-6 grzegorz rozenberg arto salomaa handbook formal languages volume i-iii springer isbn 3-540-61486-9 patrick suppes introduction logic d van nostrand isbn 0-442-08072-7 external links hazewinkel michiel ed formal language encyclopedia mathematics springer isbn 978-1-55608-010-4 alphabet planetmath language planetmath university maryland formal language definitions james power notes on formal language theory parsing november drafts some chapters handbook formal language theory vol 1-3 g rozenberg salomaa eds springer verlag o alexandru mateescu arto salomaa preface vol1 pp v-viii formal languages introduction synopsis chapter vol pp1-39 o sheng yu regular languages chapter vol o jean-michel autebert jean berstel luc boasson context-free languages push-down automata chapter vol o christian choffrut juhani karhumäki combinatorics words chapter vol o tero harju juhani karhumäki morphisms chapter vol pp - o jean-eric pin syntactic semigroups chapter vol pp 679-746 o m crochemore c hancart automata for matching patterns chapter vol o dora giammarresi antonio restivo two-dimensional languages chapter vol pp - v t e automata theory formal languages formal grammars chomsky hierarchy grammars languages abstract machines type-0 — type-1 — — — — — type-2 — — type-3 — — unrestricted no common name context-sensitive positive range concatenation indexed — linear context-free rewriting systems tree-adjoining context-free deterministic context-free visibly pushdown regular — non-recursive recursively enumerable decidable context-sensitive positive range concatenation indexed — linear context-free rewriting language tree-adjoining context-free deterministic context-free visibly pushdown regular star-free finite turing machine decider linear-bounded ptime turing machine nested stack thread automaton restricted tree stack automaton embedded pushdown nondeterministic pushdown deterministic pushdown visibly pushdown finite counter-free with aperiodic finite monoid acyclic finite each category languages except those marked by proper subset category directly above any language each category generated by grammar by automaton category same line v t e mathematical logic general formal language formation rule formal system deductive system formal proof formal semantics well-formed formula set element class classical logic axiom natural deduction rule inference relation theorem logical consequence axiomatic system type theory symbol syntax theory traditional logic proposition inference argument validity cogency syllogism square opposition venn diagram propositional calculus boolean logic boolean functions propositional calculus propositional formula logical connectives truth tables many-valued logic predicate logic first-order quantifiers predicate second-order monadic predicate calculus naive set theory set empty set element enumeration extensionality finite set infinite set subset power set countable set uncountable set recursive set domain codomain image map function relation ordered pair set theory foundations mathematics zermelo–fraenkel set theory axiom choice general set theory kripke–platek set theory von neumann–bernays–gödel set theory morse–kelley set theory tarski–grothendieck set theory model theory model interpretation non-standard model finite model theory truth value validity proof theory formal proof deductive system formal system theorem logical consequence rule inference syntax computability theory recursion recursive set recursively enumerable set decision problem church–turing thesis computable function primitive recursive function authority control gnd 4017848-1 ndl retrieved from https//enwikipediaorg/w/indexphptitle=formallanguage&oldid=744703423 categories formal languages theoretical computer science combinatorics on words hidden categories use dmy dates from july articles be expanded from april all articles be expanded articles using small message boxes articles with inconsistent citation formats wikipedia articles with gnd identifiers navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version other projects wikimedia commons languages العربية български bosanski català čeština dansk deutsch ελληνικά español esperanto فارسی français 한국어 हिन्दी hrvatski italiano עברית lietuvių magyar македонски mirandés nederlands 日本語 norsk bokmål polski português română русский simple english slovenčina کوردیی ناوەندی српски / srpski srpskohrvatski / српскохрватски suomi svenska türkçe українська tiếng việt 中文 edit links this page was last modified on october at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 