edsger w dijkstra from wikipedia free encyclopedia   redirected from edsger dijkstra jump navigation search edsger wybe dijkstra born may rotterdam netherlands died august aged nuenen netherlands fields computing science theoretical computer science institutions mathematisch centrum eindhoven university technology burroughs corporation university texas at austin doctoral advisor adriaan van wijngaarden doctoral students nico habermann jan van de snepscheut known for dijkstra's algorithm influences adriaan van wijngaarden influenced tony hoare niklaus wirth per brinch hansen leslie lamport david gries david parnas shlomi dolev alexander stepanov notable awards turing award association for computing machinery dijkstra prize edsger wybe dijkstra dutch listen may – august was dutch computer scientist theoretical physicist by training he worked programmer at mathematisch centrum amsterdam from he was professor mathematics at eindhoven university technology 1962–1984 research fellow at burroughs corporation 1973–1984 he held schlumberger centennial chair computer sciences at university texas at austin from until retired professor emeritus one most influential members computing science's founding generation dijkstra helped shape new discipline from both engineering theoretical perspective many his papers are source new research areas several concepts problems that are now standard computer science were first identified by dijkstra and/or bear names coined by him computer programming 1950s 1960s was not recognized academic discipline dijkstra who had background mathematics physics was one moving forces behind acceptance computer programming scientific discipline dijkstra coined phrase structured programming during 1970s this became new programming orthodoxy dijkstra's ideas about structured programming helped lay foundations for birth development professional discipline software engineering enabling programmers organize manage increasingly complex software projects dijkstra was early theoretical pioneer many research areas computing science paper his credited with being first paper field concurrent computing concurrent programming he was also one early pioneers research on principles distributed computing shortly before his death he received acm podc influential-paper award distributed computing for his work on self-stabilization program computation this annual award was renamed dijkstra prize edsger w dijkstra prize distributed computing following year his honor contents biography o early years o mathematisch centrum amsterdam o eindhoven university technology o burroughs corporation o university texas at austin o last years scientific contributions impacts o algorithmic work o compiler construction programming language research o programming paradigm methodology o program design development software engineering research o operating system research o concurrent computing programming o distributed computing o formal specification verification o on nature computer science computer programming personality working style ewds personal life influence recognition awards honors see also selected publications references external links biography early years edsger w dijkstra was born rotterdam his father was chemist who was president dutch chemical society he taught chemistry at secondary school was later its superintendent his mother was mathematician but never had formal job dijkstra had considered career law had hoped represent netherlands united nations however after graduating from school at his parents' suggestion he studied mathematics physics then theoretical physics at university leiden early 1950s electronic computers were novelty dijkstra stumbled on his career quite by accident through his supervisor professor haantjes he met adriaan van wijngaarden director computation department at mathematical center amsterdam who offered dijkstra job he officially became netherlands' first programmer march for some time dijkstra remained committed physics working on three days out each week with increasing exposure computing however his focus began shift toward programming he earned his degree from leiden mathematics theoretical physics he received his phd from university amsterdam for thesis entitled 'communication with automatic computer' devoted description assembly language designed for first commercial computer developed netherlands x1 his thesis supervisor was van wijngaarden mathematisch centrum amsterdam cwi's logo dijkstra worked programmer at cwi centrum wiskunde & informatica / mathematisch centrum amsterdam from from until dijkstra worked at mathematisch centrum amsterdam where he worked closely with bram jan loopstra carel s scholten who had been hired build computer their mode interaction was disciplined they would first decide upon interface between hardware software by writing programming manual then hardware designers would have be faithful their part contract while dijkstra programmer would write software for nonexistent machine two lessons he learned from this experience were importance clear documentation that program debugging can be largely avoided through careful design dijkstra formulated solved shortest path problem for demonstration at official inauguration armac computer but —because absence journals dedicated automatic computing— did not publish result until at mathematical center dijkstra his colleague jaap zonneveld nl developed compiler for programming language algol had profound influence on his later thinking on programming scientific activity he zonneveld had completed implementation first algol compiler by august more than year before compiler was produced by another group eindhoven university technology eindhoven university technology located eindhoven south netherlands where dijkstra was professor mathematics from dijkstra moved eindhoven later nuenen south netherlands where he became professor mathematics department at eindhoven university technology university did not have separate computer science department culture mathematics department did not particularly suit him dijkstra tried build group computer scientists who could collaborate on solving problems this was unusual model research for mathematics department late 1960s he built operating system named for university then known technische hogeschool eindhoven which has influenced designs subsequent operating systems burroughs corporation dijkstra joined burroughs corporation company known at that time for production computers based on innovative hardware architecture its research fellow august his duties consisted visiting some company's research centers few times year carrying on his own research which he did smallest burroughs research facility namely his study on second floor his house nuenen fact dijkstra was only research fellow burroughs corporation worked for from home occasionally travelling its branches united states result he reduced his appointment at university one day week that day tuesday soon became known day famous 'tuesday afternoon club' seminar during which he discussed with his colleagues scientific articles looking at all aspects – notation organisation presentation language content etc shortly after he moved university texas at austin usa new 'branch' tuesday afternoon club emerged austin burroughs years saw him at his most prolific output research articles he wrote nearly documents ewd series described below most them technical reports for private circulation within select group university texas at austin university texas at austin where dijkstra held schlumberger centennial chair computer sciences from until dijkstra accepted schlumberger centennial chair computer science department at university texas at austin last years dijkstra worked austin until his retirement november mark occasion celebrate his forty-plus years seminal contributions computing science department computer sciences organized symposium which took place on his 70th birthday may dijkstra his wife returned from austin his original house nuenen netherlands where he found that he had only months live he said that he wanted retire austin texas but die netherlands dijkstra died on august after long struggle with cancer he his wife maria ria debets were survived by their three children marcus femke computer scientist rutger m dijkstra scientific contributions impacts early theoretical pioneer many research areas computing science dijkstra helped shape new discipline from both engineering academic perspective many his papers are source new research areas many concepts that are now standard computer science were first identified by dijkstra and/or bear names coined by him several important problems were also first formulated solved by him survey over thousand professors computer science was conducted obtain list most influential scholarly papers field dijkstra author five papers algorithmic work dijkstra's algorithm picks unvisited vertex with lowest-distance calculates distance through each unvisited neighbor updates neighbor's distance if smaller mark visited set red when done with neighbors dijkstra's algorithmic work especially graph algorithms concurrent algorithms distributed algorithms plays important role many areas computing science according leslie lamport dijkstra started field concurrent distributed algorithms with his cacm paper solution problem concurrent programming control which he first stated solved mutual exclusion problem lamport explains that paper probably why podc exists remains this day most influential paper field that did not win podc influential paper award reflects artificial separation between concurrent distributed algorithms–a separation that has never existed dijkstra's work dijkstra published 3-page article 'a note on two problems connexion with graphs' algorithm find shortest path graph between any two given nodes now called dijkstra's algorithm its impact over next years summarised from article mikkel thorup 'undirected single source shortest paths with positive integer weights linear time' since all theoretical developments sssp for general directed undirected graphs have been based on dijkstra's algorithm dijkstra's algorithm used spf shortest path first which used routing protocols ospf is-is various modifications dijkstra's algorithm have been proposed by many authors using heuristics reduce run time shortest path search one most used heuristic algorithms search algorithm main goal reduce run time by reducing search space search algorithm first described by peter hart nils nilsson bertram raphael stanford research institute extension dijkstra's algorithm dijkstra thought about shortest path problem when working at mathematical center amsterdam programmer demonstrate capabilities new computer called armac his objective was choose both problem well answer that would be produced by computer that non-computing people could understand he designed shortest path algorithm about minutes without aid paper pen later implemented for armac for slightly simplified transportation map cities netherland cities so that bits would suffice represent city algorithm year later he came across another problem from hardware engineers working on institute's next computer minimize amount wire needed connect pins on back panel machine solution he re-discovered algorithm known prim's minimal spanning tree algorithm prim's algorithm was originally developed by czech mathematician vojtěch jarník later independently rediscovered republished by robert c prim dijkstra therefore also sometimes called djp algorithm dijkstra first described shunting-yard algorithm method for parsing mathematical expressions specified infix notation mathematisch centrum report can be used produce output reverse polish notation rpn abstract syntax tree ast algorithm was named shunting yard algorithm because its operation resembles that railroad shunting yard shunting-yard algorithm commonly used implement operator-precedence parsers dijkstra proposed semaphore mechanism for mutual exclusion algorithm for n processes generalization dekker's algorithm which was probably first published concurrent algorithm which introduced new area algorithmic research he also identified deadlock problem proposed banker's algorithm that prevents deadlock dijkstra presented three self-stabilizing algorithms for mutual exclusion on ring dijkstra's work considered be first introduce demonstrate self-stabilization concept mid-1970s dijkstra together with other authors introduced two useful abstractions mutator collector study garbage collection mutator abstracts process that performs computation including allocation new storage cell collector process that automatically reclaims garbage furthermore this paper gives formalization tri-color marking that basic incremental garbage collection early 1980s dijkstra carel s scholten proposed dijkstra–scholten algorithm for detecting termination distributed systems dijkstra developed smoothsort comparison-based sorting algorithm variation heapsort compiler construction programming language research by august dijkstra his colleague zonneveld had completed implementation first algol compiler for electrologica x1 computer dijkstra was known be fan algol worked on team that implemented first compiler for that language he was closely involved algol development realisation popularisation discussed by peter naur article 'the european side last phase development algol 60' proceedings first acm sigplan conference on history programming languages january dijkstra took part period 1958–1959 number meetings that culminated publication report defining algol language dijkstra's name does not appear list authors final report apparently he eventually left committee because he could not agree with majority opinions still while at mathematisch centrum amsterdam he wrote jointly with jaap zonneveld first algol compiler dijkstra zonneveld who collaborated on compiler agreed not shave until project was completed while zonneveld shaved shortly thereafter dijkstra kept his beard for rest his life algol was result collaboration american european committees algol short for algorithmic language member algol family computer programming languages followed on from algol inspired many languages that followed gave rise many other programming languages including bcpl b pascal simula c algol was sophisticatedly designed computer language provided large number hitherto unknown implementation challenges bjarne stroustrup notes one problem with algol60 was that no one knew how implement major new challenge algol implementation was run-time allocation management data dijkstra zonneveld showed how recursive procedures could be executed using run-time stack activation records how efficiently access identifiers from statically enclosing scopes using so-called 'display' algol compiler was one first support recursion employing novel method do so dijkstra's short book primer algol programming originally published was standard reference for language for several years programming paradigm methodology computer programming 1950s 1960s was not recognized academic discipline unlike mature sciences there were no theoretical concepts coding systems programming professional activity was poorly understood those years late 1960s computer programming was state crisis software crisis term used early days computing science for difficulty writing useful efficient computer programs required time software crisis was due rapid increases computer power complexity problems that could be tackled with increase complexity software many software problems arose because existing methods were neither sufficient nor up mark term software crisis was coined by some attendees at first nato software engineering conference at garmisch germany his acm turing award lecture makes reference this same problem major cause software crisis that machines have become several orders magnitude more powerful put quite bluntly long there were no machines programming was no problem at all when we had few weak computers programming became mild problem now we have gigantic computers programming has become equally gigantic problem while dijkstra had programmed extensively machine code 1950s he came conclusion that high-level languages frequent use goto statement was usually symptomatic poor structure he wrote private paper case against go statement which was then published letter cacm editor niklaus wirth gave this letter heading go statement considered harmful which introduced phrase considered harmful into computing dijkstra argued that programming statement goto found many high-level programming languages major source errors should therefore be eliminated this letter caused huge debate programming community some went length equating good programming with elimination go dijkstra refused mention debate even go statement his article notes on structured programming debate has long since died down programming languages provide alternatives go few programmers today use liberally most never use at all dijkstra's thesis was that departures from linear control flow were clearer if allowed only disciplined higher-level structures such if-then-else statement while loop this methodology was developed into structured programming movement title his book coauthored with car hoare ole-johan dahl considered by many first significant movement history computer programming structured programming became new programming orthodoxy during 1970s bertrand meyer remarked revolution views programming started by dijkstra's iconoclasm led movement known structured programming which advocated systematic rational approach program construction structured programming basis for all that has been done since programming methodology including object-oriented programming program design development software engineering research dijkstra's ideas about programming methodology especially structured programming movement helped lay foundations for birth development professional discipline software engineering particular software design development enabling programmers organize manage increasingly complex software projects late 1960s dijkstra discussed concept program families mid 1970s david parnas others clarified idea showed how apply software engineering principles rise structured programming movement led many other structured approaches applied software design techniques structured analysis structured design are outgrowths structured programming concepts techniques early ideas about modular design principles modularity were strengthened by larry constantine's concepts coupling be minimized between modules cohesion be maximized within modules by david parnas's techniques information hiding by abstract data types number tools methods employing structured concepts were developed such structured design jackson's structured programming ross' structured analysis design technique sadt yourdon's structured method structured systems analysis design method ssadm james martin's information engineering field software metrics often considered direct influence structured programming movement on software engineering 1970s separation concerns soc one basic principles software engineering design principle for separating computer program into distinct sections such that each section addresses separate concern term separation concerns was coined by dijkstra his paper on role scientific thought operating system research 1960s dijkstra his colleagues eindhoven designed implemented standing for 'technische hogeschool eindhoven' operating system which was organised into clearly identified layers his article on this subject provided foundation for subsequent designs operating systems dijkstra organized design system layers order reduce overall complexity software though term 'architecture' had not yet been used describe software design this was certainly considered first glimpse software architecture introduced number design principles which have become part working vocabulary every professional programmer levels abstraction programming layers semaphore cooperating sequential processes his original paper on operating system was reprinted 25th anniversary issue communications acm january by way introduction editor-in-chief says this project initiated long line research multilevel systems architecture — line that continues present day because hierarchical modularity powerful approach organizing large systems concurrent computing programming semaphore dutch seinpaal term used dijkstra's original description early 1960s dijkstra proposed first synchronisation mechanism for concurrent processes semaphore with its two operations p v one-page paper from dijkstra introduced 'mutual exclusion problem' for n processes discussed solution was probably first published concurrent algorithm notion standard by now 'critical section' was also introduced this paper per brinch hansen pioneer field concurrent computing considers dijkstra's cooperating sequential processes be first classic paper concurrent programming brinch hansen notes 'dijkstra lays conceptual foundation for abstract concurrent programming' with that paper simple example two processes modifying linked list at same time causing conflict requirement mutual exclusion was first identified solved by dijkstra his seminal paper titled solution problem concurrent programming control credited first topic study concurrent algorithms dijkstra published his seminal paper 'cooperating sequential processes' 70-page essay that originated field concurrent programming he discussed notion mutual exclusion mutex criteria satisfactory solution should satisfy he also redressed historical perspective left out his paper by including first known correct solution mutual exclusion problem for two processes due theodorus dekker dijkstra subsequently generalized dekker's solution n processes further he proposed first synchronisation mechanism for concurrent processes semaphore with its two operations p v he also identified 'deadlock problem' called there 'the problem deadly embrace' proposed elegant 'banker's algorithm' that prevents deadlock deadlock detection prevention became perennial research problems field concurrent programming illustration dining philosophers problem dining philosophers problem example problem often used concurrent algorithm design illustrate synchronization issues techniques for resolving them was originally formulated by dijkstra student exam exercise presented terms computers competing for access tape drive peripherals soon after tony hoare gave problem its present formulation distributed computing dijkstra was one very early pioneers research on principles distributed computing citation for dijkstra prize recognizes no other individual has had larger influence on research principles distributed computing some his papers are even considered be those that established field dijkstra's paper solution problem concurrent programming control was first present correct solution mutual exclusion problem leslie lamport writes that this work probably why podc exists started field concurrent distributed algorithms particular his paper self-stabilizing systems spite distributed control started sub-field self-stabilization also considered first scientific examination fault-tolerant systems dijkstra's paper was not widely noticed until leslie lamport's invited talk at acm symposium on principles distributed computing podc his report on dijkstra's work on self-stabilizing distributed systems lamport regard be 'a milestone work on fault tolerance' 'a very fertile field for research' formal specification verification from 1970s dijkstra's chief interest was formal verification dijkstra published seminal book discipline programming which put forward his method systematic development programs together with their correctness proofs his exposition he used his 'guarded command language' language with its reliance on non-determinism adopted weakest precondition semantics proposed development method has had considerable impact on field this day refinement calculus originally proposed by ralph-johan back developed by carroll morgan extension dijkstra's weakest precondition calculus where program statements are modeled predicate transformers add further support this approach programming he published jointly with wim feijen introductory textbook for first-year students computer science book first published dutch was entitled een methode van programmeren english edition appeared method programming on nature computer science computer programming many his opinions on computer science programming have become widespread for example programming phrase two more use for rule thumb when use loop sometimes attributed him he was first make claim that programming so inherently complex that order manage successfully programmers need harness every trick abstraction possible dijkstra was one most famous opponents engineering view computing science like peter naur kristen nygaard dijkstra dislikes very term 'computer science' computer science dijkstra pointed out deserves better name he suggests can be called 'computing science' personality working style dijkstra at blackboard during conference at eth zurich world computing science dijkstra well-known character preface his book discipline programming he stated following for absence bibliography i offer neither explanation nor apology fact most his articles books have no references at all this approach references was deplored by some researchers but dijkstra chose this way working preserve his self-reliance university professor for much his life dijkstra saw teaching not just required activity but serious research endeavor his approach teaching was unconventional his lecturing style has been described idiosyncratic when lecturing long pauses between sentences have often been attributed fact that english not dijkstra's first language however pauses also served way for him think on his feet he was regarded quick deep thinker while engaged act lecturing his courses for students austin had little do with computer science but they dealt with presentation mathematical proofs at beginning each semester he would take photo each students order memorize their names he never followed textbook with possible exception his own while was under preparation when lecturing he would write proofs chalk on blackboard rather than using overhead foils he invited students suggest ideas which he then explored refused explore because they violated some his tenets he assigned challenging homework problems would study his students' solutions thoroughly he conducted his final examinations orally over whole week each student was examined dijkstra's office home exam lasted several hours he was also highly original his way assessing people's capacity for job when vladimir lifschitz came austin for job interview dijkstra gave him puzzle vladimir solved has been working austin since then despite having invented much technology software dijkstra eschewed use computers his own work for many decades even after he succumbed his ut colleagues' encouragement acquired macintosh computer he used only for e-mail for browsing world wide web dijkstra never wrote his articles using computer he preferred rely on his typewriter later on his montblanc pen dijkstra's favorite writing instrument was montblanc meisterstück fountain pen he repeatedly tried other pens but none ever displaced montblanc he had no use for word processors believing that one should be able write letter article without rough drafts rewriting any significant editing he would work all out his head before putting pen paper once mentioned that when he was physics student he would solve his homework problems his head while walking streets leiden most dijkstra's publications were written by him alone he never had secretary took care all his correspondence alone when colleagues prepared festschrift for his sixtieth birthday published by springer-verlag he took trouble thank each contributors separately hand-written letter throughout dijkstra's career his work was characterized by elegance economy prolific writer especially essayist dijkstra authored more than papers many written by hand his precise script they were essays parables fairy tales warnings comprehensive explanation pedagogical pretext most were about mathematics computer science others were trip reports that are more revealing about their author than about people places visited was his habit copy each paper circulate small group colleagues who would copy forward papers another limited group scientists his love affair with simplicity came at early age under his mother's guidance he once said he had asked his mother whether trigonometry was difficult topic she replied that he must learn all formulas that furthermore if he required more than five lines prove something he was on wrong track dijkstra was famous for his wit eloquence way with words such his remark question whether machines can think … about relevant question whether submarines can swim his advice promising researcher who asked how select topic for research do only what only you can do dijkstra was also known for his vocal criticism outspoken critical visionary he strongly opposed teaching basic many his more humorous essays dijkstra described fictional company which he served chairman company was called mathematics inc company that he imagined having commercialized production mathematical theorems same way that software companies had commercialized production computer programs he invented number activities challenges mathematics inc documented them several papers ewd series imaginary company had produced proof riemann hypothesis but then had great difficulties collecting royalties from mathematicians who had proved results assuming riemann hypothesis proof itself was trade secret many company's proofs were rushed out door then much company's effort had be spent on maintenance more successful effort was standard proof for pythagoras' theorem that replaced more than incompatible existing proofs dijkstra described mathematics inc most exciting most miserable business ever conceived ewd describes his fictional company having over percent world's market share ewds dijkstra was well known for his habit carefully composing manuscripts with his fountain pen manuscripts are called ewds since dijkstra numbered them with ewd his initials prefix according dijkstra himself ewds started when he moved from mathematical centre amsterdam eindhoven university technology then technische hogeschool eindhoven after going eindhoven dijkstra experienced writer's block for more than year dijkstra distributed photocopies new ewd among his colleagues many recipients photocopied forwarded their copies so ewds spread throughout international computer science community topics were computer science mathematics included trip reports letters speeches these short articles span period years almost all ewds appearing after were hand-written they are rarely longer than pages are consecutively numbered last one no from april within computer science they are known ewd reports simply ewds more than ewds have been scanned with growing number transcribed facilitate search are available online at dijkstra archive university texas personal life dijkstra's self-confidence went together with remarkably modest lifestyle point being spartan his his wife's house nuenen was simple small unassuming he did not own tv vcr mobile telephone did not go movies contrast he played piano well while austin liked go concerts enthusiastic listener classical music dijkstra's favorite composer was mozart influence recognition “ difference between computer programmer computer scientist job-title thing edsgar dijkstra wants proudly be called computer programmer although he hasn't touched computer now for some years his great strength that he uncompromising would make him physically ill think programming c++ ” — donald knuth interview with donald knuth by jack woehr dr dobb's journal association for computing machinery acm acknowledged dijkstra's seminal contributions field by awarding him distinguished turing award citation for award reads edsger dijkstra was principal contributor late 1950's development algol high level programming language which has become model clarity mathematical rigor he one principal exponents science art programming languages general has greatly contributed our understanding their structure representation implementation his fifteen years publications extend from theoretical articles on graph theory basic manuals expository texts philosophical contemplations field programming languages introduction given at awards ceremony tribute dijkstra working vocabulary programmers everywhere studded with words originated forcefully promulgated by ew dijkstra – display deadly embrace semaphore go-to-less programming structured programming but his influence on programming more pervasive than any glossary can possibly indicate precious gift that this turing award acknowledges dijkstra's style his approach programming high intellectual challenge his eloquent insistence practical demonstration that programs should be composed correctly not just debugged into correctness his illuminating perception problems at foundations program design … we have come value good programs much same way we value good literature at center this movement creating reflecting patterns no less beautiful than useful stands ew dijkstra words sir tony hoare frs delivered by him at dijkstra's funeral edsger widely recognized man who has thought deeply about many deep questions among deepest questions that traditional moral philosophy how that person should live their life edsger found his answer this question early his life he decided he would live academic scientist conducting research into new branch science science computing he would lay foundations that would establish computing rigorous scientific discipline his research his teaching his writing he would pursue perfection exclusion all other concerns from these commitments he never deviated that how he has made his chosen subject study greatest contribution that any one person could make any one lifetime march following email was sent distributed computing community this announce that award formerly known podc influential-paper award has been renamed edsger w dijkstra prize distributed computing after late edsger w dijkstra pioneer area distributed computing his foundational work on concurrency primitives such semaphore concurrency problems such mutual exclusion deadlock reasoning about concurrent systems self-stabilization comprises one most important supports upon which field distributed computing built no other individual has had larger influence on research principles distributed computing former acm president peter j denning wrote about dijkstra edsger dijkstra one giants our field passionate believer mathematical view programs programming over previous quarter-century he had formulated many great intellectual challenges field programming—the goto statement structured programming concurrent processes semaphores deadlocks recursive programming algol deriving correct programs awards honors among dijkstra's awards honors are member royal netherlands academy arts sciences distinguished fellow british computer society association for computing machinery's am turing award harry h goode memorial award from ieee computer society foreign honorary member american academy arts sciences doctor science honoris causa from queen's university belfast computer pioneer charter recipient from ieee computer society acm/sigcse award for outstanding contributions computer science education fellow association for computing machinery honorary doctorate from athens university economics & business greece distinguished fellowship british computer society bcs awarded under bylaw bcs's royal charter award was first approved first election was made dijkstra on occasion dijkstra's 60th birthday department computer science utcs at university texas at austin organized two-day seminar his honor speakers came from all over united states europe group computer scientists contributed research articles which were edited into book c&c foundation japan recognized dijkstra for his pioneering contributions establishment scientific basis for computer software through creative research basic software theory algorithm theory structured programming semaphores dijkstra was alive receive notice award but was accepted by his family award ceremony after his death shortly before his death dijkstra received acm podc influential-paper award distributed computing for his work on self-stabilization program computation this annual award was renamed dijkstra prize edsger w dijkstra prize distributed computing following year his honor dijkstra award for outstanding academic achievement computer science loyola university chicago department computer science named for edger w dijkstra beginning this award recognizes top academic performance by graduating computer science major selection based on gpa all major courses election by department faculty department computer science utcs at university texas at austin hosted inaugural edsger w dijkstra memorial lecture on october tony hoare emeritus professor at oxford principal researcher at microsoft research was speaker for event this lecture series was made possible by generous grant from schlumberger honor memory dijkstra see also dijkstra's algorithm dining philosophers problem guarded command language predicate transformer semantics weakest precondition calculus semaphore smoothsort go statement considered harmful on cruelty really teaching computer science list pioneers computer science list important publications computer science list important publications theoretical computer science list important publications concurrent parallel distributed computing selected publications dijkstra edsger w primer algol programming together with report on algorithmic language algol new york academic press dijkstra edsger w dahl ole-johan hoare c r structured programming academic press isbn 0-12-200550-3 cs1 maint multiple names authors list link dijkstra edsger w discipline programming prentice hall dijkstra edsger w selected writings on computing personal perspective monographs computer science springer dijkstra edsger w feijen w h j sterringa joke method programming addison-wesley dijkstra edsger w scholten carel s predicate calculus program semantics texts monographs computer science new york springer-verlag references hoare c r october edsger w dijkstra memorial lecture what can we learn from edsger w dijkstra department computer science university texas at austin retrieved august ryder barbara g soffa mary lou burnett margaret impact software engineering research on modern programming languages acm transactions on software engineering methodology vol no october p 431-477 great influence pascal was structured programming put forth by e w dijkstra this method proceeding design would obliviously be greatly encouraged by use structured language language with set constructs that could freely be combined nested textual structure program should directly reflect its flow control wirth niklaus brief history software engineering ieee annals history computing vol30 no july–september pp 32–39 dijkstra wrote his famous notes on structured programming declared programming discipline contrast craft also hoare published important paper about data structuring these ideas had profound influence on new programming language particular pascal languages are vehicles which these ideas were be expressed structured programming became supported by structured programming language his memoir programmer's story life computer pioneer brinch hansen wrote that he used cooperating sequential processes guide his work implementing multiprogramming on rc described saying one great works computer programming this masterpiece laid conceptual foundation for concurrent programming lamport wrote edsger w dijkstra started field concurrent distributed algorithms with his cacm paper solution problem concurrent programming control which he first stated solved mutual exclusion problem that paper probably why podc exists certainly inspired most my work b c lamport leslie turing lecture computer science concurrency early years communications acm vol no june acm retrieved september while concurrent program execution had been considered for years computer science concurrency began with edsger dijkstra's seminal paper that introduced mutual exclusion problem first scientific examination fault tolerance was dijkstra's seminal paper on self-stabilization ensuing decades have seen huge growth interest concurrency—particularly distributed systems looking back at origins field what stands out fundamental role played by edsger dijkstra whom this history dedicated lo russo graziano interview with stepanov edizioni infomedia srl stlport retrieved august alexander stepanov i also discovered books two great computer scientists from whose work i learned scientific foundation my trade donald knuth edsger dijkstra knuth taught me answers dijkstra taught me questions time time again i come back their works for new insights hoare tony march obituary edsger wybe dijkstra physics today 96–98 doi101063/11570789 b c d e f g h i j k l m n o p q faulkner larry r durbin john r august memoriam edsger wybe dijkstra university texas at austin retrieved august o'regan gerard giants computing compendium select pivotal pioneers london springer verlag pp 91–92 b c d e f g h i j k l m n o apt krzysztof r gries david programming methodology collection articles by members ifip wg23 new york springer verlag p working vocabulary programmers everywhere studded with words originated forcefully promulgated by e w dijkstra—display deadly embracesemaphore go-to-less programming structured programming but his influence on programming more pervasive than any glossary can possibly indicate markoff john august edsger dijkstra physicist who shaped computer era nytimescom retrieved april schofield jack august edsger dijkstra pioneering computer programmer who made his subject intellectually respectable guardian retrieved april knuth donald structured programming with go statements computing surveys 261–301 doi101145/356635356640 revolution taking place way we write programs teach programming because we are beginning understand associated mental processes more deeply impossible read recent book structured programming without having change your life reason for this revolution its future prospects have been aptly described by ew dijkstra his turing award lecture humble programmer broy manfred denert ernst eds software pioneers contributions software engineering p springer nakagawa toru july software engineering triz - structured programming reviewed with triz triz journal retrieved august hashagen ulf keil-slawik reinhard norberg eds history computing software issues international conference on history computing ichc april 5–7 heinz nixdorf museumsforum paderborn germany springer p structured programming topic which links histories software science software engineering software dependability perhaps above all software labour process henderson harry encyclopedia computer science technology revised edition facts on file inc p podc influential paper award acm symposium on principles distributed computing retrieved edsger w dijkstra prize distributed computing symposium on principles distributed computing – podc retrieved edsger w dijkstra prize distributed computing european association for theoretical computer science – eatcs retrieved edsger w dijkstra prize distributed computing international symposium on distributed computing – disc edsger wybe dijkstra stichting digidome september archived from original on december o'connor j j robertson e f july dijkstra biography mactutor history mathematics school mathematics statistics university st andrews scotland archived from original on october retrieved january goodwins rupert august computer science pioneer dijkstra dies retrieved december laplante phillip ed great papers computer science minneapolis-st paul west publishing company chen peter p from goto-less structured programming legacy edsger w dijkstra ieee software laplante phillip great papers computer science retrospective journal scientific practical computing vol no december pp 31–35 podc influential paper award acm symposium on principles distributed computing following description winning paper's contribution written by leslie lamport edsger w dijkstra started field concurrent distributed algorithms with his cacm paper solution problem concurrent programming control which he first stated solved mutual exclusion problem that paper probably why podc exists certainly inspired most my work remains this day most influential paper field hart p e nilsson n j raphael b formal basis for heuristic determination minimum cost paths ieee transactions on systems science cybernetics ssc4 100–107 doi101109/tssc1968300136 frana philip l interview with edsger w dijkstra oh communications acm 41–47 doi101145/17872341787249 what shortest way travel from rotterdam groningen general from given city given city algorithm for shortest path which i designed about twenty minutes one morning i was shopping amsterdam with my young fiancée tired we sat down on café terrace drink cup coffee i was just thinking about whether i could do this i then designed algorithm for shortest path i said was twenty-minute invention fact was published '59 three years late publication still readable fact quite nice one reasons that so nice was that i designed without pencil paper i learned later that one advantages designing without pencil paper that you are almost forced avoid all avoidable complexities eventually that algorithm became my great amazement one cornerstones my fame dijkstra biography jarník v o jistém problému minimálním práce moravské přírodovědecké společnosti czech 57–63 prim r c november shortest connection networks some generalizations bell system technical journal 1389–1401 doi101002/j1538-73051957tb01515x dijkstra e w note on two problems connexion with graphs pdf numerische mathematik 269–271 doi101007/bf01386390 pettie seth ramachandran vijaya optimal minimum spanning tree algorithm journal acm 16–34 doi 101145/505241505243 mr mr 34/61 dolev shlomi self-stabilization mit press p people behind informatics dijkstra-breakthroughs glossary garbage collection university klagenfurt retrieved august hudson richard august go gc prioritizing low latency simplicity go programming language blog retrieved september go building garbage collection gc not only for but for beyond gc that supports today's software development scales along with new software hardware throughout next decade create garbage collector for next decade we turned algorithm from decades ago go's new garbage collector concurrent tri-color mark-sweep collector idea first proposed by dijkstra this deliberate divergence from most enterprise grade garbage collectors today one that we believe well suited properties modern hardware latency requirements modern software van emden maarten may i remember edsger dijkstra 1930–2002 retrieved december hoare car december hints on programming language design pdf p here language so far ahead its time that was not only improvement on its predecessors but also on nearly all its successors stroustrup bjarne programming principles practice using c++ 2nd edition addison-wesley professional p gram christian rasmussen per østergaard søren duus eds history nordic computing 4th ifip wg conference hinc copenhagen denmark august 13–15 revised selected papers springer p daylight e g dijkstra's rallying cry for generalization advent recursive procedure late 1950s – early 1960s computer journal doi101093/comjnl/bxr002 haigh thomas report about nato software engineering conference dealing with software crisis report on conference sponsored by nato science committee garmisch germany 7th 11th october e w dijkstra archive dijkstra edsger w case against go statement ewd-215 ew dijkstra archive center for american history university texas at austin original transcription dijkstra e w march letters editor go statement considered harmful communications acm 147–148 doi101145/362929362947 issn 0001-0782 knuth donald mills harlan d structured programming retrospect prospect ieee software 58-66 november reilly edwin d concise encyclopedia computer science john wiley & sons ltd p nakagawa toru triz journal meyer bertrand touch class learning program well with objects contracts springer p broy manfred denert ernst henderson harry facts on file inc selby richard w software engineering barry w boehm's lifetime contributions software development management research ieee computer society pp 701–702 dijkstra edsger w on role scientific thought selected writings on computing personal perspective new york ny usa springer-verlag pp 60–66 isbn 0-387-90652-5 brown kyle craig gary hester greg enterprise java programming with ibm websphere 2nd edition ibm press p most experienced professionals will agree that developing adhering standard architecture key success large-scale software development computer pioneer edsger dijkstra validated this notion when he developed operating system since then layered architectures have proved their viability technological domains such hardware networking layering has proved itself operating system domain however same benefits are available when applied e-commerce thin client–oriented applications layered architectures have become essential supporting iterative development process by promoting reusability scalability maintainability grier david alan closer than you might think layers upon layers ieee computer society retrieved august we generally trace idea building computer systems layers back paper that dutch computer scientist edsger dijkstra gave joint ieee computer society/acm conference prior this paper engineers had struggled with problem how organize software if you look at early examples programs you can find many electronic library computer society you will find that most code that era complicated difficult read hard modify challenging reuse his paper dijkstra described how software could be constructed layers gave example simple operating system that used five layers he admitted that this system might not be realistic test his ideas but he argued that larger project more essential structuring idea using layers control complexity has become mainstay software architecture we see many forms apply many problems we see hierarchy classes object-oriented programming structure service-oriented architecture albin stephen t wiley publishing inc p dijkstra edsger w over seinpalen ewd-74 ew dijkstra archive center for american history university texas at austin original transcription brinch hansen per origin concurrent programming from semaphores remote procedure calls springer p mccormick john w singhoff frank hugues jérôme building parallel embedded real-time applications with ada cambridge university press p notion concurrent program means for writing parallel programs without regard for underlying hardware was first introduced by edsger dijkstra moti ben-ari elegantly summed up dijkstra's idea three sentences 'concurrent programming name given programming notation techniques for expressing potential parallelism solving resulting synchronization communication problems implementation parallelism topic computer systems hardware software that essentially independent concurrent programming concurrent programming important because provides abstract setting which study parallelism without getting bogged down implementation details' anderson jh kim y-j herman t shared-memory mutual exclusion major research trends since distributed computing 162-3 75-110 alagarsamy k some myths about famous mutual exclusion algorithms acm sigact news 94-103 raynal michel concurrent programming algorithms principles foundations springer p vi since early work ew dijkstra who introduced mutual exclusion problem concept process semaphore object notion weakest precondition guarded commands among many other contributions synchronization no longer catalog tricks but domain computing science with its own concepts mechanisms techniques whose results can be applied many domains this means that process synchronization has be major topic any computer science curriculum james mike may edsger dijkstra - poetry programming i-programmerinfo retrieved august although dijkstra will always be remembered for structured programming for his style approach he also invented many other standard ideas programming if you are struggling with multi-threaded programming you may have encountered semaphore idea deadly embrace these more are result dijkstra's work on concurrent programming he showed how this particularly difficult area programming could be made relatively safe hoare c r communicating sequential processes pdf usingcspcom originally published by prentice hall international external link |publisher= help edsger w dijkstra prize distributed computing acm symposium on principles distributed computing citation for prize reads edsger w dijkstra prize distributed computing named for edsger wybe dijkstra 1930–2002 pioneer area distributed computing his foundational work on concurrency primitives such semaphore concurrency problems such mutual exclusion deadlock reasoning about concurrent systems self-stabilization comprises one most important supports upon which field distributed computing built no other individual has had larger influence on research principles distributed computing edsger w dijkstra prize distributed computing eatcs international symposium on distributed computing podc influential paper award acm symposium on principles distributed computing dolev shlomi self-stabilization mit press p back ralph-johan wright joakim refinement calculus systematic introduction texts computer science springer morgan carroll vickers trevor on refinement calculus springer back ralph-johan wright joakim p v stabler edward p roeper tom speas margaret eds recursion grammar performance studies theoretical psycholinguistics springer international publishing pp 159–177 doi101007/978-3-319-05086-78 isbn 978-3-319-05085-0 dijkstra edsger w on cultural gap ewd-924 ew dijkstra archive center for american history university texas at austin original transcription dijkstra ew on cultural gap mathematical intelligencer 48–52 doi 101007/bf03023921 irfan hyder syed b memoriam edsger wybe dijkstra memorial university texas istrail sorin brown univesirty department computer science alumni magazine vol dijkstra edsger denken als discipline vpro noorderlicht retrieved june dijkstra edsger w how do we tell truths that might hurt ewd-498 ew dijkstra archive center for american history university texas at austin original transcription b dijkstra edsger w ewd-475 ew dijkstra archive center for american history university texas at austin original transcription dijkstra edsger w ewd-539 ew dijkstra archive center for american history university texas at austin original transcription dijkstra edsger w ewd-427 ew dijkstra archive center for american history university texas at austin original transcription dijkstra edsger w ewd-443 ew dijkstra archive center for american history university texas at austin original transcription dijkstra edsger w selected writings on computing personal perspective berlin springer-verlag isbn 978-0-387-90652-2 online ewd archive university texas woehr jack april interview with donald knuth dr dobb's journal retrieved august b edsger w dijkstra - award winner - acm awards extract from turing award citation ready by m doug mcilroy chairman acm turing award committee at presentation his lecture on august at acm annual conference boston dale nell lewis john computer science illuminated 4th edition jones barlett publishers llc p denning peter j field programmers myth communications acm pp 15–20 edsger wybe dijkstra - royal netherlands academy arts sciences retrieved july m turing award association for computing machinery retrieved february edsger w dijkstra harry h goode memorial award recipient ieee computer society retrieved january acm fellows – d association for computing machinery retrieved february roll distinguished fellows british computer society retrieved feijen w van gasteren ajm gries d misra j eds beauty our business birthday salute edsger w dijkstra springer awards loyola university chicago external links wikimedia commons has media related edsger wybe dijkstra wikiquote has quotations related edsger w dijkstra ew dijkstra archive center for american history university texas at austin v t e m turing award laureates alan perlis maurice vincent wilkes richard hamming marvin minsky james h wilkinson john mccarthy edsger w dijkstra charles bachman donald knuth allen newell / herbert simon michael o rabin / dana scott john backus robert w floyd kenneth e iverson tony hoare edgar f codd stephen cook ken thompson / dennis ritchie niklaus wirth richard karp john hopcroft / robert tarjan john cocke ivan sutherland william kahan fernando j corbató robin milner butler lampson juris hartmanis / richard e stearns edward feigenbaum / raj reddy manuel blum amir pnueli douglas engelbart jim gray fred brooks andrew yao ole-johan dahl / kristen nygaard ron rivest / adi shamir / leonard adleman alan kay vint cerf / bob kahn peter naur frances e allen edmund m clarke / e allen emerson / joseph sifakis barbara liskov charles p thacker leslie g valiant judea pearl shafi goldwasser / silvio micali leslie lamport michael stonebraker martin hellman / whitfield diffie v t e software engineering fields computer programming requirements engineering software deployment software design software maintenance software testing systems analysis formal methods concepts data modeling enterprise architecture functional specification modeling language orthogonality programming paradigm software software archaeology software architecture software configuration management software development methodology software development process software quality software quality assurance software verification validation structured analysis orientations agile aspect-oriented object orientation ontology service orientation sdlc models developmental agile eup executable uml incremental model iterative model prototype model rad up scrum spiral model v-model waterfall model xp other spice cmmi data model er model function model information model metamodeling object model systems model view model languages idef uml sysml software engineers victor basili kent beck grady booch fred brooks barry boehm ward cunningham tom demarco edsger w dijkstra martin fowler c r hoare watts humphrey michael jackson ivar jacobson stephen j mellor bertrand meyer david parnas winston w royce james rumbaugh niklaus wirth edward yourdon mohamed fayad related fields computer science computer engineering project management risk management systems engineering category commons authority control worldcat identities viaf lccn n82078425 isni 890x gnd sudoc bpn mgp nla ndl retrieved from https//enwikipediaorg/w/indexphptitle=edsgerwdijkstra&oldid=751483045 categories births deaths theoretical computer scientists computer science writers dutch computer scientists dutch computer programmers dutch mathematicians dutch physicists dutch science writers dutch academics eindhoven university technology faculty fellows association for computing machinery fellows british computer society formal methods people computer programmers leiden university alumni members royal netherlands academy arts sciences people from rotterdam programming language designers programming language researchers researchers distributed computing dutch software engineers software engineering researchers turing award laureates university texas at austin faculty dijkstra prize laureates deaths from cancer netherlands burroughs corporation people dutch expatriates united states deaths from colorectal cancer edsger w dijkstra hidden categories cs1 czech-language sources cs cs1 errors external links interlanguage link template link number all articles with unsourced statements articles with unsourced statements from october articles containing dutch-language text cs1 maint multiple names authors list commons category with local link same on wikidata wikipedia articles with viaf identifiers wikipedia articles with lccn identifiers wikipedia articles with isni identifiers wikipedia articles with gnd identifiers wikipedia articles with bpn identifiers wikipedia articles with nla identifiers use dmy dates from october navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version other projects wikimedia commons wikiquote languages العربية asturianu azərbaycanca বাংলা български bosanski català čeština dansk deutsch eesti ελληνικά español esperanto euskara فارسی français frysk gaeilge galego 한국어 hrvatski bahasa indonesia italiano עברית қазақша latina latviešu lëtzebuergesch magyar malagasy മലയാളം मराठी nederlands 日本語 norsk bokmål polski português română русский simple english slovenčina српски / srpski srpskohrvatski / српскохрватски suomi svenska türkçe українська tiếng việt 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 