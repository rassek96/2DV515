c programming language from wikipedia free encyclopedia jump navigation search c c programming language often referred k&r seminal book on c paradigm imperative procedural structured designed by dennis ritchie developer dennis ritchie & bell labs creators ansi x3j11 ansi c iso/iec jtc1/sc22/wg14 iso c first appeared years ago stable release c11 / december years ago 2011-12 typing discipline static weak manifest nominal os cross-platform filename extensions c h major implementations gcc clang intel c msvc pelles c watcom c dialects cyclone unified parallel c split-c cilk c influenced by b bcpl cpl algol assembly pl/i fortran influenced numerous ampl awk csh c++ c-- c objective-c bitc d go java javascript julia limbo lpc perl php pike processing python rust seed7 vala verilog hdl c programming at wikibooks c /ˈsiː/ letter c general-purpose imperative computer programming language supporting structured programming lexical variable scope recursion while static type system prevents many unintended operations by design c provides constructs that map efficiently typical machine instructions therefore has found lasting use applications that had formerly been coded assembly language including operating systems well various application software for computers ranging from supercomputers embedded systems c was originally developed by dennis ritchie between at bell labs used re-implement unix operating system has since become one most widely used programming languages all time with c compilers from various vendors available for majority existing computer architectures operating systems c has been standardized by american national standards institute ansi since see ansi c subsequently by international organization for standardization iso contents design overview o relations other languages history o early developments o k&r c o ansi c iso c o c99 o c11 o embedded c syntax o character set o reserved words o operators hello world example data types o pointers o arrays o array–pointer interchangeability memory management libraries language tools uses related languages see also notes references sources further reading external links design c imperative procedural language was designed be compiled using relatively straightforward compiler provide low-level access memory provide language constructs that map efficiently machine instructions require minimal run-time support therefore c was useful for many applications that had formerly been coded assembly language for example system programming despite its low-level capabilities language was designed encourage cross-platform programming standards-compliant portably written c program can be compiled for very wide variety computer platforms operating systems with few changes its source code language has become available on very wide range platforms from embedded microcontrollers supercomputers overview like most imperative languages algol tradition c has facilities for structured programming allows lexical variable scope recursion while static type system prevents many unintended operations c all executable code contained within subroutines which are called functions although not strict sense functional programming function parameters are always passed by value pass-by-reference simulated c by explicitly passing pointer values c program source text free-format using semicolon statement terminator curly braces for grouping blocks statements c language also exhibits following characteristics there small fixed number keywords including full set flow control primitives for if/else while switch do/while user-defined names are not distinguished from keywords by any kind sigil there are large number arithmetical logical operators such + += ++ & ~ etc more than one assignment may be performed single statement function return values can be ignored when not needed typing static but weakly enforced all data has type but implicit conversions may be performed declaration syntax mimics usage context c has no define keyword instead statement beginning with name type taken declaration there no function keyword instead function indicated by parentheses argument list user-defined typedef compound types are possible o heterogeneous aggregate data types struct allow related data elements be accessed assigned unit o array indexing secondary notation defined terms pointer arithmetic unlike structs arrays are not first-class objects they cannot be assigned compared using single built-in operators there no array keyword use definition instead square brackets indicate arrays syntactically for example month o enumerated types are possible with enum keyword they are not tagged are freely interconvertible with integers o strings are not separate data type but are conventionally implemented null-terminated arrays characters low-level access computer memory possible by converting machine addresses typed pointers procedures subroutines not returning values are special case function with untyped return type void functions may not be defined within lexical scope other functions function data pointers permit ad hoc run-time polymorphism preprocessor performs macro definition source code file inclusion conditional compilation there basic form modularity files can be compiled separately linked together with control over which functions data objects are visible other files via static extern attributes complex functionality such i/o string manipulation mathematical functions are consistently delegated library routines while c does not include some features found some other languages such object orientation garbage collection such features can be implemented emulated c often by way external libraries eg boehm garbage collector glib object system relations other languages many later languages have borrowed directly indirectly from c including c++ d go rust java javascript limbo lpc c objective-c perl php python verilog hardware description language unix's c shell these languages have drawn many their control structures other basic features from c most them with python being most dramatic exception are also very syntactically similar c general they tend combine recognizable expression statement syntax c with underlying type systems data models semantics that can be radically different history early developments ken thompson left with dennis ritchie right inventor c programming language origin c closely tied development unix operating system originally implemented assembly language on pdp-7 by ritchie thompson incorporating several ideas from colleagues eventually they decided port operating system pdp-11 original pdp-11 version unix was developed assembly language developers were considering rewriting system using b language thompson's simplified version bcpl however b's inability take advantage some pdp-11's features notably byte addressability led c name c was chosen simply next after b development c started on pdp-11 unix system first appeared version unix language was not initially designed with portability mind but soon ran on different platforms well compiler for honeywell was written within first year c's history while ibm system/370 port followed soon also large part unix was rewritten c by with addition struct types c language had become powerful enough that most unix's kernel was now c unix was one first operating system kernels implemented language other than assembly earlier instances include multics system which was written pl/i master control program mcp for burroughs b5000 written algol around ritchie stephen c johnson made further changes language facilitate portability unix operating system johnson's portable c compiler served basis for several implementations c on new platforms k&r c cover book c programming language first edition by brian kernighan dennis ritchie brian kernighan dennis ritchie published first edition c programming language this book known c programmers k&r served for many years informal specification language version c that describes commonly referred k&r c second edition book covers later ansi c standard described below k&r introduced several language features standard i/o library long int data type unsigned int data type compound assignment operators form =op such =- were changed form op= that -= remove semantic ambiguity created by constructs such i=-10 which had been interpreted i =- decrement i by instead possibly intended i = let i be even after publication ansi standard for many years k&r c was still considered lowest common denominator which c programmers restricted themselves when maximum portability was desired since many older compilers were still use because carefully written k&r c code can be legal standard c well early versions c only functions that return types other than int must be declared if used before function definition functions used without prior declaration were presumed return type int for example long somefunction / int / otherfunction / int / callingfunction { long test1 register / int / test2 test1 = somefunction if test1 > test2 = else test2 = otherfunction return test2 } int type specifiers which are commented out could be omitted k&r c but are required later standards since k&r function declarations did not include any information about function arguments function parameter type checks were not performed although some compilers would issue warning message if local function was called with wrong number arguments if multiple calls external function used different numbers types arguments separate tools such unix's lint utility were developed that among other things could check for consistency function use across multiple source files years following publication k&r c several features were added language supported by compilers from at&t particular pcc some other vendors these included void functions ie functions with no return value functions returning struct union types rather than pointers assignment for struct data types enumerated types large number extensions lack agreement on standard library together with language popularity fact that not even unix compilers precisely implemented k&r specification led necessity standardization ansi c iso c main article ansi c cover book c programming language second edition by brian kernighan dennis ritchie covering ansi c during late 1970s 1980s versions c were implemented for wide variety mainframe computers minicomputers microcomputers including ibm pc its popularity began increase significantly american national standards institute ansi formed committee x3j11 establish standard specification c x3j11 based c standard on unix implementation however non-portable portion unix c library was handed off ieee working group become basis for posix standard c standard was ratified ansi x3159-1989 programming language c this version language often referred ansi c standard c sometimes c89 ansi c standard with formatting changes was adopted by international organization for standardization iso iso/iec which sometimes called c90 therefore terms c89 c90 refer same programming language ansi like other national standards bodies no longer develops c standard independently but defers international c standard maintained by working group iso/iec jtc1/sc22/wg14 national adoption update international standard typically occurs within year iso publication one aims c standardization process was produce superset k&r c incorporating many subsequently introduced unofficial features standards committee also included several additional features such function prototypes borrowed from c++ void pointers support for international character sets locales preprocessor enhancements although syntax for parameter declarations was augmented include style used c++ k&r interface continued be permitted for compatibility with existing source code c89 supported by current c compilers most c code being written today based on any program written only standard c without any hardware-dependent assumptions will run correctly on any platform with conforming c implementation within its resource limits without such precautions programs may compile only on certain platform with particular compiler due for example use non-standard libraries such gui libraries reliance on compiler- platform-specific attributes such exact size data types byte endianness cases where code must be compilable by either standard-conforming k&r c-based compilers stdc macro can be used split code into standard k&r sections prevent use on k&r c-based compiler features available only standard c after ansi/iso standardization process c language specification remained relatively static for several years normative amendment c standard iso/iec 9899/amd11995 known informally c95 was published correct some details add more extensive support for international character sets c99 main article c99 c standard was further revised late 1990s leading publication iso/iec which commonly referred c99 has since been amended three times by technical corrigenda c99 introduced several new features including inline functions several new data types including long long int complex type represent complex numbers variable-length arrays flexible array members improved support for ieee floating point support for variadic macros macros variable arity support for one-line comments beginning with // bcpl c++ many these had already been implemented extensions several c compilers c99 for most part backward compatible with c90 but stricter some ways particular declaration that lacks type specifier no longer has int implicitly assumed standard macro stdcversion defined with value 199901l indicate that c99 support available gcc solaris studio other c compilers now support many all new features c99 c compiler microsoft visual c++ however implements c89 standard those parts c99 that are required for compatibility with c++11 c11 main article c11 c standard revision work began on another revision c standard informally called c1x until its official publication on c standards committee adopted guidelines limit adoption new features that had not been tested by existing implementations c11 standard adds numerous new features c library including type generic macros anonymous structures improved unicode support atomic operations multi-threading bounds-checked functions also makes some portions existing c99 library optional improves compatibility with c++ standard macro stdcversion defined 201112l indicate that c11 support available embedded c main article embedded c historically embedded c programming requires nonstandard extensions c language order support exotic features such fixed-point arithmetic multiple distinct memory banks basic i/o operations c standards committee published technical report extending c language address these issues by providing common standard for all implementations adhere includes number features not available normal c such fixed-point arithmetic named address spaces basic i/o hardware addressing syntax main article c syntax c has formal grammar specified by c standard line endings are generally not significant c however line boundaries do have significance during preprocessing phase comments may appear either between delimiters / / since c99 following // until end line comments delimited by / / do not nest these sequences characters are not interpreted comment delimiters if they appear inside string character literals c source files contain declarations function definitions function definitions turn contain declarations statements declarations either define new types using keywords such struct union enum assign types perhaps reserve storage for new variables usually by writing type followed by variable name keywords such char int specify built-in types sections code are enclosed braces { } sometimes called curly brackets limit scope declarations act single statement for control structures imperative language c uses statements specify actions most common statement expression statement consisting expression be evaluated followed by semicolon side effect evaluation functions may be called variables may be assigned new values modify normal sequential execution statements c provides several control-flow statements identified by reserved keywords structured programming supported by if-else conditional execution by do- while while for iterative execution looping for statement has separate initialization testing reinitialization expressions any all which can be omitted break continue can be used leave innermost enclosing loop statement skip its reinitialization there also non-structured goto statement which branches directly designated label within function switch selects case be executed based on value integer expression expressions can use variety built-in operators may contain function calls order which arguments functions operands most operators are evaluated unspecified evaluations may even be interleaved however all side effects including storage variables will occur before next sequence point sequence points include end each expression statement entry return from each function call sequence points also occur during evaluation expressions containing certain operators && || comma operator this permits high degree object code optimization by compiler but requires c programmers take more care obtain reliable results than needed for other programming languages kernighan ritchie say introduction c programming language c like any other language has its blemishes some operators have wrong precedence some parts syntax could be better c standard did not attempt correct many these blemishes because impact such changes on already existing software character set basic c source character set includes following characters lowercase uppercase letters iso basic latin alphabet a–z a–z decimal digits 0–9 graphic characters % & ' + - / { | } ~ whitespace characters space horizontal tab vertical tab form feed newline newline indicates end text line need not correspond actual single character although for convenience c treats one additional multi-byte encoded characters may be used string literals but they are not entirely portable latest c standard c11 allows multi-national unicode characters be embedded portably within c source text by using \uxxxx \uxxxxxxxx encoding where x denotes hexadecimal character although this feature not yet widely implemented basic c execution character set contains same characters along with representations for alert backspace carriage return run-time support for extended character sets has increased with each revision c standard reserved words c89 has reserved words also known keywords which are words that cannot be used for any purposes other than those for which they are predefined auto break case char const continue default do double else enum extern float for goto if int long register return short signed sizeof static struct switch typedef union unsigned void volatile while c99 reserved five more words bool complex imaginary inline restrict c11 reserved seven more words alignas alignof atomic generic noreturn staticassert threadlocal most recently reserved words begin with underscore followed by capital letter because identifiers that form were previously reserved by c standard for use only by implementations since existing program source code should not have been using these identifiers would not be affected when c implementations started supporting these extensions programming language some standard headers do define more convenient synonyms for underscored identifiers language previously included reserved word called entry but this was seldom implemented has now been removed reserved word operators main article operators c c++ c supports rich set operators which are symbols used within expression specify manipulations be performed while evaluating that expression c has operators for arithmetic + - / % assignment = augmented assignment += -= = /= %= &= |= ^= >= bitwise logic ~ & | bitwise shifts > boolean logic && || conditional evaluation equality testing == = calling functions increment decrement ++ -- member selection -> object size sizeof order relations >= reference dereference & sequencing subexpression grouping type conversion typename c uses operator = used mathematics express equality indicate assignment following precedent fortran pl/i but unlike algol its derivatives c uses operator == test for equality similarity between these two operators assignment equality may result accidental use one place other many cases mistake does not produce error message although some compilers produce warnings for example conditional expression ifa==b+1 might mistakenly be written ifa=b+1 which will be evaluated true if not zero after assignment c operator precedence not always intuitive for example operator == binds more tightly than executed prior operators & bitwise | bitwise expressions such x & == which must be written x & == if that coder's intent hello world example hello world example which appeared first edition k&r has become model for introductory program most programming textbooks regardless programming language program prints hello world standard output which usually terminal screen display original version was main { printfhello world\n } standard-conforming hello world program include int mainvoid { printfhello world\n } first line program contains preprocessing directive indicated by include this causes compiler replace that line with entire text stdioh standard header which contains declarations for standard input output functions such printf angle brackets surrounding stdioh indicate that stdioh located using search strategy that prefers headers provided with compiler other headers having same name opposed double quotes which typically include local project-specific header files next line indicates that function named main being defined main function serves special purpose c programs run-time environment calls main function begin program execution type specifier int indicates that value that returned invoker this case run-time environment result evaluating main function integer keyword void parameter list indicates that this function takes no arguments opening curly brace indicates beginning definition main function next line calls diverts execution function named printf which this case supplied from system library this call printf function passed provided with single argument address first character string literal hello world\n string literal unnamed array with elements type char set up automatically by compiler with final 0-valued character mark end array printf needs know this \n escape sequence that c translates newline character which on output signifies end current line return value printf function type int but silently discarded since not used more careful program might test return value determine whether not printf function succeeded semicolon terminates statement closing curly brace indicates end code for main function according c99 specification newer main function unlike any other function will implicitly return value upon reaching } that terminates function this interpreted by run-time system exit code indicating successful execution data types main article c variable types declarations this section needs additional citations for verification please help improve this article by adding citations reliable sources unsourced material may be challenged removed october learn how when remove this template message type system c static weakly typed which makes similar type system algol descendants such pascal there are built-in types for integers various sizes both signed unsigned floating-point numbers enumerated types enum integer type char often used for single-byte characters c99 added boolean datatype there are also derived types including arrays pointers records struct untagged unions union c often used low-level systems programming where escapes from type system may be necessary compiler attempts ensure type correctness most expressions but programmer can override checks various ways either by using type cast explicitly convert value from one type another by using pointers unions reinterpret underlying bits data object some other way some find c's declaration syntax unintuitive particularly for function pointers ritchie's idea was declare identifiers contexts resembling their use declaration reflects use c's usual arithmetic conversions allow for efficient code be generated but can sometimes produce unexpected results for example comparison signed unsigned integers equal width requires conversion signed value unsigned this can generate unexpected results if signed value negative pointers c supports use pointers type reference that records address location object function memory pointers can be dereferenced access data stored at address pointed invoke pointed-to function pointers can be manipulated using assignment pointer arithmetic run-time representation pointer value typically raw memory address perhaps augmented by offset-within-word field but since pointer's type includes type thing pointed expressions including pointers can be type-checked at compile time pointer arithmetic automatically scaled by size pointed-to data type pointers are used for many purposes c text strings are commonly manipulated using pointers into arrays characters dynamic memory allocation performed using pointers many data types such trees are commonly implemented dynamically allocated struct objects linked together using pointers pointers functions are useful for passing functions arguments higher-order functions such qsort bsearch callbacks be invoked by event handlers null pointer value explicitly points no valid location dereferencing null pointer value undefined often resulting segmentation fault null pointer values are useful for indicating special cases such no next pointer final node linked list error indication from functions returning pointers appropriate contexts source code such for assigning pointer variable null pointer constant can be written with without explicit casting pointer type null macro defined by several standard headers conditional contexts null pointer values evaluate false while all other pointer values evaluate true void pointers void point objects unspecified type can therefore be used generic data pointers since size type pointed-to object not known void pointers cannot be dereferenced nor pointer arithmetic on them allowed although they can easily be many contexts implicitly are converted from any other object pointer type careless use pointers potentially dangerous because they are typically unchecked pointer variable can be made point any arbitrary location which can cause undesirable effects although properly used pointers point safe places they can be made point unsafe places by using invalid pointer arithmetic objects they point may continue be used after deallocation dangling pointers they may be used without having been initialized wild pointers they may be directly assigned unsafe value using cast union through another corrupt pointer general c permissive allowing manipulation conversion between pointer types although compilers typically provide options for various levels checking some other programming languages address these problems by using more restrictive reference types arrays see also c string array types c are traditionally fixed static size specified at compile time more recent c99 standard also allows form variable-length arrays however also possible allocate block memory arbitrary size at run-time using standard library's malloc function treat array c's unification arrays pointers means that declared arrays these dynamically allocated simulated arrays are virtually interchangeable since arrays are always accessed effect via pointers array accesses are typically not checked against underlying array size although some compilers may provide bounds checking option array bounds violations are therefore possible rather common carelessly written code can lead various repercussions including illegal memory accesses corruption data buffer overruns run-time exceptions if bounds checking desired must be done manually c does not have special provision for declaring multi-dimensional arrays but rather relies on recursion within type system declare arrays arrays which effectively accomplishes same thing index values resulting multi-dimensional array can be thought increasing row-major order multi-dimensional arrays are commonly used numerical algorithms mainly from applied linear algebra store matrices structure c array well suited this particular task however since arrays are passed merely pointers bounds array must be known fixed values else explicitly passed any subroutine that requires them dynamically sized arrays arrays cannot be accessed using double indexing workaround for this allocate array with additional row vector pointers columns c99 introduced variable-length arrays which address some but not all issues with ordinary c arrays array–pointer interchangeability subscript notation x where x designates pointer syntactic sugar for x+i taking advantage compiler's knowledge pointer type address that x + i points not base address pointed by x incremented by i bytes but rather defined be base address incremented by i multiplied by size element that x points thus x designates i+1th element array furthermore most expression contexts notable exception operand sizeof name array automatically converted pointer array's first element this implies that array never copied whole when named argument function but rather only address its first element passed therefore although function calls c use pass-by-value semantics arrays are effect passed by reference size element can be determined by applying operator sizeof any dereferenced element x n = sizeof x n = sizeof x number elements declared array can be determined sizeof / sizeof latter only applies array names variables declared with subscripts int due semantics c not possible determine entire size arrays through pointers arrays those created by dynamic allocation malloc code such sizeof arr / sizeof arr where arr designates pointer will not work since compiler assumes size pointer itself being requested since array name arguments sizeof are not converted pointers they do not exhibit such ambiguity however arrays created by dynamic allocation are accessed by pointers rather than true array variables so they suffer from same sizeof issues array pointers thus despite this apparent equivalence between array pointer variables there still distinction be made between them even though name array most expression contexts converted into pointer its first element this pointer does not itself occupy any storage array name not l-value its address constant unlike pointer variable consequently what array points cannot be changed impossible assign new address array name array contents may be copied however by using memcpy function by accessing individual elements memory management one most important functions programming language provide facilities for managing memory objects that are stored memory c provides three distinct ways allocate memory for objects static memory allocation space for object provided binary at compile-time these objects have extent lifetime long binary which contains them loaded into memory automatic memory allocation temporary objects can be stored on stack this space automatically freed reusable after block which they are declared exited dynamic memory allocation blocks memory arbitrary size can be requested at run-time using library functions such malloc from region memory called heap these blocks persist until subsequently freed for reuse by calling library function realloc free these three approaches are appropriate different situations have various trade-offs for example static memory allocation has little allocation overhead automatic allocation may involve slightly more overhead dynamic memory allocation can potentially have great deal overhead for both allocation deallocation persistent nature static objects useful for maintaining state information across function calls automatic allocation easy use but stack space typically much more limited transient than either static memory heap space dynamic memory allocation allows convenient allocation objects whose size known only at run-time most c programs make extensive use all three where possible automatic static allocation usually simplest because storage managed by compiler freeing programmer potentially error-prone chore manually allocating releasing storage however many data structures can change size at runtime since static allocations automatic allocations before c99 must have fixed size at compile-time there are many situations which dynamic allocation necessary prior c99 standard variable-sized arrays were common example this see article on malloc for example dynamically allocated arrays unlike automatic allocation which can fail at run time with uncontrolled consequences dynamic allocation functions return indication form null pointer value when required storage cannot be allocated static allocation that too large usually detected by linker loader before program can even begin execution unless otherwise specified static objects contain zero null pointer values upon program startup automatically dynamically allocated objects are initialized only if initial value explicitly specified otherwise they initially have indeterminate values typically whatever bit pattern happens be present storage which might not even represent valid value for that type if program attempts access uninitialized value results are undefined many modern compilers try detect warn about this problem but both false positives false negatives can occur another issue that heap memory allocation has be synchronized with its actual usage any program order for be reused much possible for example if only pointer heap memory allocation goes out scope has its value overwritten before free called then that memory cannot be recovered for later reuse essentially lost program phenomenon known memory leak conversely possible for memory be freed but continue be referenced leading unpredictable results typically symptoms will appear portion program far removed from actual error making difficult track down problem such issues are ameliorated languages with automatic garbage collection libraries c programming language uses libraries its primary method extension c library set functions contained within single archive file each library typically has header file which contains prototypes functions contained within library that may be used by program declarations special data types macro symbols used with these functions order for program use library must include library's header file library must be linked with program which many cases requires compiler flags eg -lm shorthand for link math library most common c library c standard library which specified by iso ansi c standards comes with every c implementation implementations which target limited environments such embedded systems may provide only subset standard library this library supports stream input output memory allocation mathematics character strings time values several separate standard headers for example stdioh specify interfaces for these other standard library facilities another common set c library functions are those used by applications specifically targeted for unix unix-like systems especially functions which provide interface kernel these functions are detailed various standards such posix single unix specification since many programs have been written c there are wide variety other libraries available libraries are often written c because c compilers generate efficient object code programmers then create interfaces library so that routines can be used from higher-level languages like java perl python language tools this section needs additional citations for verification please help improve this article by adding citations reliable sources unsourced material may be challenged removed july learn how when remove this template message number tools have been developed help c programmers find fix statements with undefined behavior possibly erroneous expressions with greater rigor than that provided by compiler tool lint was first such leading many others automated source code checking auditing are beneficial any language for c many such tools exist such lint common practice use lint detect questionable code when program first written once program passes lint then compiled using c compiler also many compilers can optionally warn about syntactically valid constructs that are likely actually be errors misra c proprietary set guidelines avoid such questionable code developed for embedded systems there are also compilers libraries operating system level mechanisms for performing actions that are not standard part c such bounds checking for arrays detection buffer overflow serialization dynamic memory tracking automatic garbage collection tools such purify valgrind linking with libraries containing special versions memory allocation functions can help uncover runtime errors memory usage uses this section needs additional citations for verification please help improve this article by adding citations reliable sources unsourced material may be challenged removed october learn how when remove this template message tiobe index graph from showing comparison popularity various programming languages c widely used for system programming including implementing operating systems embedded system applications because c code when written for portability can be used for most purposes yet when needed system-specific code can be used access specific hardware addresses perform type punning match externally imposed interface requirements with low run-time demand on system resources c can also be used for website programming using cgi gateway for information between web application server browser c often chosen over interpreted languages because its speed stability near-universal availability one consequence c's wide availability efficiency that compilers libraries interpreters other programming languages are often implemented c primary implementations python perl php for example are all written c because layer abstraction thin overhead low c enables programmers create efficient implementations algorithms data structures useful for computationally intense programs for example gnu multiple precision arithmetic library gnu scientific library mathematica matlab are completely partially written c c sometimes used intermediate language by implementations other languages this approach may be used for portability convenience by using c intermediate language additional machine-specific code generators are not necessary c has some features such line-number preprocessor directives optional superfluous commas at end initializer lists that support compilation generated code however some c's shortcomings have prompted development other c-based languages specifically designed for use intermediate languages such c-- c has also been widely used implement end-user applications however such applications can also be written newer higher-level languages related languages this section needs additional citations for verification please help improve this article by adding citations reliable sources unsourced material may be challenged removed february learn how when remove this template message c has directly indirectly influenced many later languages such c d go java javascript limbo lpc perl php python unix's c shell most pervasive influence has been syntactical all languages mentioned combine statement more less recognizably expression syntax c with type systems data models and/or large-scale program structures that differ from those c sometimes radically several c near-c interpreters exist including ch cint which can also be used for scripting when object-oriented languages became popular c++ objective-c were two different extensions c that provided object-oriented capabilities both languages were originally implemented source-to-source compilers source code was translated into c then compiled with c compiler c++ programming language was devised by bjarne stroustrup approach providing object-oriented functionality with c-like syntax c++ adds greater typing strength scoping other tools useful object-oriented programming permits generic programming via templates nearly superset c c++ now supports most c with few exceptions objective-c was originally very thin layer on top c remains strict superset c that permits object-oriented programming using hybrid dynamic/static typing paradigm objective-c derives its syntax from both c smalltalk syntax that involves preprocessing expressions function declarations function calls inherited from c while syntax for object-oriented features was originally taken from smalltalk addition c++ objective-c ch cilk unified parallel c are nearly supersets c see also computer programming portal information technology portal comparison pascal c comparison programming languages international obfuscated c code contest list c-based programming languages list c compilers notes original example code will compile on most modern compilers that are not strict standard compliance mode but does not fully conform requirements either c89 c99 fact c99 requires that diagnostic message be produced main function actually has two arguments int argc char argv respectively which can be used handle command line arguments iso c standard section requires both forms main be supported which special treatment not afforded any other function references b c d e kernighan brian w ritchie dennis m february c programming language 1st ed englewood cliffs nj prentice hall isbn 0-13-110163-3 regarded by many be authoritative reference on c ritchie thompson had made brief attempt produce system coded early version c—before structures—in but gave up effort ritchie scheme type composition adopted by c owes considerable debt algol although did not perhaps emerge form that algol's adherents would approve b verilog hdl c pdf research school computer science at australian national university retrieved 1980s verilog first introduced verilog inspired by c programming language ritchie lawlis patricia k august guidelines for choosing computer language support for visionary organization ada information clearinghouse retrieved july programming language popularity retrieved january tiobe programming community index retrieved may ritchie dennis m march development c language acm sigplan notices 201–208 doi101145/155360155580 ulf bilting & jan skansholm vägen till c swedish meaning road c third edition studentlitteratur year page isbn 91-44-01468-6 b c johnson s c ritchie d m portability c programs unix system bell system tech j 2021–2048 doi 101002/j1538-73051978tb02141x retrieved december note this reference ocr scan original contains ocr glitch rendering ibm ibm mcilroy m d research unix reader annotated excerpts from programmer's manual 1971–1986 pdf technical report cstr bell labs p stallings william operating systems internals design principles 5th ed page pearson education inc b kernighan brian w ritchie dennis m march c programming language 2nd ed englewood cliffs nj prentice hall isbn 0-13-110362-8 stroustrup bjarne sibling rivalry c c++ pdf report at&t labs jtc1/sc22/wg14 – c home page iso/iec retrieved june andrew binstock october interview with herb sutter dr dobbs retrieved september tr embedded c pdf iso / iec retrieved july harbison samuel p steele guy l c reference manual 5th ed englewood cliffs nj prentice hall isbn 0-13-089592-x contains bnf grammar for c kernighan brian w ritchie dennis m c programming language 2nd ed prentice hall p isbn x page original k&r iso/iec 9899201x iso c11 committee draft kernighan brian w ritchie dennis m c programming language 2nd ed prentice hall pp isbn x common programming mistakes c++ csucredu retrieved june schultz thomas c 3rd ed otsego mi pagefree publishing inc p isbn 1-58961-237-x retrieved february page original k&r b c d e f g klemens ben 21st century c o'reilly media isbn 1-4493-2714-1 feuer alan r gehani narain h march comparison programming languages c pascal acm computing surveys 73–92 doi101145/356869356872 subscription required help page k&r2 for example gcc provides fortifysource security features compile time buffer checks fortifysource fedoraprojectorg retrieved raymond eric s october new hacker's dictionary 3rd ed mit press p isbn 978-0-262-68092-9 retrieved august summit steve complangc frequently asked questions retrieved march summit steve complangc frequently asked questions retrieved march man page for lint freebsd section unixcom retrieved mcmillan robert java losing its mojo wired dr dobb's sourcebook usa miller freeman inc november–december using c for cgi programming linuxjournalcom march retrieved january stroustrup bjarne history c++ 1979−1991 pdf retrieved june sources ritchie dennis m development c language second acm sigplan history programming languages conference hopl-ii cambridge ma usa — april 20–23 acm pp 201–208 doi 101145/154766155580 isbn 0-89791-570-4 retrieved further reading banahan m brady d doran m c book 2nd ed addison-wesley king k n april c programming modern approach 2nd ed norton isbn 978-0-393-97950-3 thompson ken new c compiler pdf murray hill new jersey at&t bell laboratories feuer alan r c puzzle book 1st revised printing ed addison-wesley isbn 978-0-201-60461-0 external links find more aboutc programming languageat wikipedia's sister projects media from commons news from wikinews quotations from wikiquote textbooks from wikibooks learning resources from wikiversity iso c working group official website complangc frequently asked questions iso/iec publicly available official c documents including c99 rationale c99 with technical corrigenda tc1 tc2 tc3 included pdf mb history c by dennis richie v t e c programming language ansi c o c89 c90 c99 c11 embedded c misra c features functions header files libraries operators string syntax preprocessor data types standard library functions char ctypeh file i/o stdioh math mathh dynamic memory stdlibh string stringh time timeh variadic stdargh posix standard libraries bionic o libhybris dietlibc eglibc glibc klibc microsoft run-time library musl newlib uclibc bsd libc compilers comparison compilers ack borland turbo c clang gcc icc lcc pelles c pcc sdcc tcc microsoft visual studio / express / c++ watcom c/c++ ides comparison ides anjuta codeblocks codelite eclipse geany microsoft visual studio netbeans comparison with other languages compatibility c c++ comparison with embedded c comparison with pascal comparison programming languages descendant languages c++ c d objective-c alef limbo go vala category v t e integrated development environments c c++ open source android studio anjuta codeblocks codelite dev-c++ eclipse geany gnat programming studio gnome builder kdevelop kuzya monodevelop netbeans qdevelop qt creator sharpdevelop ultimate++ openwatcom freeware pelles c philasmicos entwickler studio oracle developer studio visual studio community xcode retail c++builder eclipse-based o codewarrior o myeclipse visual studio by jetbrains o intellij idea o appcode o clion labwindows/cvi lccwin32 ibm rational software architect understand discontinued ibm visualage java open source bluej drjava eclipse geany greenfoot intellij idea community edition o android studio netbeans servoy community edition freeware jgrasp jdeveloper xcode retail jbuilder jcreator myeclipse ibm o rational application developer o websphere integration developer jetbrains intellij idea servoy business application platform edition understand discontinued metrowerks codewarrior pro for java kalimantan sun java studio creator superseded by netbeans visual age superseded by eclipse visual café aka espresso superseded by jbuilder visual j++ xelfi became netbeans cli monodevelop sharpdevelop visual studio visual studio code pascalabcnet flash adobe flash builder flashdevelop powerflasher fdt php aptana netbeans phpstorm kdevelop python intellij idea light table pycharm pydev wing ide kdevelop pascal delphi ide lazarus italics indicate software no longer development category comparison v t e programming languages comparison timeline history assembly basic c c++ c cobol fortran go haskell java javascript js lisp lua objective-c pascal perl php python ruby shell smalltalk swift visual basic net vbnet more category comparison lists o alphabetical o categorical o generational o non-english-based authority control lccn sh85018532 gnd 4113195-2 bnf cb119665180 data retrieved from https//enwikipediaorg/w/indexphptitle=cprogramminglanguage&oldid=751245618 categories american inventions c programming language c programming language family cross-platform software low-level programming languages procedural programming languages programming languages created programming languages with iso standard statically typed programming languages systems programming languages hidden categories pages containing links subscription-only content pages using isbn magic links all articles with unsourced statements articles with unsourced statements from april articles needing additional references from october all articles needing additional references articles needing additional references from july articles needing additional references from february wikipedia articles with lccn identifiers wikipedia articles with gnd identifiers wikipedia articles with bnf identifiers articles with example code navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version other projects wikimedia commons wikibooks wikiquote wikiversity languages afrikaans alemannisch አማርኛ العربية aragonés অসমীয়া asturianu azərbaycanca تۆرکجه বাংলা bân-lâm-gú беларуская беларуская тарашкевіца‎ български bosanski brezhoneg català чӑвашла čeština corsu cymraeg dansk deutsch eesti ελληνικά español esperanto euskara فارسی français gaeilge galego ગુજરાતી 客家語/hak-kâ-ngî 한국어 հայերեն हिन्दी hrvatski bahasa indonesia interlingua isixhosa íslenska italiano עברית basa jawa ಕನ್ನಡ ქართული қазақша kurdî кыргызча ລາວ latina latviešu lietuvių magyar македонски malagasy മലയാളം मराठी bahasa melayu mìng-dĕ̤ng-ngṳ̄ монгол မြန်မာဘာသာ nederlands नेपाली 日本語 norsk bokmål norsk nynorsk occitan ଓଡ଼ିଆ oʻzbekcha/ўзбекча ਪੰਜਾਬੀ ភាសាខ្មែរ polski português română русский саха тыла scots shqip සිංහල simple english slovenčina slovenščina српски / srpski srpskohrvatski / српскохрватски suomi svenska tagalog தமிழ் taqbaylit татарча/tatarça తెలుగు ไทย türkçe ᨅᨔ ᨕᨘᨁᨗ українська اردو tiếng việt winaray 吴语 ייִדיש 粵語 žemaitėška 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 