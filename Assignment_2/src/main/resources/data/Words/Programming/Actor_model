actor model from wikipedia free encyclopedia jump navigation search this article may require cleanup meet wikipedia's quality standards specific problem unclear what constitutes implementation actor model please help improve this article if you can june learn how when remove this template message actor model computer science mathematical model concurrent computation that treats actors universal primitives concurrent computation response message that receives actor can make local decisions create more actors send more messages determine how respond next message received actors may modify private state but can only affect each other through messages avoiding need for any locks actor model originated has been used both framework for theoretical understanding computation theoretical basis for several practical implementations concurrent systems relationship model other work discussed indeterminacy concurrent computation actor model process calculi contents history fundamental concepts formal systems applications message-passing semantics o unbounded nondeterminism controversy o direct communication asynchrony o actor creation plus addresses messages means variable topology o inherently concurrent o no requirement on order message arrival o locality o composing actor systems o behaviors o modeling other concurrency systems o computational representation theorem o relationship logic programming o migration o security o synthesizing addresses actors o contrast with other models message-passing concurrency influence o theory o practice current issues early actor researchers programming with actors o early actor programming languages o later actor programming languages o actor libraries frameworks see also references further reading external links o videos o articles o procedural libraries history main article history actor model according carl hewitt unlike previous models computation actor model was inspired by physics including general relativity quantum mechanics was also influenced by programming languages lisp simula early versions smalltalk well capability-based systems packet switching its development was motivated by prospect highly parallel computing machines consisting dozens hundreds even thousands independent microprocessors each with its own local memory communications processor communicating via high-performance communications network since that time advent massive concurrency through multi-core manycore computer architectures has revived interest actor model following hewitt bishop steiger's publication irene greif developed operational semantics for actor model part her doctoral research two years later henry baker hewitt published set axiomatic laws for actor systems other major milestones include william clinger's dissertation introducing denotational semantics based on power domains gul agha's dissertation which further developed transition-based semantic model complementary clinger's this resulted full development actor model theory major software implementation work was done by russ atkinson giuseppe attardi henry baker gerry barber peter bishop peter de jong ken kahn henry lieberman carl manning tom reinhardt richard steiger dan theriault message passing semantics group at massachusetts institute technology mit research groups led by chuck seitz at california institute technology caltech bill dally at mit constructed computer architectures that further developed message passing model see actor model implementation research on actor model has been carried out at california institute technology kyoto university tokoro laboratory mcc mit artificial intelligence laboratory sri stanford university university illinois at urbana-champaign pierre marie curie university university paris university pisa university tokyo yonezawa laboratory centrum wiskunde & informatica cwi elsewhere fundamental concepts actor model adopts philosophy that everything actor this similar everything object philosophy used by some object-oriented programming languages actor computational entity that response message receives can concurrently send finite number messages other actors create finite number new actors designate behavior be used for next message receives there no assumed sequence above actions they could be carried out parallel decoupling sender from communications sent was fundamental advance actor model enabling asynchronous communication control structures patterns passing messages recipients messages are identified by address sometimes called mailing address thus actor can only communicate with actors whose addresses has can obtain those from message receives if address for actor has itself created actor model characterized by inherent concurrency computation within among actors dynamic creation actors inclusion actor addresses messages interaction only through direct asynchronous message passing with no restriction on message arrival order formal systems over years several different formal systems have been developed which permit reasoning about systems actor model these include operational semantics laws for actor systems denotational semantics transition semantics there are also formalisms that are not fully faithful actor model that they do not formalize guaranteed delivery messages including following see attempts relate actor semantics algebra linear logic several different actor algebras linear logic applications this article needs additional citations for verification please help improve this article by adding citations reliable sources unsourced material may be challenged removed december learn how when remove this template message actor model can be used framework for modeling understanding reasoning about wide range concurrent systems for example electronic mail e-mail can be modeled actor system accounts are modeled actors email addresses actor addresses web services can be modeled with soap endpoints modeled actor addresses objects with locks eg java c can be modeled serializer provided that their implementations are such that messages can continually arrive perhaps by being stored internal queue serializer important kind actor defined by property that continually available arrival new messages every message sent serializer guaranteed arrive testing test control notation ttcn both ttcn-2 ttcn-3 follows actor model rather closely ttcn actor test component either parallel test component ptc main test component mtc test components can send receive messages from remote partners peer test components test system interface latter being identified by its address each test component has behaviour tree bound test components run parallel can be dynamically created by parent test components built-in language constructs allow definition actions be taken when expected message received from internal message queue like sending message another peer entity creating new test components message-passing semantics actor model about semantics message passing unbounded nondeterminism controversy arguably first concurrent programs were interrupt handlers during course its normal operation computer needed be able receive information from outside characters from keyboard packets from network etc so when information arrived execution computer was interrupted special code called interrupt handler was called put information buffer where could be subsequently retrieved early 1960s interrupts began be used simulate concurrent execution several programs on single processor having concurrency with shared memory gave rise problem concurrency control originally this problem was conceived being one mutual exclusion on single computer edsger dijkstra developed semaphores later between tony hoare per brinch hansen developed monitors solve mutual exclusion problem however neither these solutions provided programming-language construct that encapsulated access shared resources this encapsulation was later accomplished by serializer construct first models computation eg turing machines post productions lambda calculus etc were based on mathematics made use global state represent computational step later generalized see event orderings versus global state each computational step was from one global state computation next global state global state approach was continued automata theory for finite state machines push down stack machines including their nondeterministic versions such nondeterministic automata have property bounded nondeterminism that if machine always halts when started its initial state then there bound on number states which halts edsger dijkstra further developed nondeterministic global state approach dijkstra's model gave rise controversy concerning unbounded nondeterminism also called unbounded indeterminacy property concurrency by which amount delay servicing request can become unbounded result arbitration contention for shared resources while still guaranteeing that request will eventually be serviced hewitt argued that actor model should provide guarantee service dijkstra's model although there could be unbounded amount time between execution sequential instructions on computer parallel program that started out well defined state could terminate only bounded number states consequently his model could not provide guarantee service dijkstra argued that was impossible implement unbounded nondeterminism hewitt argued otherwise there no bound that can be placed on how long takes computational circuit called arbiter settle see metastability electronics arbiters are used computers deal with circumstance that computer clocks operate asynchronously with respect input from outside eg keyboard input disk access network input etc so could take unbounded time for message sent computer be received meantime computer could traverse unbounded number states actor model features unbounded nondeterminism which was captured mathematical model by will clinger using domain theory there no global state actor model direct communication asynchrony messages actor model are not necessarily buffered this was sharp break with previous approaches models concurrent computation lack buffering caused great deal misunderstanding at time development actor model still controversial issue some researchers argued that messages are buffered ether environment also messages actor model are simply sent like packets ip there no requirement for synchronous handshake with recipient actor creation plus addresses messages means variable topology natural development actor model was allow addresses messages influenced by packet switched networks hewitt proposed development new model concurrent computation which communications would not have any required fields at all they could be empty course if sender communication desired recipient have access addresses which recipient did not already have address would have be sent communication for example actor might need send message recipient actor from which later expects receive response but response will actually be handled by third actor component that has been configured receive handle response for example different actor implementing observer pattern original actor could accomplish this by sending communication that includes message wishes send along with address third actor that will handle response this third actor that will handle response called resumption sometimes also called continuation stack frame when recipient actor ready send response sends response message resumption actor address that was included original communication so ability actors create new actors with which they can exchange communications along with ability include addresses other actors messages gives actors ability create participate arbitrarily variable topological relationships with one another much objects simula other object-oriented languages may also be relationally composed into variable topologies message-exchanging objects inherently concurrent opposed previous approach based on composing sequential processes actor model was developed inherently concurrent model actor model sequentiality was special case that derived from concurrent computation explained actor model theory no requirement on order message arrival this section needs additional citations for verification please help improve this article by adding citations reliable sources unsourced material may be challenged removed march learn how when remove this template message hewitt argued against adding requirement that messages must arrive order which they are sent actor if output message ordering desired then can be modeled by queue actor that provides this functionality such queue actor would queue messages that arrived so that they could be retrieved fifo order so if actor x sent message m1 actor y later x sent another message m2 y there no requirement that m1 arrives at y before m2 this respect actor model mirrors packet switching systems which do not guarantee that packets must be received order sent not providing order delivery guarantee allows packet switching buffer packets use multiple paths send packets resend damaged packets provide other optimizations for example actors are allowed pipeline processing messages what this means that course processing message m1 actor can designate behavior be used process next message then fact begin processing another message m2 before has finished processing m1 just because actor allowed pipeline processing messages does not mean that must pipeline processing whether message pipelined engineering tradeoff how would external observer know whether processing message by actor has been pipelined there no ambiguity definition actor created by possibility pipelining course possible perform pipeline optimization incorrectly some implementations which case unexpected behavior may occur locality another important characteristic actor model locality locality means that processing message actor can send messages only addresses that receives message addresses that already had before received message addresses for actors that creates while processing message but see synthesizing addresses actors also locality means that there no simultaneous change multiple locations this way differs from some other models concurrency eg petri net model which tokens are simultaneously removed from multiple locations placed other locations composing actor systems idea composing actor systems into larger ones important aspect modularity that was developed gul agha's doctoral dissertation developed later by gul agha ian mason scott smith carolyn talcott behaviors key innovation was introduction behavior specified mathematical function express what actor does when processes message including specifying new behavior process next message that arrives behaviors provided mechanism mathematically model sharing concurrency behaviors also freed actor model from implementation details eg smalltalk-72 token stream interpreter however critical understand that efficient implementation systems described by actor model require extensive optimization see actor model implementation for details modeling other concurrency systems other concurrency systems eg process calculi can be modeled actor model using two-phase commit protocol computational representation theorem see also denotational semantics actor model there computational representation theorem actor model for systems which are closed sense that they do not receive communications from outside mathematical denotation denoted by closed system s constructed from initial behavior ⊥s behavior-approximating function progressions these obtain increasingly better approximations construct denotation meaning for s follows d e n o t e s ≡ lim i → ∞ p r o g r e s s i o n s i ⊥ s {\displaystyle \mathbf {denote} {\mathtt {s}}\equiv \lim {i\to \infty }\mathbf {progression} {{\mathtt {s}}^{i}}\bot {\mathtt {s}}} this way s can be mathematically characterized terms all its possible behaviors including those involving unbounded nondeterminism although denotes not implementation s can be used prove generalization church-turing-rosser-kleene thesis consequence above theorem that finite actor can nondeterministically respond with uncountable number different outputs relationship logic programming this section needs additional citations for verification please help improve this article by adding citations reliable sources unsourced material may be challenged removed march learn how when remove this template message one key motivations for development actor model was understand deal with control structure issues that arose development planner programming language once actor model was initially defined important challenge was understand power model relative robert kowalski's thesis that computation can be subsumed by deduction hewitt argued that kowalski's thesis turned out be false for concurrent computation actor model see indeterminacy concurrent computation nevertheless attempts were made extend logic programming concurrent computation however hewitt agha claimed that resulting systems were not deductive following sense computational steps concurrent logic programming systems do not follow deductively from previous steps see indeterminacy concurrent computation recently logic programming has been integrated into actor model way that maintains logical semantics migration migration actor model ability actors change locations eg his dissertation aki yonezawa modeled post office that customer actors could enter change locations within while operating exit actor that can migrate can be modeled by having location actor that changes when actor migrates however faithfulness this modeling controversial subject research security security actors can be protected following ways hardwiring which actors are physically connected computer hardware burroughs b5000 lisp machine etc virtual machines java virtual machine common language runtime etc operating systems capability-based systems signing and/or encryption actors their addresses synthesizing addresses actors this section needs additional citations for verification please help improve this article by adding citations reliable sources unsourced material may be challenged removed march learn how when remove this template message delicate point actor model ability synthesize address actor some cases security can be used prevent synthesis addresses see security however if actor address simply bit string then clearly can be synthesized although may be difficult even infeasible guess address actor if bit strings are long enough soap uses url for address endpoint where actor can be reached since url character string can clearly be synthesized although encryption can make virtually impossible guess synthesizing addresses actors usually modeled using mapping idea use actor system perform mapping actual actor addresses for example on computer memory structure computer can be modeled actor system that does mapping case soap addresses it's modeling dns rest url mapping contrast with other models message-passing concurrency robin milner's initial published work on concurrency was also notable that was not based on composing sequential processes his work differed from actor model because was based on fixed number processes fixed topology communicating numbers strings using synchronous communication original communicating sequential processes model published by tony hoare differed from actor model because was based on parallel composition fixed number sequential processes connected fixed topology communicating using synchronous message-passing based on process names see actor model process calculi history later versions csp abandoned communication based on process names favor anonymous communication via channels approach also used milner's work on calculus communicating systems π-calculus these early models by milner hoare both had property bounded nondeterminism modern theoretical csp explicitly provides unbounded nondeterminism petri nets their extensions eg coloured petri nets are like actors that they are based on asynchronous message passing unbounded nondeterminism while they are like early csp that they define fixed topologies elementary processing steps transitions message repositories places influence actor model has been influential on both theory development practical software development theory actor model has influenced development pi-calculus subsequent process calculi his turing lecture robin milner wrote now pure lambda-calculus built with just two kinds thing terms variables can we achieve same economy for process calculus carl hewitt with his actors model responded this challenge long ago he declared that value operator on values process should all be same kind thing actor this goal impressed me because implies homogeneity completeness expression but was long before i could see how attain goal terms algebraic calculus so spirit hewitt our first step demand that all things denoted by terms accessed by names--values registers operators processes objects--are all same kind thing they should all be processes practice actor model has had extensive influence on commercial practice for example twitter has used actors for scalability also microsoft has used actor model development its asynchronous agents library there are numerous other actor libraries listed actor libraries frameworks section below current issues according hewitt actor model addresses issues computer communications architecture concurrent programming languages web services including following scalability challenge scaling up concurrency both locally nonlocally transparency bridging chasm between local nonlocal concurrency transparency currently controversial issue some researchers have advocated strict separation between local concurrency using concurrent programming languages eg java c from nonlocal concurrency using soap for web services strict separation produces lack transparency that causes problems when desirable/necessary change between local nonlocal access web services see distributed computing inconsistency inconsistency norm because all very large knowledge systems about human information system interactions are inconsistent this inconsistency extends documentation specifications very large systems eg microsoft windows software etc which are internally inconsistent many ideas introduced actor model are now also finding application multi-agent systems for these same reasons key difference that agent systems most definitions impose extra constraints upon actors typically requiring that they make use commitments goals actor model also being applied client cloud computing early actor researchers this section needs additional citations for verification please help improve this article by adding citations reliable sources unsourced material may be challenged removed march learn how when remove this template message this article's factual accuracy disputed please help ensure that disputed statements are reliably sourced see relevant discussion on talk page march learn how when remove this template message there growing community researchers working on actor model becoming commercially more important early actor researchers included important contributions semantics actors have been made by gul agha beppe attardi henry baker will clinger irene greif carl hewitt carl manning ian mason ugo montanari maria simi scott smith carolyn talcott prasanna thati akinori yonezawa important contributions implementation actors have been made by bill athas russ atkinson beppe attardi henry baker gerry barber peter bishop nanette boden jean-pierre briot bill dally peter de jong jessie dedecker travis desell ken kahn carl hewitt henry lieberman carl manning tom reinhardt chuck seitz richard steiger dan theriault mario tokoro carlos varela darrell woelk programming with actors number different programming languages employ actor model some variation these languages include early actor programming languages act acttalk ani cantor rosette later actor programming languages abcl ambienttalk axum cal actor language d e elixir erlang fantom humus io lfe encore pony ptolemy project rebeca modeling language reia salsa scala scratch tnsdl actor libraries frameworks actor libraries frameworks have also been implemented permit actor-style programming languages that don't have actors built-in among these frameworks are name status latest release license languages aojet active mit swift actor active mit java vertx active apache java groovy javascript ruby scala actor framework active apache net akka toolkit active apache java scala akkanet active apache net remactnet active mit net javascript ateji px active java f mailboxprocessor active same f built-in core library apache license f korus active gpl java kilim active mit java actorfoundry based on kilim active java actorkit active bsd objective-c cloud haskell active bsd haskell cloudi active bsd c/c++ elixir/erlang/lfe java javascript perl php python ruby nact active lgpl net retlang active new bsd net jactor active lgpl java jetlang active new bsd java haskell-actor active new bsd haskell gpars active apache groovy oosmos active gpl commercial dual licensing c c++ friendly panini active mpl programming language by itself parley active gpl python peernetic active lgpl java postsharp active commercial / freemium net pulsar active new bsd python pulsar active lgpl /eclipse clojure pykka active apache python termite scheme active lgpl scheme gambit implementation theron active mit c++ thespian active godaddy public release python quasar active lgpl /eclipse java libactor active gpl c actor-cpp active gpl c++ s4 active apache java c++ actor framework caf active boost software license bsd 3-clause c++11 celluloid active mit ruby labview actor framework active national instruments sla labview labview messenger library active bsd labview orbit active new bsd java qp frameworks for real-time embedded systems active gpl commercial dual licensing c c++ libprocess active apache c++ sobjectizer active new bsd c++11 orleans active mit license c/net skynet active mit license c/lua reactorsio active bsd license java/scala please note that not all frameworks libraries are listed here see also actor model theory actor model early history actor model process calculi actor model implementation data flow multi-agent system gordon pask scientific community metaphor communicating sequential processes input/output automaton references carl hewitt peter bishop richard steiger universal modular actor formalism for artificial intelligence ijcai b c d william clinger june foundations actor semantics mathematics doctoral dissertation mit b irene greif august semantics communicating parallel processes eecs doctoral dissertation mit b henry baker carl hewitt august laws for communicating parallel processes ifip laws for communicating parallel processes pdf may b c gul agha actors model concurrent computation distributed systems doctoral dissertation mit press home oslcsuiucedu archived from original on retrieved carl hewitt viewing control structures patterns passing messages journal artificial intelligence june b gul agha ian mason scott smith carolyn talcott january foundation for actor computation journal functional programming carl hewitt what commitment physical organizational social pdf coin@aamas mauro gaspari gianluigi zavattaro may algebra actors technical report ublcs-97-4 university bologna m gaspari g zavattaro algebra actors formal methods for open object based systems gul agha prasanna thati algebraic theory actors its application simple object-based language pdf from oo fm dahl festschrift lncs john darlington y k guo formalizing actors linear logic international conference on object-oriented information systems brinch-hansen per origins concurrent programming from semaphores remote procedure calls springer isbn 978-0-387-95401-1 per brinch hansen monitors concurrent pascal personal history comm acm pp 121-172 car hoare monitors operating system structuring concept comm acm vol no october pp 549-557 brinch hansen p operating system principles prentice-hall july b carl hewitt what computation actor model versus turing's model computable universe understanding computation & exploring nature computation dedicated memory alan m turing on 100th anniversary his birth edited by hector zenil world scientific publishing company frederick knabe distributed protocol for channel-based communication with choice parle robin milner processes mathematical model computing agents logic colloquium car hoare communicating sequential processes cacm august elements interaction dlacmorg doi 101145/151233151240 retrieved how twitter scaling « waiming mok's blog waimingmokwordpresscom retrieved actor-based programming with asynchronous agents library msdn september carl hewitt september–october orgs for scalable robust privacy-friendly client cloud computing ieee internet computing henry lieberman june preview act pdf mit ai memo henry lieberman june thinking about lots things at once without getting confused parallelism act pdf mit ai memo jean-pierre briot acttalk framework for object-oriented concurrent programming-design experience 2nd france-japan workshop ken kahn computational theory animation mit eecs doctoral dissertation august william athas nanette boden cantor actor programming system for scientific computing proceedings nsf workshop on object-based concurrent programming special issue sigplan notices darrell woelk developing infosleuth agents using rosette actor based language proceedings cikm '95 workshop on intelligent information agents dedecker j van cutsem t mostinckx s d'hondt t de meuter w ambient-oriented programming ambienttalk “proceedings 20th european conference on object-oriented programming ecoop dave thomas ed lecture notes computer science vol pp 230-254 springer-verlag” darryl k taft microsoft cooking up new parallel programming language eweekcom retrieved humus dalnefrecom retrieved brandauer stephan et al parallel objects for multicores glimpse at parallel language encore formal methods for multicore programming springer international publishing 1–56 pony language carlos varela gul agha programming dynamically reconfigurable open systems with salsa acm sigplan notices oopsla'2001 intriguing technology track proceedings philipp haller martin odersky september event-based programming without inversion control pdf proc jmlc philipp haller martin odersky january actors that unify threads events pdf technical report lamp srinivasan sriram alan mycroft kilim isolation-typed actors for java pdf european conference on object oriented programming ecoop cyprus retrieved commit history · kilim/kilim · github githubcom retrieved commit history · stevedekorte/actorkit · github githubcom retrieved commit history · haskell-distributed/distributed-process · github githubcom retrieved commit history · cloudi/cloudi · github githubcom retrieved changes - retlang - message based concurrency net - google project hosting codegooglecom retrieved jetlang-029-binzip - jetlang - jetlang-029-binzip - message based concurrency for java - google project hosting codegooglecom retrieved gpars releases github retrieved oosmos version history oosmos retrieved pulsar design actors pulsar documentation archived from original on changes — pykka documentation pykkaorg retrieved theron - version released theron-librarycom retrieved theron theron-librarycom retrieved thespian releases godaddycom retrieved quasar github changes - actor-cpp - implementation actor model for c++ - google project hosting codegooglecom retrieved commit history · s4/s4 · apache apacheorg retrieved tags · actor-framework/actor-framework · github githubcom retrieved celluloid | rubygemsorg | your community gem host rubygemsorg retrieved community actor framework lv revision version decibelnicom retrieved orbit release github retrieved qp active object frameworks - browse files at sourceforgenet retrieved orleans releases github retrieved further reading gul agha actors model concurrent computation distributed systems mit press paul baran on distributed communications networks ieee transactions on communications systems march william woods transition network grammars for natural language analysis cacm carl hewitt procedural embedding knowledge planner ijcai gm birtwistle ole-johan dahl b myhrhaug kristen nygaard simula begin auerbach publishers inc carl hewitt et al actor induction meta-evaluation conference record acm symposium on principles programming languages january carl hewitt et al behavioral semantics nonrecursive control structure proceedings colloque sur la programmation april irene greif carl hewitt actor semantics planner-73 conference record acm symposium on principles programming languages january carl hewitt how use what you know ijcai september alan kay adele goldberg smalltalk-72 instruction manual xerox parc memo ssl-76-6 may edsger dijkstra discipline programming prentice hall carl hewitt henry baker actors continuous functionals proceeding ifip working conference on formal description programming concepts august 1–5 carl hewitt russ atkinson synchronization actor systems proceedings 4th acm sigact-sigplan symposium on principles programming languages carl hewitt russ atkinson specification proof techniques for serializers ieee journal on software engineering january ken kahn computational theory animation mit eecs doctoral dissertation august carl hewitt beppe attardi henry lieberman delegation message passing proceedings first international conference on distributed systems huntsville al october nissim francez car hoare daniel lehmann willem-paul de roever semantics nondetermiism concurrency communication journal computer system sciences december george milne robin milner concurrent processes their syntax jacm april daniel theriault primer for act-1 language mit ai memo april daniel theriault issues design implementation act mit ai technical report june henry lieberman object-oriented simulator for apiary conference american association for artificial intelligence washington d c august carl hewitt peter de jong analyzing roles descriptions actions open systems proceedings national conference on artificial intelligence august carl hewitt henry lieberman design issues parallel architecture for artificial intelligence mit ai memo nov car hoare communicating sequential processes prentice hall carl hewitt challenge open systems byte magazine april reprinted foundation artificial intelligence---a sourcebook cambridge university press carl manning traveler actor observatory ecoop also appears lecture notes computer science vol william athas charles seitz multicomputers message-passing concurrent computers ieee computer august william athas nanette boden cantor actor programming system for scientific computing proceedings nsf workshop on object-based concurrent programming special issue sigplan notices jean-pierre briot from objects actors study limited symbiosis smalltalk-80 rapport de recherche 88-58 rxf-litp paris france september william dally wills d universal mechanisms for concurrency parle w horwat chien w dally experience with cst programming implementation pldi carl hewitt towards open information systems semantics proceedings 10th international workshop on distributed artificial intelligence october 23–27 bandera texas akinori yonezawa ed abcl object-oriented concurrent system mit press k kahn vijay saraswat actors special case concurrent constraint logic programming sigplan notices october describes janus carl hewitt open information systems semantics journal artificial intelligence january carl hewitt jeff inman dai betwixt between from intelligent agents open systems science ieee transactions on systems man cybernetics nov/dec carl hewitt gul agha guarded horn clause languages are they deductive logical international conference on fifth generation computer systems ohmsha tokyo also artificial intelligence at mit vol mit press william dally et al message-driven processor multicomputer processing node with efficient mechanisms ieee micro april s miriyala g agha ysami visualizing actor programs using predicate transition nets journal visual programming carl hewitt carl manning negotiation architecture for large-scale crisis management aaai-94 workshop on models conflict management cooperative problem solving seattle wa aug carl hewitt carl manning synthetic infrastructures for multi-agency systems proceedings icmas '96 kyoto japan december 8–13 s frolund coordinating distributed objects actor-based approach for synchronization mit press november w kim thal actor system for efficient scalable concurrent computing phd thesis university illinois at urbana champaign jean-pierre briot acttalk framework for object-oriented concurrent programming-design experience 2nd france-japan workshop n jamali p thati g agha actor based architecture for customizing controlling agent ensembles ieee intelligent systems don box david ehnebuske gopal kakivaya andrew layman noah mendelsohn henrik nielsen satish thatte dave winer simple object access protocol soap w3c note may m astley d sturman g agha customizable middleware for modular distributed software cacm edward lee s neuendorffer m wirthlin actor-oriented design embedded hardware software systems journal circuits systems computers p thati r ziaei g agha theory may testing for actors formal methods for open object-based distributed systems march p thati r ziaei g agha theory may testing for asynchronous calculi with locality no name matching algebraic methodology software technology springer verlag september lncs stephen neuendorffer actor-oriented metaprogramming phd thesis university california berkeley december carl hewitt 2006a repeated demise logic programming why will be reincarnated what went wrong why lessons from ai research applications technical report ss-06-08 aaai press march carl hewitt 2006b what commitment physical organizational social coin@aamas april 2006b carl hewitt 2007a what commitment physical organizational social revised pablo noriega et al editors lnai springer-verlag carl hewitt 2007b large-scale organizational computing requires unstratified paraconsistency reflection coin@aamas'07 d charousset t c schmidt r hiesgen m wählisch native actors scalable software platform for distributed heterogeneous environments agere '13 proceedings workshop on programming based on actors agents decentralized control external links videos hewitt meijer szyperski actor model everything you wanted know but were afraid ask microsoft channel april articles actors on jvm dr dobb's april now dated set speculations by paul mackay can be found at why has actor model not succeeded procedural libraries javact - java library for programming concurrent distributed mobile applications using actor model open implementation principles functional java - java library that includes implementation concurrent actors with code examples standard java java bgga style actorfoundry - java-based library for actor programming familiar java syntax ant build file bunch example make entry barrier very low activejava - prototype java language extension for actor programming akka - actor based library scala java from typesafe inc gpars - concurrency library for groovy java asynchronous agents library - microsoft actor library for visual c++ agents library c++ template library that promotes actor-based programming model in-process message passing for coarse-grained dataflow pipelining tasks libagents - multi-threaded c++11 implementation actor model retrieved from https//enwikipediaorg/w/indexphptitle=actormodel&oldid=749220431 categories actor model computer science concurrent computing hidden categories articles needing cleanup from june all articles needing cleanup cleanup tagged articles with reason field from june wikipedia pages needing cleanup from june articles needing additional references from december all articles needing additional references all accuracy disputes articles with disputed statements from august articles needing additional references from march all wikipedia articles needing clarification wikipedia articles needing clarification from november all articles with unsourced statements articles with unsourced statements from october articles with unsourced statements from march all articles with specifically marked weasel-worded phrases articles with specifically marked weasel-worded phrases from june accuracy disputes from march all articles with dead external links articles with dead external links from october articles with permanently dead external links navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages català čeština deutsch français 日本語 română русский 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 