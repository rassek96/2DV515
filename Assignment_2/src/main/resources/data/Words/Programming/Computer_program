computer program from wikipedia free encyclopedia jump navigation search for tv programme see computer programme c-language hello world source code this first known hello world snippet from seminal book c programming language originates from brian kernighan dennis ritchie computer program collection instructions that performs specific task when executed by computer computer requires programs function typically executes program's instructions central processing unit computer program usually written by computer programmer programming language from program its human-readable form source code compiler can derive machine code—a form consisting instructions that computer can directly execute alternatively computer program may be executed with aid interpreter part computer program that performs well-defined task known algorithm collection computer programs libraries related data are referred software computer programs may be categorized along functional lines such application software system software contents history o early programmable machines o analytical engine o universal turing machine o early programmable computers o later computers computer programming o programming languages + imperative languages + declarative languages o compilation interpretation storage execution o simultaneous execution o self-modifying programs functional categories o application software o utility programs o operating system o boot program o embedded programs o microcode programs see also references further reading history see also history computing history programming languages history software early programmable machines earliest programmable machines preceded invention digital computer joseph-marie jacquard devised loom that would weave pattern by following series perforated cards patterns including flowers leaves could be weaved repeated by arranging cards analytical engine lovelace's diagram from note g first published computer algorithm charles babbage was inspired by jacquard's loom attempt build analytical engine names components calculating device were borrowed from textile industry textile industry yarn was brought from store be milled device would have had store—memory hold numbers decimal digits each numbers from store would then have then been transferred mill analogous cpu modern machine for processing was programmed using two sets perforated cards—one direct operation other for input variables however after more than pounds british government's money thousands cogged wheels gears never fully worked together during nine-month period 1842–43 ada lovelace translated memoir italian mathematician luigi menabrea memoir covered analytical engine translation contained note g which completely detailed method for calculating bernoulli numbers using analytical engine this note recognized by some historians world's first written computer program universal turing machine alan turing introduced universal turing machine—a theoretical device that can model every computation that can be performed on turing complete computing machine finite-state machine that has infinitely long read/write tape machine can move tape back forth changing its contents performs algorithm machine starts initial state goes through sequence steps halts when encounters halt state this machine considered by some be origin stored-program computer—used by john von neumann for electronic computing instrument that now bears von neumann architecture name early programmable computers z3 computer invented by konrad zuse germany was digital programmable computer digital computer uses electricity calculating component z3 contained relays create circuits circuits provided binary floating-point nine-instruction computer programming z3 was through specially designed keyboard punched tape electronic numerical integrator computer fall was turing complete general-purpose computer that used vacuum tubes create circuits at its core was series pascalines wired together its units weighed tons occupied square feet consumed $650 per hour 1940s currency electricity when idle had base-10 accumulators programming eniac took up two months three function tables were on wheels needed be rolled fixed function panels function tables were connected function panels using heavy black cables each function table had rotating knobs programming eniac also involved setting some switches debugging program took week eniac featured parallel operations different sets accumulators could simultaneously work on different algorithms used punched card machines for input output was controlled with clock signal ran for eight years calculating hydrogen bomb parameters predicting weather patterns producing firing tables aim artillery guns manchester small-scale experimental machine june was stored-program computer programming transitioned away from moving cables setting dials instead computer program was stored memory numbers only three bits memory were available store each instruction so was limited eight instructions switches were available for programming later computers switches for manual input on data general nova manufactured mid 1970s computers manufactured until 1970s had front-panel switches for programming computer program was written on paper for reference instruction was represented by configuration on/off settings after setting configuration execute button was pressed this process was then repeated computer programs also were manually input via paper tape punched cards after medium was loaded starting address was set via switches execute button pressed burroughs b5000 was built specifically be programmed algol language hardware featured circuits ease compile phase ibm system/360 was line six computers each having same instruction set architecture model was smallest least expensive customers could upgrade retain same application software each system/360 model featured multiprogramming with operating system support multiple programs could be memory at once when one was waiting for input/output another could compute each model also could emulate other computers customers could upgrade system/360 retain their ibm ibm application software computer programming main article computer programming computer programming process writing editing source code editing source code involves testing analyzing refining sometimes coordinating with other programmers on jointly developed program person who practices this skill referred computer programmer software developer sometimes coder sometimes lengthy process computer programming usually referred software development term software engineering becoming popular process seen engineering discipline programming languages main article programming language computer program written imperative programming style computer programs can be categorized by programming language paradigm used produce them two main paradigms are imperative declarative imperative languages imperative programming languages specify sequential algorithm using declarations expressions statements declaration couples variable name datatype – for example var x integer expression yields value – for example + yields statement might assign expression variable use value variable alter program's control flow – for example x = + if x = then dosomething one criticism imperative languages side effect assignment statement on class variables called non-local variables declarative languages declarative programming languages describe what computation should be performed not how compute declarative programs omit control flow are considered sets instructions two broad categories declarative languages are functional languages logical languages principle behind functional languages like haskell not allow side effects which makes easier reason about programs like mathematical functions principle behind logical languages like prolog define problem be solved – goal – leave detailed solution prolog system itself goal defined by providing list subgoals then each subgoal defined by further providing list its subgoals etc if path subgoals fails find solution then that subgoal backtracked another path systematically attempted compilation interpretation computer program form human-readable computer programming language called source code source code may be converted into executable image by compiler executed immediately with aid interpreter compilers are used translate source code from programming language into either object code machine code object code needs further processing become machine code machine code consists central processing unit's native instructions ready for execution compiled computer programs are commonly referred executables binary images simply binaries – reference binary file format used store executable code interpreters are used execute source code from programming language immediately without intermediate file interpreter decodes each statement performs its behavior one advantage interpreters that they have ability generate interactive session programmer presented with prompt individual lines code are typed performed immediately main disadvantage interpreters computer programs run slower than when compiled interpreting code slower because interpreter must decode each statement then perform however software development may be faster using interpreter because testing immediate when compiling step omitted another disadvantage interpreters interpreter must be present on executing computer by contrast compiled computer programs need no compiler present during execution just time compilers pre-compile computer programs ahead time interpret them later for example java computer programs are pre-compiled into file containing bytecode bytecode then executed by interpreter called virtual machine either compiled interpreted programs might be executed batch process without human interaction batch programming languages are called scripting languages one common scripting language unix shell its executing environment called command-line interface no properties programming language require be exclusively compiled exclusively interpreted categorization usually reflects most popular method language execution for example basic thought interpreted language c compiled language despite existence basic compilers c interpreters storage execution 1950s computer programs were stored on perforated paper tape typically computer programs are stored non-volatile memory until requested either directly indirectly be executed by computer user upon such request program loaded into random-access memory by computer program called operating system where can be accessed directly by central processor central processor then executes runs program instruction by instruction until termination program execution called process termination either by normal self-termination by error – software hardware error simultaneous execution see also process computing multiprocessing many operating systems support multitasking which enables many computer programs appear run simultaneously on one computer operating systems may run multiple programs through process scheduling – software mechanism switch cpu among processes often so users can interact with each program while runs within hardware modern day multiprocessor computers computers with multicore processors may run multiple programs multiple lines same computer program may be simultaneously executed using threads multithreading processors are optimized execute multiple threads efficiently self-modifying programs main article self-modifying code computer program execution normally treated being different from data program operates on however some cases this distinction blurred when computer program modifies itself modified computer program subsequently executed part same program self-modifying code possible for programs written machine code assembly language lisp c cobol pl/1 prolog functional categories computer programs may be categorized along functional lines main functional categories are application software system software system software includes operating system which couples computer hardware with application software purpose operating system provide environment which application software executes convenient efficient manner addition operating system system software includes embedded programs boot programs micro programs application software designed for end users have user interface application software not designed for end user includes middleware which couples one application with another application software also includes utility programs distinction between system software application software under debate application software main article application software example app gcalctool software calculator there are many types application software word app came being 21st century clipping word application they have been designed for many platforms but word was first used for smaller mobile apps desktop apps are traditional computer programs that run on desktop computers mobile apps run on mobile devices web apps run inside web browser both mobile desktop apps may be downloaded from developers' website purchased from app stores such windows store apple app store mac app store google play intel appup application suite consists multiple applications bundled together examples include microsoft office libreoffice iwork they bundle word processor spreadsheet other applications enterprise applications bundle accounting personnel customer vendor applications examples include enterprise resource planning customer relationship management supply chain management software enterprise infrastructure software supports enterprise's software systems examples include databases email servers network servers information worker software are designed for workers at departmental level examples include time management resource management analytical collaborative documentation tools word processors spreadsheets email blog clients personal information system individual media editors may aid multiple information worker tasks media development software generates print electronic media for others consume most often commercial educational setting these produce graphics publications animations videos product engineering software used help develop large machines other application software examples includes computer-aided design cad computer-aided engineering cae integrated development environments entertainment software can refer video games movie recorders players music recorders players utility programs utility programs are application programs designed aid system administrators computer programmers operating system see also operating system operating system computer program that acts intermediary between user computer computer hardware 1950s programmer who was also operator would write program run after program finished executing output may have been printed may have been punched onto paper tape cards for later processing more often than not program did not work programmer then looked at console lights fiddled with console switches if less fortunate memory printout was made for further study 1960s programmers reduced amount wasted time by automating operator's job program called operating system was kept computer at all times originally operating systems were programmed assembly however modern operating systems are typically written c boot program stored-program computer requires initial computer program stored its read-only memory boot boot process identify initialize all aspects system from processor registers device controllers memory contents following initialization process this initial computer program loads operating system sets program counter begin normal operations embedded programs microcontroller on right this usb flash drive controlled with embedded firmware independent host computer hardware device might have embedded firmware control its operation firmware used when computer program rarely never expected change when program must not be lost when power off microcode programs main article microcode microcode programs control some central processing units some other hardware this code moves data between registers buses arithmetic logic units other functional units cpu unlike conventional programs microcode not usually written by even visible end users systems usually provided by manufacturer considered internal device see also automatic programming killer application software bug references rochkind marc j advanced unix programming second edition addison-wesley p silberschatz abraham operating system concepts fourth edition addison-wesley p isbn 0-201-50480-4 b c mccartney scott eniac – triumphs tragedies world's first computer walker company p isbn 0-8027-1348-3 bromley allan g charles babbage's analytical engine pdf ieee annals history computing tanenbaum andrew s structured computer organization third edition prentice hall p isbn 0-13-854662-2 j fuegi j francis october–december lovelace & babbage creation 'notes' annals history computing doi101109/mahc20031253887 rosen kenneth h discrete mathematics its applications mcgraw-hill inc p isbn 0-07-053744-5 linz peter introduction formal languages automata d c heath company p isbn 0-669-17342-8 davis martin engines logic mathematicians origin computer 1st ed new york ny w w norton & company isbn 0-393-32229-7 pb history computing b c d mccartney scott eniac – triumphs tragedies world's first computer walker company p isbn 0-8027-1348-3 enticknap nicholas summer computing's golden jubilee resurrection computer conservation society issn 0958-7403 retrieved april b c silberschatz abraham operating system concepts fourth edition addison-wesley p isbn 0-201-50480-4 tanenbaum andrew s structured computer organization third edition prentice hall p isbn 0-13-854662-2 b tanenbaum andrew s structured computer organization third edition prentice hall p isbn 0-13-854662-2 wilson leslie b comparative programming languages second edition addison-wesley p isbn 0-201-56885-3 b wilson leslie b comparative programming languages second edition addison-wesley p isbn 0-201-56885-3 wilson leslie b comparative programming languages second edition addison-wesley p isbn 0-201-56885-3 what compiler retrieved silberschatz abraham operating system concepts fourth edition addison-wesley p isbn 0-201-50480-4 silberschatz abraham operating system concepts fourth edition addison-wesley p isbn 0-201-50480-4 akhter shameem multi-core programming richard bowles intel press pp 11–13 isbn 0-9764832-4-6 b c silberschatz abraham operating system concepts fourth edition addison-wesley p isbn 0-201-50480-4 b c d e tanenbaum andrew s structured computer organization third edition prentice hall p isbn 0-13-854662-2 silberschatz abraham operating system concepts fourth edition addison-wesley p isbn 0-201-50480-4 further reading knuth donald e art computer programming volume 3rd edition boston addison-wesley isbn 0-201-89683-4 knuth donald e art computer programming volume 3rd edition boston addison-wesley isbn 0-201-89684-2 knuth donald e art computer programming volume 3rd edition boston addison-wesley isbn 0-201-89685-0 authority control lccn sh85029524 gnd 4047394-6 bne xx526558 retrieved from https//enwikipediaorg/w/indexphptitle=computerprogram&oldid=749868187 categories computer programming software hidden categories wikipedia articles with lccn identifiers wikipedia articles with gnd identifiers articles with example java code articles with example c code articles with example c sharp code navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version other projects wikimedia commons languages afrikaans العربية অসমীয়া asturianu azərbaycanca বাংলা bân-lâm-gú беларуская беларуская тарашкевіца‎ български bosanski brezhoneg català čeština deutsch eesti ελληνικά español esperanto فارسی français frysk gaeilge gàidhlig galego 한국어 հայերեն हिन्दी hrvatski ido bahasa indonesia íslenska italiano עברית ქართული қазақша кыргызча ລາວ latina latviešu lëtzebuergesch magyar македонски malagasy മലയാളം მარგალური bahasa melayu mìng-dĕ̤ng-ngṳ̄ mirandés монгол မြန်မာဘာသာ nederlands नेपाली 日本語 norsk bokmål олык марий oʻzbekcha/ўзбекча پنجابی polski português română runa simi русиньскый русский scots shqip simple english slovenčina slovenščina српски / srpski srpskohrvatski / српскохрватски suomi svenska tagalog தமிழ் taqbaylit తెలుగు ไทย тоҷикӣ türkçe ᨅᨔ ᨕᨘᨁᨗ українська اردو tiếng việt võro walon wolof ייִדיש 粵語 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 