high-level programming language from wikipedia free encyclopedia jump navigation search computer science high-level programming language programming language with strong abstraction from details computer comparison low-level programming languages may use natural language elements be easier use may automate even hide entirely significant areas computing systems eg memory management making process developing program simpler more understandable relative lower-level language amount abstraction provided defines how high-level programming language 1960s high-level programming languages using compiler were commonly called autocodes examples autocodes are cobol fortran first high-level programming language designed for computers was plankalkül created by konrad zuse however was not implemented his time his original contributions were due world war ii largely isolated from other developments although influenced heinz rutishauser 's language superplan some degree also algol first really widespread high-level language was fortran machine independent development ibm's earlier autocode systems algol defined by committees european american computer scientists introduced recursion well nested functions under lexical scope was also first language with clear distinction between value name-parameters their corresponding semantics algol also introduced several structured programming concepts such while-do if-then-else constructs its syntax was first be described by formal method backus–naur form bnf during roughly same period cobol introduced records also called structs lisp introduced fully general lambda abstraction programming language for first time contents features abstraction penalty relative meaning execution modes o high-level language computer architecture see also references external links features high-level language refers higher level abstraction from machine language rather than dealing with registers memory addresses call stacks high-level languages deal with variables arrays objects complex arithmetic boolean expressions subroutines functions loops threads locks other abstract computer science concepts with focus on usability over optimal program efficiency unlike low-level assembly languages high-level languages have few if any language elements that translate directly into machine's native opcodes other features such string handling routines object-oriented language features file input/output may also be present abstraction penalty high-level languages intend provide features which standardize common tasks permit rich debugging maintain architectural agnosticism while low-level languages often produce more efficient code through optimization for specific system architecture abstraction penalty border that prevents high-level programming techniques from being applied situations where computational limitations standards conformance physical constraints require access low-level architectural resources fi response times hardware integration high-level programming exhibits features like more generic data structures/operations run-time interpretation intermediate code files which often result execution far more operations than necessary higher memory consumption larger binary program size for this reason code which needs run particularly quickly efficiently may require use lower-level language even if higher-level language would make coding easier many cases critical portions program mostly high-level language can be hand-coded assembly language leading much faster more efficient simply reliably functioning optimised program however with growing complexity modern microprocessor architectures well-designed compilers for high-level languages frequently produce code comparable efficiency what most low-level programmers can produce by hand higher abstraction may allow for more powerful techniques providing better overall results than their low-level counterparts particular settings high-level languages are designed independent specific computing system architecture this facilitates executing program written such language on any computing system with compatible support for interpreted program high-level languages can improved their designers develop improvements other cases new high-level languages evolve from one more others with goal aggregating most popular constructs with new improved features example this scalable language which maintains backward compatibility with which means that programs libraries written java will continue be usable even if programming shop switches scala this makes transition easier lifespan such high-level coding indefinite contrast low-level programs rarely survive system architecture which they were written for without major revision this engineering 'trade-off' for 'abstraction penalty' relative meaning examples high-level programming languages active use today may include python visual basic delphi perl php ecmascript ruby many others terms high-level low-level are inherently relative some decades ago c language similar languages were most often considered high-level supported concepts such expression evaluation parameterised recursive functions data types structures while assembly language was considered low-level today many programmers might refer c low-level lacks large runtime-system no garbage collection etc basically supports only scalar operations provides direct memory addressing therefore readily blends with assembly language machine level cpus microcontrollers assembly language may itself be regarded higher level but often still one-to-one if used without macros representation machine code supports concepts such constants limited expressions sometimes even variables procedures data structures machine code its turn inherently at slightly higher level than microcode micro-operations used internally many processors execution modes there are three general modes execution for modern high-level languages interpreted when code written language interpreted its syntax read then executed directly with no compilation stage program called interpreter reads each program statement following program flow then decides what do does hybrid interpreter compiler will compile statement into machine code execute that machine code then discarded be interpreted anew if line executed again interpreters are commonly simplest implementations behavior language compared other two variants listed here compiled when code written language compiled its syntax transformed into executable form before running there are two types compilation machine code generation some compilers compile source code directly into machine code this original mode compilation languages that are directly completely transformed machine-native code this way may be called truly compiled languages see assembly language intermediate representations when code written language compiled intermediate representation that representation can be optimized saved for later execution without need re-read source file when intermediate representation saved may be form such byte code intermediate representation must then be interpreted further compiled execute virtual machines that execute byte code directly transform further into machine code have blurred once clear distinction between intermediate representations truly compiled languages source-to-source translated trans-compiled code written language may be translated into terms lower-level programming language for which native code compilers are already widely available javascript c programming language are common targets for such translators see coffeescript chicken scheme eiffel examples specifically generated c c++ code can be seen generated from eiffel programming language when using eiffelstudio ide eifgens directory any compiled eiffel project eiffel translated process referred trans-compiling trans-compiled eiffel compiler transcompiler note that languages are not strictly interpreted languages compiled languages rather implementations language behavior use interpretation compilation for example algol fortran have both been interpreted even though they were more typically compiled similarly java shows difficulty trying apply these labels languages rather than implementations java compiled bytecode bytecode subsequently executed by either interpretation jvm compilation typically with just-in-time compiler such hotspot again jvm moreover compilation trans-compiling interpretation are not strictly limited just description compiler artifact binary executable il assembly high-level language computer architecture alternatively possible for high-level language be directly implemented by computer – computer directly executes hll code this known high-level language computer architecture – computer architecture itself designed be targeted by specific high-level language see also computer programming portal abstraction computer science generational list programming languages low-level programming languages high-level assembler very high-level programming languages categorical list programming languages references hthreads - rd glossary london keith programming introduction computers russell square london wc1 faber faber limited p isbn 'high' level programming languages are often called autocodes processor program compiler london keith programming introduction computers russell square london wc1 faber faber limited p isbn two high level programming languages which can be used here examples illustrate structure purpose autocodes are cobol common business oriented language fortran formular translation giloi wolfgang k konrad zuse's plankalkül first high-level non von neumann programming language ieee annals history computing vol no pp 17–24 april–june abstract although lacked notion reference-parameters which could be problem some situations several successors including algolw algol68 simula pascal modula ada therefore included reference-parameters related c-language family instead allowed addresses value-parameters surana p meta-compilation language abstractions pdf retrieved kuketayev data abstraction penalty dap benchmark for small objects java retrieved chatzigeorgiou stephanides evaluating performance power object-oriented vs procedural programming languages blieberger strohmeier proceedings - 7th international conference on reliable software technologies - ada-europe'2002 springer p manuel carro josé f morales henk l muller g puebla m hermenegildo proceedings international conference on compilers architecture synthesis for embedded systems pdf acm |contribution= ignored help external links - wikiwikiweb's article on high-level programming languages v t e types programming languages actor-based array aspect-oriented class-based concatenative concurrent data-structured dataflow declarative domain-specific dynamic esoteric event-driven extensible functional imperative logic macro metaprogramming+multi-paradigm object-based object-oriented pipeline procedural prototype-based reflective rule-based scripting synchronous templating assembly compiled interpreted machine low-level high-level very high-level first generation second generation third generation fourth generation fifth generation non-english-based visual authority control gnd 4160367-9 retrieved from https//enwikipediaorg/w/indexphptitle=high-levelprogramminglanguage&oldid=748858739 categories programming language classification hidden categories cs1 errors chapter ignored articles with specifically marked weasel-worded phrases from september wikipedia articles with gnd identifiers navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages العربية বাংলা català čeština deutsch ελληνικά español esperanto فارسی français gaeilge galego 한국어 हिन्दी hrvatski bahasa indonesia íslenska italiano עברית latviešu magyar македонски bahasa melayu монгол 日本語 norsk bokmål олык марий ਪੰਜਾਬੀ polski português русский scots slovenščina српски / srpski srpskohrvatski / српскохрватски svenska ไทย українська 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 