go programming language from wikipedia free encyclopedia jump navigation search for agent-based language released see go programming language google go redirects here for computer program by google play board game go see alphago go go's mascot gopher designed by renée french paradigm compiled concurrent imperative structured designed by robert griesemer rob pike ken thompson developer google inc first appeared november years ago stable release / october days ago typing discipline strong static inferred structural implementation language go assembly language previously c gc c++ gccgo os linux os x freebsd netbsd openbsd windows plan dragonfly bsd solaris license bsd-style + patent grant filename extensions go website golangorg major implementations gc gccgo influenced by alef apl bcpl c csp limbo modula newsqueak oberon occam pascal python smalltalk influenced crystal go often referred golang free open source programming language created at google by robert griesemer rob pike ken thompson compiled statically typed language tradition algol c with garbage collection limited structural typing memory safety features csp-style concurrent programming features added language was announced november used some google's production systems well by other firms two major implementations exist google's go compiler gc developed open source software targets various platforms including linux os x windows various bsd unix versions since also mobile devices including smartphones second compiler gccgo gcc frontend gc toolchain self-hosting since version contents history language design o criticism o syntax o types + interface system o package system o concurrency goroutines channels + suitability for parallel programming + lack race condition safety o omissions conventions code style language tools examples o hello world o concurrency example projects using go reception naming dispute see also notes references external links o community conferences history go originated experiment by google engineers robert griesemer rob pike ken thompson design new programming language that would resolve common criticisms other languages while maintaining their positive characteristics new language was be statically typed scalable large systems java c++ be productive readable without too many mandatory keywords repetition light on page like dynamic languages not require tooling but support well support networking multiprocessing later interviews all three language designers cited their shared dislike c++'s complexity primary motivation for designing new language go was released march go added one tiny language change one port macos sierra plus some experimental ports eg for linux on z systems linux/s390x some library changes apply eg unicode now supported language design go recognizably tradition c but makes many changes improve conciseness simplicity safety following brief overview features which define go syntax environment adopting patterns more common dynamic languages o optional concise variable declaration initialization through type inference x = not var x int = o fast compilation times o remote package management go get online package documentation distinctive approaches particular problems o built-in concurrency primitives light-weight processes goroutines channels select statement o interface system place virtual inheritance type embedding instead non-virtual inheritance o toolchain that by default produces statically linked native binaries without external dependencies desire keep language specification simple enough hold programmer's head part by omitting features common similar languages criticism go critics assert that lack compile-time generics leads code duplication metaprogramming cannot be statically checked standard library cannot offer generic algorithms lack language extensibility through for instance operator overloading makes certain tasks more verbose type system's lack hindley-milner typing inhibiting safety and/or expressiveness pauses overhead garbage collection gc limit go's use systems programming compared languages with manual memory management language designers argue that these trade-offs are important go's success explain some particular decisions at length though they do express openness adding some form generic programming future pragmatic improvements areas like standardizing ways apply code generation regarding gc go defenders point pause-time reduction later versions eg go while acknowledging their gc algorithm not hard real-time syntax go's syntax includes changes from c aimed at keeping code concise readable combined declaration/initialization operator was introduced that allows programmer write i = s = some words without specifying types variables this contrasts with c's int i = const char s = some words semicolons still terminate statements but are implicit when they would occur at end line functions may return multiple values returning result err pair conventional way function indicates error its caller go go adds literal syntaxes for initializing struct parameters by name for initializing maps slices alternative c's three-statement for loop go's range expressions allow concise iteration over arrays slices strings maps channels types go has number built-in types including numeric ones byte int64 float32 etc booleans character strings string strings are immutable built-in operators keywords rather than functions provide concatenation comparison utf-8 encoding decoding record types can be defined with struct keyword for each type t each non-negative integer constant n there array type denoted t arrays differing lengths are thus different types dynamic arrays are available slices denoted t for some type t these have length capacity specifying when new memory needs be allocated expand array several slices may share their underlying memory pointers are available for all types pointer-to-t type denoted t address-taking indirection use & operators c happen implicitly through method call attribute access syntax there no pointer arithmetic except via special unsafepointer type standard library for pair types k v type mapv type hash tables mapping type-k keys type-v values hash tables are built into language with special syntax built-in functions chan t channel that allows sending values type t between concurrent go processes aside from its support for interfaces go's type system nominal type keyword can be used define new named type which distinct from other named types that have same layout case struct same members same order some conversions between types eg between various integer types are pre-defined adding new type may define additional conversions but conversions between named types must always be invoked explicitly for example type keyword can be used define type for ipv4 addresses which are 32-bit unsigned integers type ipv4addr uint32 with this type definition ipv4addrx interprets uint32 value x ip address simply assigning x variable type ipv4addr type error constant expressions may be either typed untyped they are given type when assigned typed variable if value they represent passes compile-time check function types are indicated by func keyword they take zero more parameters return zero more values all which are typed parameter return values determine function type thus funcstring int32 int error type functions that take string 32-bit signed integer return signed integer default width value built-in interface type error any named type has method set associated with ip address example above can be extended with method for converting address human-readable representation viz // this zero broadcast address func addr ipv4addr zerobroadcast bool { return addr == 0xffffffff } due nominal typing this method definition adds method ipv4addr but not on uint32 while methods have special definition call syntax there no distinct method type interface system go provides two features that replace class inheritance first embedding which can be viewed automated form composition delegation255 second are its interfaces which provides runtime polymorphism interfaces provide limited form structural typing otherwise nominal type system go any type that implements all methods interface conforms that interface go interfaces were designed after protocols from smalltalk programming language multiple sources use term duck typing when describing go interface although term duck typing not precisely defined therefore not wrong usually implies that type conformance not statically checked since conformance go interface checked statically by go compiler except when performing type assertion go authors prefer use term structural typing interface specifies set types by listing required methods their types satisfied by any type that has required methods implementing types do not need specify their implementing interfaces so if shape square circle are defined import math type shape interface { area float64 } type square struct { // note no implements declaration side float64 } func sq square area float64 { return sqside sqside } type circle struct { // no implements declaration here either radius float64 } func c circle area float64 { return mathpi mathpowcradius } then both square circle are implicitly shape can be assigned shape-typed variable263–268 formal language go's interface system provides structural rather than nominal typing interfaces can embed other interfaces with effect creating combined interface that satisfied by exactly types that implement embedded interface any methods that newly defined interface adds270 go standard library uses interfaces provide genericity several places including input/output system that based on concepts reader writer282–283 besides calling methods via interfaces go allows converting interface values other types with run-time type check language constructs do so are type assertion which checks against single potential type type switch which checks against multiple types empty interface interface{} important corner case because can refer item any concrete type similar object class java c but with difference that empty interface satisfied by any type including built-in types like int while java c object variable can only hold instances reference type284 code using empty interface cannot simply call methods built-in operators on referred-to object but can store interface{} value try convert more useful type via type assertion type switch inspect with go's reflect package because interface{} can refer any value limited way escape restrictions static typing like void c but with additional run-time type checks interface values are implemented using pointer data second pointer run-time type information like some other types implemented using pointers go interface values are nil if uninitialized package system go's package system each package has path eg compress/bzip2 golangorg/x/net/html name eg bzip2 html references other packages' definitions must always be prefixed with other package's name only capitalized names from other packages are accessible ioreader public but bzip2reader not go get command can retrieve packages stored remote repository such github developers are encouraged develop packages inside base path corresponding source repository such githubcom/username/packagename reduce likelihood name collision with future additions standard library other external libraries proposals exist introduce proper package management solution for go similar rust's cargo system node's npm system concurrency goroutines channels go language has built-in facilities well library support for writing concurrent programs concurrency refers not only cpu parallelism but also asynchrony letting slow operations like database network-read run while program does other work common event-based servers primary concurrency construct goroutine type light-weight process function call prefixed with go keyword starts function new goroutine language specification does not specify how goroutines should be implemented but current implementations multiplex go process's goroutines onto smaller set operating system threads similar scheduling performed erlang10 while standard library package featuring most classical concurrency control structures mutex locks etc available 151–152 idiomatic concurrent programs instead prefer channels which provide send messages between goroutines optional buffers store messages fifo order43 allow sending goroutines proceed before their messages are received channels are typed so that channel type chan t can only be used transfer messages type t special syntax used operate on them describing how goroutines must use channels other operations safely share data existence channels sets go apart from actor model-style concurrent languages like erlang where messages are addressed directly actors corresponding goroutines actor style can be simulated go by maintaining one-to-one correspondence between goroutines channels but language allows multiple goroutines share channel single goroutine send receive on multiple channels147 from these tools one can build concurrent constructs like worker pools pipelines which say file decompressed parsed downloads background calls with timeout fan-out parallel calls set services others channels have also found uses further from usual notion interprocess communication like serving concurrency-safe list recycled buffers implementing coroutines which helped inspire name goroutine implementing iterators concurrency-related structural conventions go channels alternative channel inputs are derived from tony hoare's communicating sequential processes model unlike previous concurrent programming languages such occam limbo language on which go co-designer rob pike worked go does not provide any built-in notion safe verifiable concurrency while communicating-processes model favored go not only one all goroutines program share single address space this means that mutable objects pointers can be shared between goroutines see § lack race condition safety below suitability for parallel programming although go's concurrency features are not aimed primarily at parallel processing they can be used program shared memory multi-processor machines various studies have been done into effectiveness this approach one these studies compared size lines code speed programs written by seasoned programmer not familiar with language corrections these programs by go expert from google's development team doing same for chapel cilk intel tbb study found that non-expert tended write divide-and-conquer algorithms with one go statement per recursion while expert wrote distribute-work-synchronize programs using one goroutine per processor expert's programs were usually faster but also longer lack race condition safety there are no restrictions on how goroutines access shared data making race conditions possible specifically unless program explicitly synchronizes via channels other means writes from one goroutine might be partly entirely not at all visible another often with no guarantees about ordering writes furthermore go's internal data structures like interface values slice headers hash tables string headers are not immune race conditions so type memory safety can be violated multithreaded programs that modify shared instances those types without synchronization instead language support safe concurrent programming thus relies on conventions for example chisnall recommends idiom called aliases xor mutable meaning that passing mutable value pointer over channel signals transfer ownership over value its receiver155 omissions go deliberately omits certain features common other languages including implementation inheritance generic programming assertions pointer arithmetic implicit type conversions these language features go authors express openness generic programming explicitly argue against assertions pointer arithmetic while defending choice omit type inheritance giving more useful language encouraging instead use interfaces achieve dynamic dispatch composition reuse code composition delegation are fact largely automated by struct embedding according researchers schmager et al this feature has many drawbacks inheritance affects public interface objects not fine-grained ie no method-level control over embedding methods embedded objects cannot be hidden static making not obvious whether programmers will not overuse extent that programmers other languages are reputed overuse inheritance regarding generic programming some built-in functions are fact type-generic but these are treated special cases rob pike calls this weakness language that may at some point be changed google team that designs language built at least one compiler for experimental go dialect with generics but did not release after initially omitting exceptions exception-like panic/recover mechanism was eventually added language which go authors advise using for unrecoverable errors such those that should halt entire program server request shortcut propagate errors up stack within package but not across package boundaries there error returns are standard api conventions code style go authors put substantial effort into molding style design go programs indentation spacing other surface-level details code are automatically standardized by gofmt tool golint does additional style checks automatically tools libraries distributed with go suggest standard approaches things like api documentation godoc testing go test building go build package management go get so on go enforces rules that are recommendations other languages for example banning cyclic dependencies unused variables imports implicit type conversions omission certain features for example functional-programming shortcuts like map c++-style try/finally blocks tends encourage particular explicit concrete imperative programming style on day one go team published collection go idioms later also collected code review comments talks official blog posts teach go style coding philosophy language tools go includes same sort debugging testing code-vetting tools many language distributions go distribution includes among other tools go build which builds go binaries using only information source files themselves no separate makefiles go test for unit testing microbenchmarks go fmt for formatting code go get for retrieving installing remote packages go vet static analyzer looking for potential errors code go run shortcut for building executing code godoc for displaying documentation serving via http gorename for renaming variables functions so on type-safe way go generate standard way invoke code generators also includes profiling debugging support runtime instrumentation for example track garbage collection pauses race condition tester there ecosystem third-party tools that add standard distribution such gocode which enables code autocompletion many text editors goimports by go team member which automatically adds/removes package imports needed errcheck which detects code that might unintentionally ignore errors more plugins exist add language support widely used text editors at least one ide liteide branded simple open source cross-platform go ide examples hello world here hello world program go package main import fmt func main { fmtprintlnhello world } concurrency example following simple program demonstrates go's concurrency features implement asynchronous program launches two goroutines lightweight threads one waits for user type some text while other implements timeout select statement waits for either these goroutines send message main routine acts on first message arrive example adapted from chisnall152 package main import fmt time func readwordch chan string { fmtprintlntype word then hit enter var word string fmtscanf%s &word ch which licensed under creative commons attribution license faq — go programming language golangorg retrieved release history - go programming language golangorg retrieved october b why doesn't go have implements declarations golangorg retrieved october pike rob rob pike on twitter retrieved go has structural typing not duck typing full interface satisfaction checked required lang/go go-14 – go programming language openbsd ports retrieved go porting efforts go language resources cat-v january retrieved january text file license go programming language google retrieved october additional ip rights grant go programming language google retrieved october b pike rob hello gophers retrieved b c language design faq golangorg january retrieved february evolution go retrieved kincaid jason november google's go new programming language that's python meets c++ techcrunch retrieved january b metz cade may google go boldly goes where no code has gone before register go faq google using go internally retrieved march google's in-house programming language now runs on phones wiredcom august faq implementation golangorg january retrieved january installing gcc configuration retrieved december ada go objective-c++ are not default languages go release notes retrieved january compiler runtime are now implemented go assembler without c pike rob april another go at language design stanford ee computer systems colloquium stanford university video available frequently asked questions faq - go programming language golangorg retrieved andrew binstock may dr dobb's interview with ken thompson retrieved february pike rob less exponentially more robert griesemer evolution go release history pike rob go programming language youtube retrieved jul rob pike november go programming language flv tech talk google event occurs at download install packages dependencies - go - go programming language see for addresses documentation some packages godoc godocorg rob pike on changelog podcast b c will yager why go not good egon elbre summary go generics discussions fitzpatrick brad go 90% perfect 100% time retrieved january danny gratzer leaving go b jared forsyth rust vs go janos dobronszki everyday hassles go rob pike less exponentially more go authors frequently asked questions faq rob pike generating code richard hudson go 14+ garbage collection gc plan roadmap rob pike strings bytes runes characters go october b pike rob september arrays slices strings mechanics 'append' go blog retrieved march andrew gerrand go slices usage internals go authors effective go slices go authors selectors - go programming language specification calls - go programming language specification go programming language specification golangorg go programming language specification golangorg go programming language specification golangorg b schmager frank cameron nicholas noble james gohotdraw evaluating go programming language with design patterns evaluation usability programming languages tools acm b summerfield mark programming go creating applications for 21st century addison-wesley b c d e balbaert ivo way go thorough introduction go programming language iuniverse evolution go talksgolangorg retrieved diggins christopher duck typing go programming language dr dobb's retrieved ryer mat duck typing go retrieved go programming language specification golangorg go programming language specification golangorg reflectvalueofi interface{} converts interface{} reflectvalue that can be further inspected go data structures interfaces retrieved november go programming language specification golangorg tutorial for go programming language go programming language google retrieved march go rule about visibility information simple if name top-level type function method constant variable structure field method capitalized users package may see otherwise name hence thing being named visible only inside package which declared go - go programming language golangorg how write go code golangorg packages from standard library are given short import paths such fmt net/http for your own packages you must choose base path that unlikely collide with future additions standard library other external libraries if you keep your code source repository somewhere then you should use root that source repository your base path for instance if you have github account at githubcom/user that should be your base path go packaging proposal process b rob pike concurrency not parallelism b c d e chisnall david go programming language phrasebook addison-wesley effective go golangorg go concurrency patterns golangorg john graham-cumming recycling memory buffers go treego ewen cheslack-postava iterators go brian w kernighan descent into limbo b go memory model google retrieved january tang peiyi multi-core parallel programming go pdf proc first international conference on advanced computing communications nanz sebastian west scott soares da silveira kaue examining expert gap parallel programming pdf euro-par citeseerx russ cox off races rob pike october go at google language design service software engineering google inc there one important caveat go not purely memory safe presence concurrency e2e erik meijer robert griesemer – going go channel microsoft may panic recover go wiki weekly snapshot history golangorg proposal for exception-like mechanism golang-nuts march retrieved march effective go golangorg effective go golangorg liteide erik unger case for go andrew gerrand four years go go blog hugues bruant aerofs - little golang way aerofs chango github john graham-cumming go at cloudflare john graham-cumming what we've been doing with go go at coreos couchbase github patrick lee open sourcing our go libraries july dlgooglecom powered by go golangorg matt welsh rewriting large production system go david symonds high performance apps on google app engine mongo db github netflix tech blog application data caching using ssds steven sacks search & advances plugdj tech blog replicatedhq github tim jenkins how convince your company go with golang sendgrid's email deliverability blog peter bourgon go at soundcloud go at google i/o gopher summerfest - go blog golangorg twstrike coyim thoughtworks strike team rhys hiltner go’s march low-latency gc july how we built uber engineering's highest query per second service using go uber engineering blog retrieved simionato michele november interfaces vs inheritance watch out for go artima retrieved november astels dave november ready set go engineyard retrieved november paul ryan november go new open source programming language from google ars technica retrieved november jt google's go wins programming language year award jaxenter retrieved december tiobe programming community index for june tiobe software june retrieved july tiobe programming community index for september tiobe software september retrieved september bruce eckel august calling go from python via json-rpc retrieved august hundt robert loop recognition c++/java/go/scala pdf scala days metz cade july google go strikes back with c++ bake-off register brownlee john november google didn't google go before naming their programming language' claburn thomas november google 'go' name brings accusations evil' informationweek retrieved january issue - go — i have already used name for my programming language google code google inc retrieved october external links wikimedia commons has media related go programming language official website tour go official go programming language resources unofficial community conferences gopher academy gopher academy group developers working educate promote go community golangprojectscom lists programming jobs projects where companies are looking for people that know go gophercon first go conference denver colorado usa april gopher gala first go hackathon gopherconindia first go conference india bangalore feb golanguk first go conference uk london dotgo european conference paris france golangshow go audio podcast golangshow golang argentina gophers community blog argentina v t e programming languages comparison timeline history assembly basic c c++ c cobol fortran go haskell java javascript js lisp lua objective-c pascal perl php python ruby shell smalltalk swift visual basic net vbnet more category comparison lists o alphabetical o categorical o generational o non-english-based v t e google overview alphabet inc history list mergers acquisitions products criticism o privacy concerns censorship domains easter eggs don't be evil advertising admob adscape adsense adwords analytics contributor partners doubleclick doubleclick for publishers wallet communication allo alerts apps script duo calendar contacts gmail o history o interface google+ groups hangouts inbox sync text-to-speech translate transliteration voice software assistant chrome o for android o for ios o chrome web store o apps o extensions cloud print earth o sky o moon o mars gadgets gboard goggles ime o pinyin o japanese photos keep news & weather now openrefine search toolbar platforms account android o version history o software development o android auto o android pay o android tv o android wear authenticator body books o library project caja cardboard cast chromecast chrome os o chromebit o chromebook o chromebox o chrome zone cloud platform o app engine o bigquery o bigtable o compute engine o storage contact lens custom search dart daydream earth engine fit gfs glass go g suite o classroom home jamboard marketplace native client nexus onhub opensocial pixel play o books o games o movies & tv o music o newsstand public dns wallet wifi development tools ajax apis app inventor closure tools developers gdata googlebot guava guice gws kml kythe mapreduce mediabot sitemaps summer code web toolkit search console website optimizer swiffy publishing blogger bookmarks drive o docs sheets slides forms o drawings o my maps o fusion tables domains feedburner map maker panoramio sites youtube youtube instant youtube red vevo zagat search timeline appliance blog search books o ngram viewer custom search finance flights images maps o mars o moon o sky o street view + coverage + competition + privacy concerns news o archive patents public data scholar shopping usenet videos algorithms pagerank panda penguin hummingbird features web history personalized real-time instant search safesearch voice search analysis insights for search trends knowledge graph knowledge vault discontinued aardvark answers browser sync base buzz checkout chrome frame click-to-call cloud connect code search currents desktop dictionary directory dodgeball fast flip friend connect gears goog-411 google tv jaiku knol health igoogle image labeler labs latitude lively mashup editor notebook offers orkut pack page creator picasa picasa web albums picnik powermeter q & reader script converter searchwiki sidewiki slide squared talk updater urchin videos wave web accelerator people al gore alan eustace alan mulally amit singhal ann mather david drummond eric schmidt jeff dean john doerr john l hennessy krishna bharat matt cutts patrick pichette paul otellini omid kordestani rachel whetstone rajen sheth ram shriram ray kurzweil ruth porat salar kamangar shirley m tilghman sundar pichai susan wojcicki urs hölzle vint cerf founders larry page sergey brin other art project calico current chrome experiments code-in code jam developer day google business groups made with code data liberation o takeout google developer expert google for work driverless car earth outreach fiber gv google china google express googlization grants googleorg lunar x prize project fi material design motorola mobility wifi x events science fair searchology i/o developer day atgoogletalks code jam highly open participation contest code-in projects ara loon tango sunroof real estate eighth avenue googleplex logo doodle4google google doodles related ai challenge bomb goojje monopoly city streets unity category portal v t e rob pike operating systems plan from bell labs inferno programming languages newsqueak limbo go sawzall software acme blit sam rio 8½ publications practice programming unix programming environment other renée french mark v shaney utf-8 v t e ken thompson operating systems unix plan from bell labs programming languages b bon go software belle ed grep sam space travel thompson shell other utf-8 retrieved from https//enwikipediaorg/w/indexphptitle=goprogramminglanguage&oldid=751516309 categories american inventions c programming language family concurrent programming languages cross-platform software free compilers interpreters google software procedural programming languages programming languages created software using bsd license statically typed programming languages systems programming languages hidden categories articles lacking reliable references from november all articles lacking reliable references all articles with unsourced statements articles with unsourced statements from october accuracy disputes from november articles with unsourced statements from july articles with unsourced statements from november articles containing potentially dated statements from september all articles containing potentially dated statements commons category with local link same on wikidata articles prone spam from june use dmy dates from august navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version other projects wikimedia commons languages العربية বাংলা български čeština dansk deutsch español euskara فارسی français ગુજરાતી 한국어 հայերեն íslenska italiano עברית magyar bahasa melayu nederlands 日本語 norsk bokmål polski português русский slovenščina српски / srpski suomi svenska தமிழ் türkçe українська اردو tiếng việt 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 