backus–naur form from wikipedia free encyclopedia jump navigation search not be confused with boyce–codd normal form computer science backus–naur form backus normal form bnf notation technique for context-free grammars often used describe syntax languages used computing such computer programming languages document formats instruction sets communication protocols they are applied wherever exact descriptions languages are needed for instance official language specifications manuals textbooks on programming language theory many extensions variants original backus–naur notation are used some are exactly defined including extended backus–naur form ebnf augmented backus–naur form abnf contents history introduction example further examples variants o software using bnf see also references external links o language grammars history idea describing structure language using rewriting rules can be traced back at least work pāṇini who lived sometime between 7th 4th century bce his notation describe sanskrit word structure notation equivalent power that backus has many similar properties western society grammar was long regarded subject for teaching rather than scientific study descriptions were informal targeted at practical usage first half 20th century linguists such leonard bloomfield zellig harris started attempts formalize description language including phrase structure meanwhile string rewriting rules formal abstract systems were introduced studied by mathematicians such axel thue emil post 1920s–40s alan turing noam chomsky teaching linguistics students information theory at mit combined linguistics mathematics by taking what essentially thue's formalism basis for description syntax natural language he also introduced clear distinction between generative rules those context-free grammars transformation rules john backus programming language designer at ibm proposed metalanguage metalinguistic formulas describe syntax new programming language ial known today algol first used algol report bnf notation for chomsky's context-free grammars apparently backus was familiar with chomsky's work proposed by backus formula defined classes whose names are enclosed angle brackets for example each these names denotes class basic symbols further development algol led algol committee's report peter naur called backus's notation backus normal form donald knuth argued that bnf should rather be read backus–naur form not normal form conventional sense unlike for instance chomsky normal form name pāṇini backus form has also been suggested view fact that expansion backus normal form may not be accurate that pāṇini had independently developed similar notation earlier bnf described by peter naur algol report metalinguistic formula sequences characters enclosed brackets represent metalinguistic variables whose values are sequences symbols marks = | latter with meaning are metalinguistic connectives any mark formula which not variable connective denotes itself juxtaposition marks and/or variables formula signifies juxtaposition sequence denoted another example from algol report illustrates major difference between bnf metalanguage chomsky context-free grammar metalingustic variables do not require rule defining their formation their formation may simply be described natural language within brackets following algol report section comments specification exemplifies how this works for purpose including text among symbols program following comment conventions hold sequence basic symbols equivalent comment begin comment begin end end by equivalence here meant that any three structures shown left column may be replaced any occurrence outside strings by symbol shown same line right column without any effect on action program naur changed two backus's symbols commonly available characters = symbol was originally ≡ | symbol was originally word with bar over it14 working for ibm backus would have had non-disclosure agreement couldn't have talked about his source if came from ibm proprietary project bnf very similar canonical-form boolean algebra equations that are were at time used logic-circuit design backus was mathematician designer fortran programming language studies boolean algebra commonly part mathematics what we do know that neither backus nor naur described names enclosed non-terminals chomsky terminology was not originally used describing bnf naur later described them classes algol course materials algol report they were called metalinguistic variables anything other than metasymbols = | class names enclosed are symbols language being defined metasymbols = be interpreted defined | used separate alternative definitions interpreted metasymbols are delimiters enclosing class name bnf described metalanguage for talking about algol by peter naur saul rosen saul rosen became involved activities fledgling association for computing machinery first on languages committee that became ial group eventually led algol he was first managing editor communications acm what we do know that bnf was first used metalanguage talk about algol language algol report that how explained algol programming course material developed by peter naur early algol manuals by ibm honeywell burroughs digital equipment corporation followed algol report using metalanguage saul rosen his book describes bnf metalanguage for talking about algol example its use metalanguage would be defining arithmetic expression = | first symbol alternative may be class being defined repetition explained by naur having function specifying that alternative sequence can recursively begin with previous alternative can be repeated any number times for example above defined followed by any number some later metalanguages such schorre's meta ii bnf recursive repeat construct replaced by sequence operator target language symbols defined using quoted strings bracket removed mathematical grouping were added rule would appear meta ii expr = term $'+' term out'add' | '-' term out'sub' these changes made that meta ii its derivative programming languages able define extend their own metalanguage so doing ability use natural language description metalinguistic variable language construct description was lost many spin-off metalanguages were inspired by bnf see meta ii tree-meta metacompiler bnf class describes language construct formation with formation defined pattern action forming pattern class name expr described natural language followed by sequence class abstraction we can talk about independent its formation we can talk about term independent its definition being added subtracted expr we can talk about term being specific data type how expr be evaluated having specific combinations data types even reordering expression group data types evaluation results mixed types natural-language supplement provided specific details language class semantics be used by compiler implementation programmer writing algol program natural-language description further supplemented syntax well integer rule good example natural metalanguage used describe syntax = | there are no specifics on white space above far rule states we could have space between digits natural language we complement bnf metalanguage by explaining that digit sequence can have no white space between digits english only one possible natural languages translations algol reports were available many natural languages origin bnf not important its impact on programming language development during period immediately following publication algol report bnf was basis many compiler-compiler systems some directly used bnf like syntax directed compiler for algol developed by edgar t irons compiler building system developed by brooker morris others changed programming language schorre metacompilers made programming language with only few changes became symbol identifiers dropping enclosing using quoted strings for symbols target language arithmetic like grouping provided simplification that removed using classes were grouping was its only value meta ii arithmetic expression rule shows grouping use output expressions placed meta ii rule are used output code labels assembly language rules meta ii are equivalent class definitions bnf unix utility yacc based on bnf with code production similar meta ii though yacc most commonly used parser generator its roots are obviously bnf bnf today one oldest computer-related languages still use introduction bnf specification set derivation rules written = expression where nonterminal expression consists one more sequences symbols more sequences are separated by vertical bar | indicating choice whole being possible substitution for symbol on left symbols that never appear on left side are terminals on other hand symbols that appear on left side are non-terminals are always enclosed between pair = means that symbol on left must be replaced with expression on right example example consider this possible bnf for us postal address = = | = | = = = sr | jr | | = | this translates into english postal address consists name-part followed by street-address part followed by zip-code part name-part consists either personal-part followed by last name followed by optional suffix jr sr dynastic number end-of-line personal part followed by name part this rule illustrates use recursion bnfs covering case people who use multiple first middle names and/or initials personal-part consists either first name initial followed by dot street address consists house number followed by street name followed by optional apartment specifier followed by end-of-line zip-part consists town-name followed by comma followed by state code followed by zip-code followed by end-of-line opt-suffix-part consists suffix such sr jr roman-numeral empty string ie nothing opt-apt-num consists apartment number empty string ie nothing note that many things such format first-name apartment specifier zip-code roman numeral are left unspecified here if necessary they may be described using additional bnf rules further examples bnf's syntax itself may be represented with bnf like following = | = > = = | = | | = | = | = | > = '' '' | ' ' = | = | = | | = | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z | | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z = | | | | | | | | | = | | | - | | | $ | % | & | | | | + | | - | | / | | | | | @ | | | | ` | { | | | } | ~ = | ' = | '' = | = | | - note that empty string original bnf did not use quotes shown rule this assumes that no whitespace necessary for proper interpretation rule represents appropriate line-end specifier ascii carriage-return and/or line-feed depending on operating system are be substituted with declared rule's name/label literal text respectively us postal address example above entire block-quote syntax each line unbroken grouping lines rule for example one rule begins with = other part that rule aside from line-end expression which consists two lists separated by pipe | these two lists consists some terms three terms two terms respectively each term this particular rule rule-name variants there are many variants extensions bnf generally either for sake simplicity succinctness adapt specific application one common feature many variants use regular expression repetition operators such + extended backus–naur form ebnf common one another common extension use square brackets around optional items although not present original algol report instead introduced few years later ibm's pl/i definition notation now universally recognised augmented backus–naur form abnf rbnf are extensions commonly used describe internet engineering task force ietf protocols parsing expression grammars build on bnf regular expression notations form alternative class formal grammar which essentially analytic rather than generative character many bnf specifications found online today are intended be human-readable are non-formal these often include many following syntax rules extensions optional items enclosed square brackets items existing more times are enclosed curly brackets suffixed with asterisk such = {} = respectively items existing more times are suffixed with addition plus symbol + terminals may appear bold rather than italics non-terminals plain text rather than angle brackets where items are grouped they are enclosed simple parentheses software using bnf antlr another parser generator written java bnf converter bnfc operating on variant called labeled backus–naur form lbnf this variant each production for given non-terminal given label which can be used constructor algebraic data type representing that nonterminal converter capable producing types parsers for abstract syntax several languages including haskell java coco/r compiler generator accepting attributed grammar ebnf dms software reengineering toolkit program analysis transformation system for arbitrary languages gold bnf parser gnu bison gnu version yacc rpa bnf parser online php demo parsing javascript xml xact x4mr system rule-based expert system for programming language translation xpl analyzer tool which accepts simplified bnf for language produces parser for that language xpl may be integrated into supplied skeleton program with which language may be debugged share contributed program which was preceded by compiler generator isbn 978-0-13-155077-3 which see yacc parser generator used with lex preprocessor bnfparser2 universal syntax verification utility bnf2xml markup input with xml tags using advanced bnf matching javacc java compiler compiler tm javacc tm - java parser generator see also translational backus–naur form tbnf syntax diagram – railroad diagram definite clause grammar – more expressive alternative bnf used prolog wirth syntax notation – alternative bnf from van wijngaarden grammar – used preference bnf define algol68 references this article based on material taken from free on-line dictionary computing prior november incorporated under relicensing terms gfdl version later panini biography school mathematics statistics university st andrews scotland retrieved ingerman peter zilahy march pāṇini-backus form suggested communications acm association for computing machinery doi101145/363162363165 retrieved september ingerman suggests that backus normal form be renamed pāṇini-backus form give due credit pāṇini earliest independent inventor chomsky noam three models for description language pdf ire transactions on information theory 113–24 doi 101109/tit19561056813 chomsky noam syntactic structures hague mouton b c d e f g h meaning syntactic formula may be further explained by saying that words enclosed brackets like denote classes whose members are sequences basic symbols class designations this kind are found any description language for describing ordinary natural languages designation like word verb noun are used peter naur 1961a course on algol programming p note retrieved march b backus j w syntax semantics proposed international algebraic language zurich acm-gamm conference pdf proceedings international conference on information processing unesco pp 125–132 farrell james august compiler basics extended backus naur form archived from original on june retrieved may fulton iii scott m march john w backus - betanews inc retrieved jun knuth donald e backus normal form vs backus naur form communications acm 735–736 doi 101145/355588365140 ingerman p z pāṇini backus form suggested communications acm doi101145/363162363165 revised algol report section 11algol retrieved april saul rosen jan programming systems languages mcgraw hill computer science series new york/ny mcgraw hill isbn rbnf bnfc language technology se chalmers online demo rpatk tools act world if target processor system/360 related even up z/system target language similar pl/i indeed xpl then required code emitters may be adapted from xpl's emitters for system/360 bnf parser² source forge project bnf2xml javacc external links morrison kelly july backus normal form vs backus-naur form compcompilers newsgroup iecc posting quotes alan j perlis peter naur from algol section richard l wexelblat editor history programming languages garshol lars marius bnf ebnf what are they how do they work no priv rfc — augmented bnf for syntax specifications abnf rfc — routing bnf syntax used various protocol specifications iso/iec 149771996e information technology – syntactic metalanguage – extended bnf available from publicly available standards iso from kuhn marcus iso pdf uk cam latter missing cover page but otherwise much cleaner language grammars bernhard algol-60 bnf de lrz münchen archived from original on original bnf bnf grammars for sql-92 sql-99 sql-2003 savage au net freely available bnf grammars for sql bnf web club db research ch unige freely available bnf grammars for sql ada java free programming language grammars for compiler construction source code free country freely available bnf/ebnf grammars for c/c++ pascal cobol ada pl/i bnf files related step standard exp engine svn source forge includes parts iso step standard retrieved from https//enwikipediaorg/w/indexphptitle=backus–naurform&oldid=751603225 categories formal languages compiler construction metalanguages hidden categories all articles with dead external links articles with dead external links from august wikipedia articles needing clarification from april wikipedia articles needing clarification from may all wikipedia articles needing clarification wikipedia articles needing clarification from october articles with inconsistent citation formats pages using isbn magic links pages using rfc magic links navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages العربية català čeština dansk deutsch ελληνικά español فارسی français galego 한국어 हिन्दी hrvatski íslenska italiano ქართული magyar bahasa melayu nederlands 日本語 norsk bokmål polski português русский српски / srpski srpskohrvatski / српскохрватски suomi svenska தமிழ் türkçe українська 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 