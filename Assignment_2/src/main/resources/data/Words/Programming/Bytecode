bytecode from wikipedia free encyclopedia jump navigation search portable code redirects here for other uses see software portability this article needs additional citations for verification please help improve this article by adding citations reliable sources unsourced material may be challenged removed january learn how when remove this template message bytecode also known portable code p-code form instruction set designed for efficient execution by software interpreter unlike human-readable source code bytecodes are compact numeric codes constants references normally numeric addresses that encode result parsing semantic analysis things like type scope nesting depths program objects they therefore allow much better performance than direct interpretation source code program execution general concepts runtime system runtime library executable compiler interpreter virtual machine intermediate representation ir source code object code bytecode machine code compilation strategies just-in-time jit o tracing just-in-time ahead-of-time aot transcompilation recompilation notable runtimes android runtime art common language runtime clr crt0 java virtual machine jvm nodejs zend engine notable compilers & toolchains llvm gnu compiler collection gcc v t e look up bytecode wiktionary free dictionary name bytecode stems from instruction sets that have one-byte opcodes followed by optional parameters intermediate representations such bytecode may be output by programming language implementations ease interpretation may be used reduce hardware operating system dependence by allowing same code run on different platforms bytecode may often be either directly executed on virtual machine p-code machine ie interpreter may be further compiled into machine code for better performance since bytecode instructions are processed by software they may be arbitrarily complex but are nonetheless often akin traditional hardware instructions virtual stack machines are most common but virtual register machines have also been built different parts may often be stored separate files similar object modules but dynamically loaded during execution execution bytecode program may be executed by parsing directly executing instructions one at time this kind bytecode interpreter very portable some systems called dynamic translators just-in-time jit compilers translate bytecode into machine language necessary at runtime this makes virtual machine hardware-specific but doesn't lose portability bytecode itself for example java smalltalk code typically stored bytecoded format which typically then jit compiled translate bytecode machine code before execution this introduces delay before program run when bytecode compiled native machine code but improves execution speed considerably compared direct interpretation source code—normally by several orders magnitude because its performance advantage today many language implementations execute program two phases first compiling source code into bytecode then passing bytecode virtual machine there are bytecode based virtual machines this sort for java python php tcl awk forth however forth not ordinarily compiled via bytecodes this way its virtual machine more generic instead implementation perl ruby instead work by walking abstract syntax tree representation derived from source code more recently authors v8 dart have challenged notion that intermediate bytecode necessity for fast efficient vm implementation both these language implementations currently do direct jit compilation from source code machine code without any bytecode intermediary examples actionscript executes actionscript virtual machine avm which part flash player air actionscript code typically transformed into bytecode format by compiler examples compilers include one built into adobe flash professional one that built into adobe flash builder available adobe flex sdk adobe flash objects bancstar originally bytecode for interface-building tool but used language its own right berkeley packet filter byte code engineering library c java virtual machine compilers clisp implementation common lisp used compile only bytecode for many years however now also supports compilation native code with help gnu lightning cmucl scieneer common lisp implementations common lisp can compile either bytecode native code bytecode much more compact common intermediate language executed by common language runtime used by microsoft net languages such c dalvik bytecode designed for android platform executed by dalvik virtual machine dis bytecode designed for inferno operating system executed by dis virtual machine eiffelstudio for eiffel programming language em amsterdam compiler kit virtual machine used both intermediate compilation language modern bytecode language emacs text editor with majority its functionality implemented by its specific dialect lisp these features are compiled into bytecode this architecture allows users customize editor with high level language which after compilation into bytecode yields reasonable performance embeddable common lisp implementation common lisp can compile bytecode c code ericsson implementation erlang uses beam bytecodes icon unicon programming languages infocom used z-machine make its software applications more portable java bytecode which executed by java virtual machine o asm o bcel o javassist o jmangler keyb ms-dos/pc dos keyboard driver with its resource file keyboardsys containing layout information short p-code sequences executed by interpreter inside resident driver llvm modular bytecode compiler virtual machine lua uses register-based bytecode virtual machine m-code matlab programming language o-code bcpl programming language ocaml programming language optionally compiles compact bytecode form p-code ucsd pascal implementation pascal programming language parrot virtual machine pick basic also referred data basic multivalue basic r environment for statistical computing offers byte code compiler through compiler package now standard with r version possible compile this version r so that base recommended packages take advantage this scheme implementation scheme using bytecode interpreter bytecodes many implementations smalltalk programming language spin interpreter built into parallax propeller microcontroller sqlite database engine translates sql statements into bespoke byte-code format sweet16 tcl visual foxpro compiles bytecode yarv rubinius for ruby references implementation lua involves register-based virtual machine dalvik vm register based although php opcodes are generated each time program launched are always interpreted not just-in-time compiled dynamic machine code generation google loitsch florian why not bytecode vm google javascript myth javascript needs standard bytecode implementation icon programming language implementation icon unicon compendium paul matthias keyboardsys internal structure composmsdosprogrammer retrieved fact format basically same ms-dos - pc dos - including russian lithuanian chinese japanese issues well windows nt xp there are minor differences incompatibilities but general format has not changed over years some data entries contain normal tables however most entries contain executable code interpreted by some kind p-code interpreter at runtime including conditional branches like this why keyb driver has such huge memory footprint compared table-driven keyboard drivers which can be done - kb getting same level functionality except for interpreter mendelson edward how display euro ms-dos windows dos display euro symbol full-screen ms-dos including windows windows full-screen dos archived from original on retrieved matthias paul warns that ibm pc dos version keyboard driver uses some internal procedures that are not recognized by microsoft driver so if possible you should use ibm versions both keybcom keyboardsys instead mixing microsoft ibm versions nb what meant by procedures here are some additional byte codes ibm keyboardsys file not supported by microsoft version keyb driver for details refer united states patent for details refer r installation administration sqlite bytecode engine retrieved from https//enwikipediaorg/w/indexphptitle=bytecode&oldid=748972091 categories virtualization software hidden categories all articles with dead external links articles with dead external links from november articles with permanently dead external links articles needing additional references from january all articles needing additional references all articles with unsourced statements articles with unsourced statements from august navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages বাংলা català čeština dansk deutsch español esperanto فارسی français 한국어 հայերեն italiano עברית кыргызча nederlands 日本語 polski português русский shqip slovenščina српски / srpski suomi svenska తెలుగు türkçe українська 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 