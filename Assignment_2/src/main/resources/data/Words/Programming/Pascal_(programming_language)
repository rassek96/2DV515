pascal programming language from wikipedia free encyclopedia jump navigation search pascal paradigm imperative structured designed by niklaus wirth first appeared years ago typing discipline static strong safe filename extensions pp pas inc major implementations cdc embarcadero delphi icl pascal-p pdp-11 pdp-10 ibm system/370 hp pascal free pascal gnu pascal dialects delphi turbo pascal ucsd pascal influenced by algol w influenced ada component pascal go java modula / / oberon / object pascal oxygene seed7 pascal imperative procedural programming language which niklaus wirth designed 1968–69 published small efficient language intended encourage good programming practices using structured programming data structuring derivative known object pascal designed for object-oriented programming was developed contents history brief description implementations o early pascal compilers o pascal-p system o object pascal turbo pascal o other variants language constructs o data types o subrange types o set types o type declarations o file type o pointer types o control structures o procedures functions o semicolons statement separators resources o compilers interpreters o ides o libraries standards o iso/iec pascal o iso/iec extended pascal o variations + borland-like pascal compilers o list related standards reception o early criticism see also references further reading external links history pascal named honor french mathematician philosopher blaise pascal was developed by niklaus wirth before his work on pascal wirth had developed euler algol w later went on develop pascal-like languages modula-2 oberon initially pascal was largely but not exclusively intended teach students structured programming generation students used pascal introductory language undergraduate courses variants pascal have also frequently been used for everything from research projects pc games embedded systems newer pascal compilers exist which are widely used pascal was primary high-level language used for development apple lisa early years macintosh parts original macintosh operating system were hand-translated into motorola assembly language from pascal sources typesetting system tex by donald e knuth was written web original literate programming system based on dec pdp-10 pascal while applications like total commander skype macromedia captivate were written delphi object pascal apollo computer used pascal systems programming language for its operating systems beginning object pascal embarcadero delphi still used for developing windows applications but also has ability cross compile same code mac ios android another cross-platform version called free pascal with lazarus ide popular with linux users since also offers write once compile anywhere development codetyphon lazarus distribution with more preinstalled packages cross compilers brief description wirth's intention was create efficient language regarding both compilation speed generated code based on structured programming recently popularized concept that he promoted his book algorithms + data structures = programs pascal has its roots algol language but also introduced concepts mechanisms which on top algol's scalars arrays enabled programmers define their own complex structured datatypes also made easier build dynamic recursive data structures such lists trees graphs important features included for this were records enumerations subranges dynamically allocated variables with associated pointers sets make this possible meaningful pascal has strong typing on all objects which means that one type data cannot be converted interpreted another without explicit conversions similar mechanisms are standard many programming languages today other languages that influenced pascal's development were simula wirth's own algol w pascal like many programming languages today but unlike most languages c family allows nested procedure definitions any level depth also allows most kinds definitions declarations inside subroutines procedures functions this enables very simple coherent syntax where complete program syntactically nearly identical single procedure function except for heading which has one these three keywords implementations early pascal compilers first pascal compiler was designed zürich for cdc series mainframe computer family niklaus wirth reports that first attempt implement fortran was unsuccessful due fortran's inadequacy express complex data structures second attempt was formulated pascal language itself was operational by mid-1970 many pascal compilers since have been similarly self-hosting that compiler itself written pascal compiler usually capable recompiling itself when new features are added language when compiler be ported new environment gnu pascal compiler one notable exception being written c first successful port cdc pascal compiler another mainframe was completed by welsh quinn at queen's university belfast qub target was icl series this compiler turn was parent pascal compiler for information computer systems ics multum minicomputer multum port was developed – with view using pascal systems programming language – by findlay cupples cavouras davis working at department computing science glasgow university thought that multum pascal which was completed summer may have been first 16-bit implementation completely new compiler was completed by welsh et al at qub offered source-language diagnostic feature incorporating profiling tracing type-aware formatted postmortem dumps that was implemented by findlay watt at glasgow university this implementation was ported icl series by team based at southampton university glasgow university standard pascal model implementation was also based on this compiler having been adapted by welsh hay at manchester university check rigorously for conformity bsi 6192/iso standard generate code for portable abstract machine first pascal compiler written north america was constructed at university illinois under donald b gillies for pdp-11 generated native machine code pascal-p system propagate language rapidly compiler porting kit was created zurich that included compiler that generated code for virtual stack machine ie code that lends itself reasonably efficient interpretation along with interpreter for that code – pascal-p system p-system compilers were termed pascal-p1 pascal-p2 pascal-p3 pascal-p4 pascal-p1 was first version pascal-p4 was last come from zurich version termed pascal-p1 was coined after fact for many different sources for pascal-p that existed compiler was redesigned enhance portability issued pascal-p2 this code was later enhanced become pascal-p3 with intermediate code backward compatible with pascal-p2 pascal-p4 which was not backward compatible pascal-p4 compiler/interpreter can still be run compiled on systems compatible with original pascal however only accepts subset pascal language pascal-p5 created outside zurich group accepts full pascal language includes iso compatibility ucsd pascal branched off pascal-p2 where kenneth bowles utilized create interpretive ucsd p-system ucsd p-system was one three operating systems available at launch original ibm personal computer ucsd pascal used intermediate code based on byte values thus was one earliest byte code compilers pascal-p1 through pascal-p4 was not but rather based on cdc bit word length compiler based on pascal-p4 compiler which created native binaries was released for ibm system/370 mainframe computer by australian atomic energy commission was called aaec pascal compiler after abbreviation name commission early 1980s watcom pascal was developed also for ibm system into 1990s pascal was still running on vax terminals at george mason university teach computer programming object pascal turbo pascal apple computer created its own lisa pascal for lisa workshop ported compiler apple macintosh mpw larry tesler consultation with niklaus wirth defined object pascal these extensions were incorporated both lisa pascal mac pascal compilers 1980s anders hejlsberg wrote blue label pascal compiler for nascom-2 reimplementation this compiler for ibm pc was marketed under names compas pascal polypascal before was acquired by borland renamed turbo pascal turbo pascal became hugely popular thanks aggressive pricing strategy having one first full-screen integrated development environments - very fast turnaround-time just seconds compile link run was written highly optimized entirely assembly language making smaller faster than much competition anders ported turbo pascal macintosh incorporated apple's object pascal extensions into turbo pascal these extensions were then added back into pc version turbo pascal for version at same time microsoft also implemented object pascal compiler turbo pascal had large influence on pascal community which began concentrating mainly on ibm pc late 1980s many pc hobbyists search structured replacement for basic used this product also began be adopted by professional developers around same time number concepts were imported from c let pascal programmers use c-based api microsoft windows directly these extensions included null-terminated strings pointer arithmetic function pointers address-of operator unsafe typecasts turbo pascal other derivatives with units module concepts are modular languages however does not provide nested module concept qualified import export specific symbols other variants super pascal was variant that added non-numeric labels return statement expressions names types universities wisconsin-madison zürich karlsruhe wuppertal developed pascal-sc pascal-xsc extensions for scientific computation compilers aimed at programming numerical computations tmt pascal first borland-compatible compiler for 32-bit dos protected mode os/2 win32 operating systems also tmt pascal language was first one which allowed function operator overloading development for pascal-sc started supporting iso pascal level but level support was added at later stage pascal-sc originally targeted z80 processor but was later rewritten for dos x86 pascal-xsc has at various times been ported unix linux sunos hp-ux aix microsoft/ibm dos with emx os/2 windows operating systems operates by generating intermediate c source code which then compiled native executable some pascal-sc language extensions have been adopted by gnu pascal pascal sol was designed around by french team implement unix-like systems named sol was standard pascal level-1 with parametrized array bounds but definition allowed alternative keywords predefined identifiers french language included few extensions ease system programming eg equivalent lseek sol team later on moved chorusos project design distributed operating system ip pascal was implementation pascal programming language using micropolis dos but was moved rapidly cp/m-80 running on z80 was moved machine types exists today windows/xp linux implementations system was brought up new level resulting language termed pascaline after pascal's calculator includes objects namespace controls dynamic arrays along with many other extensions generally features same functionality type protection c only such implementation that also compatible with original pascal implementation which standardized iso smart mobile studio was created by jon aasenden compiles his own dialect object pascal html5/javascript smart mobile studio has ide which includes visual component set its language unusual that incorporates extensions for javascript language language constructs pascal its original form purely procedural language includes traditional array algol-like control structures with reserved words such if then else while for so on however pascal also has many data structuring facilities other abstractions which were not included original algol like type definitions records pointers enumerations sets such constructs were part inherited inspired from simula algol niklaus wirth's own algol w suggestions by c r hoare pascal programs start with program keyword with list external file descriptors parameters not required turbo pascal etc then follows main block bracketed by begin end keywords semicolons separate statements full stop ie period ends whole program unit letter case ignored pascal source here example source code use for very simple hello world program program helloworldoutput begin write'hello world' {no required after last statement block - adding one adds null statement program} end data types type pascal several other popular programming languages defines variable such way that defines range values which variable capable storing also defines set operations that are permissible be performed on variables that type predefined types are data type type values which variable capable storing integer integer whole numbers real floating-point numbers boolean value true false char single character from ordered character set string group string characters range values allowed for each except boolean implementation defined functions are provided for some data conversions for conversion real integer following functions are available round which rounds integer using banker's rounding trunc rounds towards zero programmer has freedom define other commonly used data types eg byte string etc terms predefined types using pascal's type declaration facility for example type byte = signedbyte = string = packed array char often-used types like byte string are already defined many implementations subrange types subranges any ordinal data type any simple type except real can also be made var x y 'a''z' set types contrast with other programming languages from its time pascal supports set type var set1 set set2 set 'a''z' set fundamental concept for modern mathematics they may be used many algorithms such feature useful may be faster than equivalent construct language that does not support sets for example for many pascal compilers if i then executes faster than if i > i b do writeln'waiting' if > b then writeln'condition met' {no semicolon allowed} else writeln'condition not met' for i = do {no semicolon for single statements allowed} writeln'iteration ' i repeat = + until = case i write'zero' write'one' write'two' write'' end procedures functions pascal structures programs into procedures functions program mineoutput var i integer { -------------------- } procedure printj integer begin { proc } end { proc } { -------------------- } begin { program } printi end { program } procedures functions can nest any depth 'program' construct logical outermost block each procedure function can have its own declarations goto labels constants types variables other procedures functions which must all be that order this ordering requirement was originally intended allow efficient single-pass compilation however some dialects such embarcadero delphi strict ordering requirement declaration sections has been relaxed semicolons statement separators pascal adopted many language syntax features from algol language including use semicolon statement separator this contrast other languages such pl/i c etc which use semicolon statement terminator illustrated above examples no semicolon needed before end keyword record type declaration block case statement before until keyword repeat statement before else keyword if statement presence extra semicolon was not permitted early versions pascal however addition algol-like empty statements revised report later changes language iso now allow for optional semicolons most these cases semicolon still not permitted immediately before else keyword if statement because else follows single statement not statement sequence case nested ifs semicolon cannot be used avoid dangling else problem where inner if does not have else but outer if does by putatively terminating nested if with semicolon – this instead terminates both if clauses instead explicit beginend block must be used programmers usually include these extra semicolons out habit avoid changing last line statement sequence when new code appended resources compilers interpreters several pascal compilers interpreters are available for general use delphi embarcadero's formerly borland/codegear flagship rapid application development rad product uses object pascal language termed 'delphi' by borland descended from pascal create applications for windows os x ios android net support that existed from d8 through d2005 d2006 d2007 has been terminated replaced by new language prism which rebranded oxygene see below that not fully backwards compatible recent years unicode support generics were added d2009 d2010 delphi xe free pascal multi-platform compiler written object pascal self-hosting aimed at providing convenient powerful compiler both able compile legacy applications be means developing new ones distributed under gnu gpl while packages runtime library come under modified gnu lgpl apart from compatibility modes for turbo pascal delphi mac pascal also has its own procedural object-oriented syntax modes with support for extended features such operator overloading supports many platforms operating systems current versions also feature iso mode turbo51 free pascal compiler for family microcontrollers with turbo pascal syntax oxygene formerly known chrome object pascal compiler for net mono platforms was created sold by remobjects software sold for while by embarcadero backend compiler prism kylix was descendant delphi with support for linux operating system improved object library no longer supported compiler ide are available now for non-commercial use gnu pascal compiler gpc pascal compiler gnu compiler collection gcc compiler itself written c runtime library mostly pascal distributed under gnu general public license runs on many platforms operating systems supports ansi/iso standard languages has partial turbo pascal dialect support one more painful omissions absence 100% turbo pascal-compatible shortstring type support for borland delphi other language variations quite limited there some support for mac-pascal however dwscript aka delphiwebscript interpreter created by matthias ackermann hannes hernler current version runs dialect object pascal largely compatible with delphi but also supports language constructs elements introduced prism dwscript code can be embedded into delphi applications similar pascalscript compiled into standalone application using simplemobilestudio compiled into javascript code placed on web page dr pascal interpreter that runs standard pascal notable are visible execution mode that shows running program its variables extensive runtime error checking runs programs but does not emit separate executable binary runs on dos windows dos window old macintosh dr pascal's extended pascal compiler tested on dos windows nt virtual pascal was created by vitaly miryanov native os/2 compiler compatible with borland pascal syntax then had been commercially developed by fprint adding win32 support became freeware today can compile for win32 os/2 linux mostly compatible with borland pascal delphi development was canceled on april p4 compiler basis for many subsequent pascal-implemented-in-pascal compilers implements subset full pascal p5 compiler iso full pascal adaption p4 smart mobile studio pascal html5/javascript compiler turbo pascal was dominant pascal compiler for pcs during 1980s early 1990s popular both because its powerful extensions extremely short compilation times turbo pascal was compactly written could compile run debug all from memory without accessing disk slow floppy disk drives were common for programmers at time further magnifying turbo pascal's speed advantage currently older versions turbo pascal up are available for free download from borland's site ip pascal implements language pascaline named after pascal's calculator which highly extended pascal compatible with original pascal according iso features modules with namespace control including parallel tasking modules with semaphores objects dynamic arrays any dimensions that are allocated at runtime overloads overrides many other extensions ip pascal has built-in portability library that custom tailored pascal language for example standard text output application from 1970's original pascal can be recompiled work window even have graphical constructs added pascal-xt was created by siemens for their mainframe operating systems bs2000 sinix pocketstudio pascal subset compiler rad tool for palm os mc68xxx processors with some own extensions assist interfacing with palm os api resembles delphi lazarus with visual form designer object inspector source code editor midletpascal – pascal compiler ide that generates small fast java bytecode specifically designed create software for mobiles vector pascal vector pascal language for simd instruction sets such mmx amd now supporting all intel amd processors sony's playstation emotion engine morfik pascal allows development web applications entirely written object pascal both server browser side wdsibyl – visual development environment pascal compiler for win32 os/2 pp compiler compiler for palm os that runs directly on handheld computer cdc pascal compiler source code for first cdc pascal compiler pascal-s amigapascal free pascal-compiler for amiga-computer very extensive list can be found on pascaland site french but basically list with urls compilers there little barrier for non-francophones site pascal central mac centric pascal info advocacy site with rich collection article archives plus links many compilers tutorials may also be interest ides dev-pascal pascal ide that was designed borland delphi which supports free pascal gnu pascal backends lazarus free delphi-like visual cross-platform ide for rapid application development rad based on free pascal lazarus available for numerous platforms including linux freebsd mac os x microsoft windows libraries wol library for creating gui applications with free pascal compiler standards iso/iec pascal language was standardized international standard iec/iso several local country specific standards including american ansi/ieee770x397-1983 iso these two standards differed only that iso standard included level extension for conformant arrays array where boundaries array are not known until run time where ansi did not allow for this extension original wirth version language iso was revised iso correct various errors ambiguities found original document iso was stated be clarification wirth's language detailed by user manual report but was also notable for adding conformant array parameters level standard level being pascal without conformant arrays this addition was made at request c r hoare with approval niklaus wirth precipitating cause was that hoare wanted create pascal version nag numerical algorithms library which had originally been written fortran found that was not possible do so without extension that would allow array parameters varying size similar considerations motivated inclusion iso facility specify parameter types procedural functional parameters note that niklaus wirth himself referred language standard for example differentiate from machine specific features cdc compiler this language was documented pascal report second part pascal users manual report on large machines mainframes minicomputers pascal originated on standards were generally followed on ibm pc they were not on ibm pcs borland standards turbo pascal delphi have greatest number users thus typically important understand whether particular implementation corresponds original pascal language borland dialect ibm pc versions language began differ with advent ucsd pascal interpreted implementation that featured several extensions language along with several omissions changes many ucsd language features survive today including borland's dialect iso/iec extended pascal extended pascal standard was created iso/iec which identical technical content ieee/ansi 770x3160-1989 variations niklaus wirth's zurich version pascal was issued outside eth two basic forms cdc compiler source porting kit called pascal-p system pascal-p compiler left out several features full language for example procedures functions used parameters undiscriminated variant records packing dispose interprocedural gotos other features full compiler were omitted ucsd pascal under professor kenneth bowles was based on pascal-p2 kit consequently shared several pascal-p language restrictions ucsd pascal was later adopted apple pascal continued through several versions there although ucsd pascal actually expanded subset pascal pascal-p kit by adding back standard pascal constructs was still not complete standard installation pascal early 1990s alan burns geoff davies developed pascal-fc extension pl/0 from niklaus' book 'algorithms+data structures=programs' several constructs were added use pascal-fc teaching tool for concurrent programming such semaphores monitors channels remote-invocation resources be able demonstrate concurrency compiler output kind p-code could then be executed on virtual machine this virtual machine not only simulated normal – fair – environment but could also simulate extreme conditions unfair mode borland-like pascal compilers borland's turbo pascal written by anders hejlsberg was written assembly language independent ucsd zurich compilers however adopted much same subset extensions ucsd compiler this probably because ucsd system was most common pascal system suitable for developing applications on resource-limited microprocessor systems available at that time shrink-wrapped turbo pascal version later incarnations including borland's object pascal delphi non-borland near-compatibles became popular with programmers including shareware authors so swag library pascal code features large amount code written with such versions delphi mind software products compilers interactive/rapid development environments with compilers this category turbo pascal - turboexe up version turbo pascal for windows tpw turbo pascal for macintosh borland pascal essentially turbo pascal for windows object pascal - extension pascal language that was developed at apple computer by team led by larry tesler consultation with niklaus wirth inventor pascal its features were added borland's turbo pascal for macintosh for turbo pascal for dos delphi - object pascal essentially its underlying language free pascal fpc - free pascal adopted de facto standard dialect pascal programmers borland pascal later delphi borland kylix compiler integrated development environment ide formerly sold by borland but later discontinued linux version borland delphi software development environment c++builder lazarus - similar kylix function free cross-platform visual integrated development environment ide for rapid application development rad using free pascal compiler which supports dialects object pascal varying degrees virtual pascal - vp2/1 fully borland pascal borland delphi compatible 32-bit pascal compiler for os/2 win with linux version on way sybil open source delphi-like ide compiler implementations include wdsibyl for microsoft windows os/2 commercial borland pascal compatible environment released by company called speedsoft that was later developed into delphi like rad environment called sybil then open sourced under gpl when that company closed down open sybil ongoing project open source pascal rad rapid application development tool for os/2 ecs that was originally based on speedsoft's wdsybl spcc sibyl portable component classes svde sibyl visual development tool sources but now core som wps opendoc list related standards iso 8651-21988 information processing systems – computer graphics – graphical kernel system gks language bindings – part pascal reception pascal generated wide variety responses computing community both critical complimentary early criticism while very popular 1980s early 1990s implementations pascal that closely followed wirth's initial definition language were widely criticized for being unsuitable for use outside teaching brian kernighan who popularized c language outlined his most notable criticisms pascal early his paper why pascal not my favorite programming language most serious problem described his article was that array sizes string lengths were part type so was not possible write function that would accept variable length arrays even strings parameters this made unfeasible write for example sorting library author also criticized unpredictable order evaluation boolean expressions poor library support lack static variables raised number smaller issues also he stated that language did not provide any simple constructs escape knowingly forcibly ignore restrictions limitations more general complaints from other sources noted that scope declarations was not clearly defined original language definition which sometimes had serious consequences when using forward declarations define pointer types when record declarations led mutual recursion when identifier may may not have been used enumeration list another difficulty was that like algol language did not allow procedures functions passed parameters predefine expected type their parameters most kernighan's criticisms were directly addressed paper pascal programming language specifically under myth pascal not for serious programmers despite initial criticisms pascal continued evolve most kernighan's points do not apply versions language which were enhanced be suitable for commercial product development such borland's turbo pascal kernighan predicted his article most extensions fix these issues were incompatible from compiler compiler since early 1990s however most varieties seem condensed into two categories iso borland-like extended pascal addresses many these early criticisms supports variable-length strings variable initialization separate compilation short-circuit boolean operators default otherwise clauses for case statements see also concurrent pascal comparison pascal borland delphi comparison pascal c modula-2 oberon programming language object pascal real programmers don't use pascal references we looked very carefully at delphi object pascal built working prototype bound method references order understand their interaction with java programming language its apis our conclusion was that bound method references are unnecessary detrimental language this decision was made consultation with borland international who had previous experience with bound method references delphi object pascal from about microsoft's delegates at javasuncom techmetrix research history java pdf java application servers report project went ahead under name green language was based on old model ucsd pascal which makes possible generate interpretive code conversation with james gosling - acm queue retrieved august essential pascal by marco cantù tiobecom programming community index for january hertzfeld andy hungarian folkloreorg macintosh stories retrieved interview with john brackett doug ross p15 charles babbage institute australian atomic energy commission research establishment lucas heights nuclear science technology branch report divisional research p22 international atomic energy agency ieae jon udell crash object-oriented pascals byte july mitrofimov end pascal byte march p36 doi101016/0898-12218790181-7 pi cadmus jetzt mit kulisch-arithmetik - uni karlsruhe gibt pascal-compiler nach münchen computerwoche german munich / karlsruhe germany idg business media gmbh archived from original on retrieved pascal-xsc pascal for extended scientific computing xsc software retrieved august universitaet wuppertal wissenschaftliches rechnen / softwaretechnologie retrieved august bamberger lothar davenport james h fischer hans-christoph kok jan schumacher günter ullrich christian wallis peter j l winter dik t wolff von gudenberg jürgen wallis peter j l ed improving floating-point programming 1st ed bath united kingdom john wiley & sons ltd isbn 0-471-92437-7 isbn 978-0-471-92437-1 michel gien sol operating system usenix summer '83 conference toronto on july pp 75-78 csberkeleyedu pascal iso b j welsh w j sneeringer c r hoare ambiguities insecurities pascal software practice experience pp 685–696 pascal nell dale chip weems dangling else p 160–161 flock-jscodegendemo7z - dwscript - flock dwscript / javascript codegen demo - delphi web script general purpose scripting engine - google project hosting retrieved august pascal-s subset its implementation n wirth pascal – language its implementation by dw barron wiley iso/iec pascal pdf retrieved september wirth niklaus july programming language pascal revised report pdf eth zürich retrieved september extended pascal iso/iec retrieved september language standards pascal extended pascal fortan archived from original on retrieved september 770x3160-1989 - ieee/ansi standard for programming language extended pascal retrieved september virtual pascal for os/2 retrieved april netlabsorg - project open sibyl retrieved april brian w kernighan why pascal not my favorite programming language o lecarme p desjardins more comments on programming language pascal acta informatica pp 231–243 pascal programming language pascal myths extended pascal further reading niklaus wirth programming language pascal 35–63 acta informatica volume c r hoare notes on data structuring o-j dahl e w dijkstra c r hoare editors structured programming pages 83–174 academic press c r hoare niklaus wirth axiomatic definition programming language pascal 335–355 acta informatica volume kathleen jensen niklaus wirth pascal – user manual report springer-verlag isbn 0-387-97649-3 isbn 3-540-97649-3 niklaus wirth algorithms + data structures = programs prentice-hall isbn 0-13-022418-9 niklaus wirth assessment programming language pascal 23–30 acm sigplan notices volume issue june n wirth i wasserman ed programming language design ieee computer society press d w barron ed pascal – language its implementation john wiley isbn 0-471-27835-1 peter grogono programming pascal revised edition addison-wesley richard s forsyth pascal work play chapman hall n wirth m broy ed e denert ed pascal its successors software pioneers contributions software engineering springer-verlag isbn 3-540-43081-4 n wirth recollections about development pascal acm sigplan notices volume no march external links wikimedia commons has media related pascal programming language wikibooks has book on topic pascal pascal programming language standard pascal – resources history original standard pascal free pascal scitech portal – with applications lazarus free pascal for science medicine technology pascal-p – pascal-p compiler versions pascal-p5 – pascal-p5 web page pascal-p5 source code – sourceforge project for p5 online vintage pascal8000 compiler – for small experiments v t e programming languages comparison timeline history assembly basic c c++ c cobol fortran go haskell java javascript js lisp lua objective-c pascal perl php python ruby shell smalltalk swift visual basic net vbnet more category comparison lists o alphabetical o categorical o generational o non-english-based v t e pascal programming language family dialects pascal object pascal pascal script oxygene clascal concurrent pascal superpascal compilers current delphi oxygene pocketstudio hp pascal ip pascal prospero pascal free pascal lazarus pascalabcnet gnu pascal turbo51 midletpascal pic micro pascal ack historic virtual pascal apple pascal turbo pascal microsoft pascal ucsd pascal jrt pascal/mt+ api clx fcl firemonkey lcl object windows library openwire rtl turbo vision visual component library comparison pascal c comparison pascal delphi related algol modula-2 ada oberon modula-3 oberon-2 component pascal v t e iso standards by standard number list iso standards / iso romanizations / iec standards 1–9999 o o o o o o o o o o o o o o o o o o o 1073-1 o o o 8820-5 o o o o o o o o o -8-i o o o o o o o o 9000/9001 10000–19999 10118-3 o o o o o tr 12234-2 o o 13406-2 o o o o o o o o o o o wip 16612-2 ts 19775-1 19794-5 20000+ series 29199-2 o o o category retrieved from https//enwikipediaorg/w/indexphptitle=pascalprogramminglanguage&oldid=752197422 categories computer science academic programming languages educational programming languages pascal programming language programming languages programming languages created programming languages with iso standard hidden categories cs1 german-language sources de pages using isbn magic links commons category with page title same on wikidata articles with example pascal code navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version other projects wikimedia commons wikibooks wikiquote languages afrikaans العربية aragonés azərbaycanca تۆرکجه bân-lâm-gú беларуская беларуская тарашкевіца‎ български boarisch bosanski català чӑвашла čeština dansk deutsch eesti ελληνικά español esperanto euskara فارسی français gaeilge galego 한국어 hrvatski bahasa indonesia íslenska italiano עברית қазақша кыргызча latina latviešu lietuvių magyar македонски bahasa melayu nederlands 日本語 norsk bokmål norsk nynorsk occitan oʻzbekcha/ўзбекча ਪੰਜਾਬੀ polski português română русский scots simple english slovenčina slovenščina српски / srpski srpskohrvatski / српскохрватски suomi svenska tagalog தமிழ் taqbaylit татарча/tatarça తెలుగు ไทย тоҷикӣ türkçe українська tiếng việt yorùbá 粵語 žemaitėška 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 