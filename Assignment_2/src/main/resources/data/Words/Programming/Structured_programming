structured programming from wikipedia free encyclopedia jump navigation search this article includes list references but its sources remain unclear because has insufficient inline citations please help improve this article by introducing more precise citations march learn how when remove this template message programming paradigms action agent-oriented array-oriented automata-based concurrent computing o relativistic programming data-driven declarative contrast imperative o constraint + constraint logic concurrent constraint logic o dataflow + flow-based + cell-oriented spreadsheets + reactive o functional + functional logic + purely functional o logic + abductive logic + answer set + concurrent logic + functional logic + inductive logic dynamic end-user programming event-driven o service-oriented o time-driven expression-oriented feature-oriented function-level contrast value-level generic imperative contrast declarative o literate o procedural inductive programming language-oriented o natural language programming o discipline-specific o domain-specific o grammar-oriented + dialecting o intentional metaprogramming o automatic o reflective + attribute-oriented o homoiconic o template + policy-based non-structured contrast structured o array nondeterministic parallel computing o process-oriented point-free style o concatenative semantic structured contrast non-structured o block-structured o modular contrast monolithic o object-oriented + actor-based + class-based + concurrent + prototype-based + by separation concerns aspect-oriented role-oriented subject-oriented o recursive value-level contrast function-level probabilistic concept v t e structured programming programming paradigm aimed at improving clarity quality development time computer program by making extensive use subroutines block structures for while loops—in contrast using simple tests jumps such go statement which could lead spaghetti code causing difficulty both follow maintain emerged late 1950s with appearance algol algol programming languages with latter including support for block structures contributing factors its popularity widespread acceptance at first academia later among practitioners include discovery what now known structured program theorem publication influential go statement considered harmful open letter by dutch computer scientist edsger w dijkstra who coined term structured programming structured programming most frequently used with deviations that allow for clearer programs some particular cases such when exception handling has be performed contents elements o control structures o subroutines o blocks structured programming languages history o theoretical foundation o debate o outcome common deviations o early exit o exception handling o multiple entry o state machines see also references external links elements control structures following structured program theorem all programs are seen composed control structures sequence ordered statements subroutines executed sequence selection one number statements executed depending on state program this usually expressed with keywords such ifthenelseendif iteration statement block executed until program reaches certain state operations have been applied every element collection this usually expressed with keywords such while repeat for dountil often recommended that each loop should only have one entry point original structural programming also only one exit point few languages enforce this recursion statement executed by repeatedly calling itself until termination conditions are met while similar practice iterative loops recursive loops may be more computationally efficient are implemented differently cascading stack graphical representations three basic patterns using ns diagrams blue flow charts green subroutines subroutines callable units such procedures functions methods subprograms are used allow sequence be referred by single statement blocks blocks are used enable groups statements be treated if they were one statement block-structured languages have syntax for enclosing structures some formal way such if-statement bracketed by iffi algol code section bracketed by beginend pl/i whitespace indentation python - curly braces {} c many later languages structured programming languages possible do structured programming any programming language though preferable use something like procedural programming language some languages initially used for structured programming include algol pascal pl/i ada – but most new procedural programming languages since that time have included features encourage structured programming sometimes deliberately left out features – notably goto – effort make unstructured programming more difficult structured programming sometimes known modular programming subset imperative programming that enforces logical structure on program being written make more efficient easier understand modify history theoretical foundation structured program theorem provides theoretical basis structured programming states that three ways combining programs—sequencing selection iteration—are sufficient express any computable function this observation did not originate with structured programming movement these structures are sufficient describe instruction cycle central processing unit well operation turing machine therefore processor always executing structured program this sense even if instructions reads from memory are not part structured program however authors usually credit result paper by böhm jacopini possibly because dijkstra cited this paper himself structured program theorem does not address how write analyze usefully structured program these issues were addressed during late 1960s early 1970s with major contributions by dijkstra robert w floyd tony hoare ole-johan dahl david gries debate p j plauger early adopter structured programming described his reaction structured program theorem us converts waved this interesting bit news under noses unreconstructed assembly-language programmers who kept trotting forth twisty bits logic saying 'i betcha can't structure this' neither proof by böhm jacopini nor our repeated successes at writing structured code brought them around one day sooner than they were ready convince themselves donald knuth accepted principle that programs must be written with provability mind but he disagreed still disagrees with abolishing goto statement his paper structured programming with goto statements he gave examples where he believed that direct jump leads clearer more efficient code without sacrificing provability knuth proposed looser structural constraint should be possible draw program's flow chart with all forward branches on left all backward branches on right no branches crossing each other many those knowledgeable compilers graph theory have advocated allowing only reducible flow graphs structured programming theorists gained major ally 1970s after ibm researcher harlan mills applied his interpretation structured programming theory development indexing system for new york times research file project was great engineering success managers at other companies cited support adopting structured programming although dijkstra criticized ways that mills's interpretation differed from published work late was still possible raise question structured programming computer science journal frank rubin did so that year with open letter titled goto considered harmful considered harmful numerous objections followed including response from dijkstra that sharply criticized both rubin concessions other writers made when responding him outcome by end 20th century nearly all computer scientists were convinced that useful learn apply concepts structured programming high-level programming languages that originally lacked programming structures such fortran cobol basic now have them common deviations while goto has now largely been replaced by structured constructs selection if/then/else repetition while for few languages are purely structured most common deviation found many languages use return statement for early exit from subroutine this results multiple exit points instead single exit point required by structured programming there are other constructions handle cases that are awkward purely structured programming early exit most common deviation from structured programming early exit from function loop at level functions this return statement at level loops this break statement terminate loop continue statement terminate current iteration proceed with next iteration structured programming these can be replicated by adding additional branches tests but for returns from nested code this can add significant complexity c early prominent example these constructs some newer languages also have labeled breaks which allow breaking out more than just innermost loop exceptions also allow early exit but have further consequences thus are treated below multiple exits can arise for variety reasons most often either that subroutine has no more work do if returning value has completed calculation has encountered exceptional circumstances that prevent from continuing hence needing exception handling most common problem early exit that cleanup final statements are not executed – for example allocated memory not deallocated open files are not closed causing memory leaks resource leaks these must be done at each return site which brittle can easily result bugs for instance later development return statement could be overlooked by developer action which should be performed at end subroutine eg trace statement might not be performed all cases languages without return statement such standard pascal don't have this problem most modern languages provide language-level support prevent such leaks see detailed discussion at resource management most commonly this done via unwind protection which ensures that certain code guaranteed be run when execution exits block this structured alternative having cleanup block goto this most often known tryfinally considered part exception handling various techniques exist encapsulate resource management alternative approach found primarily c++ resource acquisition initialization which uses normal stack unwinding variable deallocation at function exit call destructors on local variables deallocate resources kent beck martin fowler co-authors have argued their refactoring books that nested conditionals may be harder understand than certain type flatter structure using multiple exits predicated by guard clauses their book flatly states that one exit point really not useful rule clarity key principle if method clearer with one exit point use one exit point otherwise don’t they offer cookbook solution for transforming function consisting only nested conditionals into sequence guarded return throw statements followed by single unguarded block which intended contain code for common case while guarded statements are supposed deal with less common ones with errors herb sutter andrei alexandrescu also argue their c++ tips book that single-exit point obsolete requirement his textbook david watt writes that single-entry multi-exit control flows are often desirable using tennent's framework notion sequencer watt uniformly describes control flow constructs found contemporary programming languages attempts explain why certain types sequencers are preferable others context multi-exit control flows watt writes that unrestricted gotos jump sequencers are bad because destination jump not self-explanatory reader program until reader finds examines actual label address that target jump contrast watt argues that conceptual intent return sequencer clear from its own context without having examine its destination watt writes that class sequencers known escape sequencers defined sequencer that terminates execution textually enclosing command procedure encompasses both breaks from loops including multi-level breaks return statements watt also notes that while jump sequencers gotos have been somewhat restricted languages like c where target must be inside local block encompassing outer block that restriction alone not sufficient make intent gotos c self-describing so they can still produce spaghetti code watt also examines how exception sequencers differ from escape jump sequencers this explained next section this article contrast above bertrand meyer wrote his textbook that instructions like break continue are just old goto sheep's clothing strongly advised against their use exception handling based on coding error from ariane disaster software developer jim bonang argues that any exceptions thrown from function violate single-exit paradigm propose that all inter-procedural exceptions should be forbidden c++ syntax this done by declaring all function signatures throw bonang proposes that all single-exit conforming c++ should be written along lines bool mycheck1 throw { bool success = false try { // do something that may throw exceptions ifmycheck2 == false { throw someinternalexception } // other code similar above success = true } catch { // all exceptions caught logged } return success } peter ritchie also notes that principle even single throw right before return function constitutes violation single-exit principle but argues that dijkstra's rules were written time before exception handling became paradigm programming languages so he proposes allow any number throw points addition single return point he notes that solutions which wrap exceptions for sake creating single-exit have higher nesting depth thus are more difficult comprehend even accuses those who propose apply such solutions programming languages which support exceptions engaging cargo cult thinking david watt also analyzes exception handling framework sequencers introduced this article previous section on early exits watt notes that abnormal situation generally exemplified with arithmetic overflows input/output failures like file not found kind error that detected some low-level program unit but handler more naturally located high-level program unit for example program might contain several calls read files but action perform when file not found depends on meaning purpose file question program thus handling routine for this abnormal situation cannot be located low-level system code watts further notes that introducing status flags testing caller single-exit structured programming even multi-exit return sequencers would entail results situation where application code tends get cluttered by tests status flags that programmer might forgetfully lazily omit test status flag fact abnormal situations represented by status flags are by default ignored he notes that contrast status flags testing exceptions have opposite default behavior causing program terminate unless programmer explicitly deals with exception some way possibly by adding code willfully ignore based on these arguments watt concludes that jump sequencers escape sequencers discussed previous section aren't suitable dedicated exception sequencer with semantics discussed above textbook by louden lambert emphasizes that exception handling differs from structured programming constructs like while loops because transfer control set up at different point program than that where actual transfer takes place at point where transfer actually occurs there may be no syntactic indication that control will fact be transferred computer science professor arvind kumar bansal also notes that languages which implement exception handling even control structures like for which have single-exit property absence exceptions no longer have presence exceptions because exception can prematurely cause early exit any part control structure for instance if init throws exception for init check increm then usual exit point after check not reached citing multiple prior studies by others 1999-2004 their own results westley weimer george necula wrote that significant problem with exceptions that they create hidden control-flow paths that are difficult for programmers reason about827 necessity limit code single-exit points appears some contemporary programming environments focused on parallel computing such openmp various parallel constructs from openmp like parallel do do not allow early exits from inside outside parallel construct this restriction includes all manner exits from break c++ exceptions but all these are permitted inside parallel construct if jump target also inside multiple entry further information coroutine more rarely subprograms allow multiple entry this most commonly only re-entry into coroutine generator/semicoroutine where subprogram yields control possibly value but can then be resumed where left off there are number common uses such programming notably for streams particularly input/output state machines concurrency from code execution point view yielding from coroutine closer structured programming than returning from subroutine subprogram has not actually terminated will continue when called again – not early exit however coroutines mean that multiple subprograms have execution state – rather than single call stack subroutines – thus introduce different form complexity very rare for subprograms allow entry arbitrary position subprogram this case program state such variable values uninitialized ambiguous this very similar goto state machines some programs particularly parsers communications protocols have number states that follow each other way that not easily reduced basic structures some programmers including knuth implement state-changes with jump new state this type state-switching often used linux kernel however possible structure these systems by making each state-change separate subprogram using variable indicate active state see trampoline alternatively these can be implemented via coroutines which dispense with trampoline see also drakon minimal evaluation nassi–shneiderman diagram structure chart switch statement references clark leslie b wilson robert g robert clark comparative programming languages 3rd ed harlow england addison-wesley p isbn retrieved november bohm corrado giuseppe jacopini may flow diagrams turing machines languages with only two formation rules communications acm 366–371 doi101145/355592365646 dijkstra unbridled use go statement has immediate consequence that becomes terribly hard find meaningful set coordinates which describe process progress go statement stands just too primitive too much invitation make mess one's program dijkstra e w march letters editor go statement considered harmful communications acm 147–148 doi101145/362929362947 issn 0001-0782 plauger p j february programming on purpose essays on software design ed prentice-hall p isbn 978-0-13-721374-0 donald knuth - structured programming with go statements frank rubin march goto considered harmful considered harmful pdf communications acm 195–196 doi 101145/214748315722 archived from original pdf on elder jackson & liblit jay fields shane harvie martin fowler kent beck refactoring ruby edition pearson education pp 274–279 isbn 978-0-321-60350-0 herb sutter andrei alexandrescu c++ coding standards rules guidelines best practices pearson education isbn 978-0-13-265442-5 example single entry single exit sese historically some coding standards have required that each function have exactly one exit meaning one return statement such requirement obsolete languages that support exceptions destructors where functions typically have numerous implicit exits david anthony watt william findlay programming language design concepts john wiley & sons pp 215–221 isbn 978-0-470-85320-7 bertrand meyer touch class learning program well with objects contracts springer science & business media p isbn 978-3-540-92144-8 david anthony watt william findlay programming language design concepts john wiley & sons pp 221–222 isbn 978-0-470-85320-7 kenneth c louden kenneth lambert programming languages principles practices ed cengage learning p isbn 1-111-52941-8 arvind kumar bansal introduction programming languages crc press p isbn 978-1-4665-6514-2 weimer w & necula gc exceptional situations program reliability pdf acm transactions on programming languages systems vol rohit chandra parallel programming openmp morgan kaufmann p isbn 978-1-55860-671-5 edsger dijkstra notes on structured programming pg böhm c jacopini g may flow diagrams turing machines languages with only two formation rules communications acm 366–371 doi101145/355592365646 dijkstra edsger w march letters editor go statement considered harmful pdf communications acm 147–148 doi 101145/362929362947 michael jackson principles program design academic press london o-j dahl e w dijkstra c r hoare structured programming academic press london isbn 0-12-200550-3 o this volume includes expanded version notes on structured programming above including extended example using structured approach develop backtracking algorithm solve queens problem o pdf version acm classic books series o note that third chapter this book by dahl describes approach which easily recognized object oriented programming can be seen another way usefully structure program aid showing that correct elder matt jackson steve liblit ben october code sandwiches pdf technical report university wisconsin–madison abstract external links wikibook computer programming has page on topic control bpstruct - tool structure concurrent systems programs process models j darlinton m ghanem h w structured parallel programming programming models for massively parallel computers ieee computer society press authority control lccn sh85129214 gnd 4058133-0 bnf cb11966709k data bne xx531013 retrieved from https//enwikipediaorg/w/indexphptitle=structuredprogramming&oldid=746497264 categories programming paradigms holism edsger w dijkstra hidden categories articles lacking in-text citations from march all articles lacking in-text citations all articles with unsourced statements articles with unsourced statements from january wikipedia articles needing clarification from april all articles with specifically marked weasel-worded phrases articles with specifically marked weasel-worded phrases from may articles with unsourced statements from july articles with unsourced statements from december wikipedia articles with lccn identifiers wikipedia articles with gnd identifiers wikipedia articles with bnf identifiers pages using isbn magic links navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages العربية български català čeština dansk deutsch eesti español فارسی français galego 한국어 hrvatski bahasa indonesia italiano latina lietuvių magyar македонски bahasa melayu nederlands 日本語 norsk bokmål polski português română русиньскый русский српски / srpski suomi svenska தமிழ் türkçe українська tiếng việt 中文 edit links this page was last modified on october at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 