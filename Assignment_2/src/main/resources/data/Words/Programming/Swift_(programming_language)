swift programming language from wikipedia free encyclopedia jump navigation search this article about apple programming language for parallel scripting language see swift parallel scripting language for other uses see swift disambiguation this article contains wording that promotes subject subjective manner without imparting real information please remove replace such wording instead making proclamations about subject's importance use facts attribution demonstrate that importance june learn how when remove this template message swift paradigm multi-paradigm protocol-oriented object-oriented functional imperative block structured designed by chris lattner apple inc developer apple inc first appeared june years ago stable release / october days ago preview release preview / september months ago typing discipline static strong inferred os darwin linux freebsd license apache license swift later proprietary up swift filename extensions swift website swiftorg influenced by c clu d haskell objective-c python rust ruby influenced ruby rust swift general-purpose multi-paradigm compiled programming language developed by apple inc for ios macos watchos tvos linux swift designed work with apple's cocoa cocoa touch frameworks large body extant objective-c objc code written for apple products swift intended be more resilient erroneous code safer than objective-c more concise built with llvm compiler framework included xcode later on platforms other than linux uses objective-c runtime library which allows c objective-c c++ swift code run within one program swift supports core concepts that made objective-c flexible notably dynamic dispatch widespread late binding extensible programming similar features these features also have well known performance safety trade-offs which swift was designed address for safety swift introduced system that helps address common programming errors like null pointers introduced syntactic sugar avoid pyramid doom that can result for performance issues apple has invested considerable effort aggressive optimization that can flatten out method calls accessors eliminate this overhead more fundamentally swift has added concept protocol extensibility extensibility system that can be applied types structs classes apple promotes this real change programming paradigms they term protocol-oriented programming swift was introduced at apple's worldwide developers conference wwdc underwent upgrade version during more major upgrade swift at wwdc initially proprietary language version was made open-source software made available under apache license on december for apple's platforms linux ibm announced its swift sandbox website which allows developers write swift code one pane display output another second free implementation swift that targets cocoa microsoft's common language infrastructure net java android platform exists part elements compiler from remobjects software since language open-source there are prospects being ported web some web frameworks have already been developed such ibm's kitura perfect vapor official server apis work group has also been started by apple with members swift developer community playing central role contents history features o types variables scoping o optionals chaining o value types o protocol-oriented programming o libraries runtime development o memory management o debugging other elements o similarities c o similarities objective-c o differences from objective-c example code see also references external links history development on swift was begun july by chris lattner with eventual collaboration many other programmers at apple swift took language ideas from objective-c rust haskell ruby python c clu far too many others list on june apple worldwide developers conference wwdc application became first publicly released app written swift beta version programming language was released registered apple developers at conference but company did not promise that final version swift would be source code compatible with test version apple planned make source code converters available if needed for full release swift programming language free 500-page manual was also released at wwdc available on ibooks store official website swift reached milestone on september with gold master xcode for ios swift was released on october alongside launch xcode swift was released on april along with xcode swift was announced at wwdc was made available for publishing apps app store september swift was released on september swift won first place for most loved programming language stack overflow developer survey second place during wwdc apple announced ipad exclusive app named swift playgrounds that will easily teach people how code swift app presented video game-like interface which provides feedback when lines code are placed certain order executed features swift alternative objective-c language that employs modern programming-language theory concepts strives present simpler syntax during its introduction was described simply objective-c without c by default swift does not expose pointers other unsafe accessors contrast objective-c which uses pointers pervasively refer object instances also objective-c's use smalltalk-like syntax for making method calls has been replaced with dot-notation style namespace system more familiar programmers from other common object-oriented oo languages like java c swift introduces true named parameters retains key objective-c concepts including protocols closures categories often replacing former syntax with cleaner versions allowing these concepts be applied other language structures like enumerated types enums types variables scoping under cocoa cocoa touch environments many common classes were part foundation kit library this included nsstring string library using unicode nsarray nsdictionary collection classes others objective-c provided various bits syntactic sugar allow some these objects be created on-the-fly within language but once created objects were manipulated with object calls for instance concatenating two nsstrings required method calls similar this nsstring str = @hello str = swift many these basic types have been promoted language's core can be manipulated directly for instance strings are invisibly bridged nsstring when foundation imported can now be concatenated with + operator allowing greatly simplified syntax prior example becoming var str = hello str += world swift supports five access control levels for symbols open public internal fileprivate private unlike many object-oriented languages these access controls ignore inheritance hierarchies private indicates that symbol accessible only immediate scope fileprivate indicates accessible only from within file internal indicates accessible within containing module public indicates accessible from any module open only for classes their methods indicates that class may be subclassed outside module optionals chaining important new feature swift option types which allow references values operate manner similar common pattern c where pointer may refer value may be null this implies that non-optional types cannot result null-pointer error compiler can ensure this not possible optional types are created with optional mechanism—to make integer that nullable one would use declaration similar var optionalinteger optional c swift also includes syntactic sugar for this allowing one indicate variable optional by placing question mark after type name var optionalinteger int variables constants that are marked optional either have value underlying type are nil optional types wrap base type resulting different instance string string are fundamentally different types latter has more common with int than string access value inside assuming not nil must be unwrapped expose instance inside this performed with operator let myvalue = anoptionalinstancesomemethod this case operator unwraps anoptionalinstance expose instance inside allowing method call be made on if anoptionalinstance nil null-pointer error occurs this can be annoying practice so swift also includes concept optional chaining test whether instance nil then unwrap if non-null let myvalue = anoptionalinstancesomemethod this case runtime only calls somemethod if anoptionalinstance not nil suppressing error normally this requires programmer test whether myvalue nil before proceeding origin term chaining comes from more common case where several method calls/getters are chained together for instance let atenant = abuildingtenantlist let theirlease = atenantleasedetails let leasestart = theirleasestartdate can be reduced let leasestart = abuildingtenantlistleasedetailsstartdate syntax allows pyramid doom be avoided swift introduced new keyword guard for cases which code should stop executing if some condition unmet guard let leasestart = abuildingtenantlistleasedetailsstartdate else { //handle error case where anything chain nil //else scope must exit current method loop } //continue on knowing that leasestart not nil using guard has three benefits while syntax can act if statement its primary benefit inferring non-nullability where if statement requires case guard assumes case based on condition provided also since guard contains no scope with exception else closure leasestart presented unwrapped optional guard's super-scope lastly if guard statement's test fails swift requires else exit current method loop ensuring leasestart never accessed when nil this performed with keywords return continue break objc was weakly typed allowed any method be called on any object at any time if method call failed there was default handler runtime that returned nil that meant that no unwrapping testing was needed equivalent statement objc leasestart = leasedetails] startdate] would return nil this could be tested however this also demanded that all method calls be dynamic which introduces significant overhead swift's use optionals provides similar mechanism for testing dealing with nils but does so way that allows compiler use static dispatch because unwrapping action called on defined instance wrapper versus occurring runtime dispatch system value types many object-oriented languages objects are represented internally two parts object stored block data placed on heap while name handle that object represented by pointer objects are passed between methods by copying value pointer allowing same underlying data on heap be accessed by anyone with copy contrast basic types like integers floating point values are represented directly handle contains data not pointer that data passed directly methods by copying both styles access are termed pass-by-reference case objects pass-by-value for basic types both concepts have their advantages disadvantages objects are useful when data large like description window contents document these cases access that data provided by copying 32- 64-bit value versus copying entire data structure however smaller values like integers are same size pointers typically both are one word so there no advantage passing pointer versus passing value also pass-by-reference inherently requires dereferencing operation which can produce noticeable overhead some operations typically those used with these basic value types like mathematics similarly c contrast most other oo languages swift offers built-in support for objects using either pass-by-reference pass-by-value semantics former using class declaration latter using struct structs swift have almost all same features classes methods implementing protocols using extension mechanisms for this reason apple terms all data generically instances versus objects values structs do not support inheritance however programmer free choose which semantics are more appropriate for each data structure application larger structures like windows would be defined classes allowing them be passed around pointers smaller structures like point can be defined structs which will be pass-by-value allow direct access their internal data with no dereference performance improvement inherent pass-by-value concept such that swift uses these types for almost all common data types including int double types normally represented by objects like string array using value types can result significant performance improvements user applications also ensure that even largest structs do not cause performance penalty when they are handed off swift uses copy on write so that objects are copied only if when program attempts change value them this means that various accessors have what effect pointer same data storage but this takes place far below level language computer's memory management unit mmu so while data physically stored one instance memory at level application these values are separate physical separation enforced by copy on write only if needed protocol-oriented programming key feature objc its support for categories methods that can be added extend classes at runtime categories allow extending classes in-place add new functions with no need subclass even have access original source code example might be add spell checker support base nsstring class which means all instances nsstring application gain spell checking system also widely used organizational technique allowing related code be gathered into library-like extensions swift continues support this concept although they are now termed extensions declared with keyword extension unlike objc swift can also add new properties types enums extant instances another key feature objc its use protocols known most modern languages interfaces protocols promise that particular class implements set methods meaning that other objects system can call those methods on any object supporting that protocol this often used modern oo languages substitute for multiple inheritance although feature sets are not entirely similar common example protocol cocoa nscopying protocol which defines one method copywithzone that implements deep copying on objects objc most other languages implementing protocol concept up programmer ensure that required methods are implemented each class swift adds ability add these methods using extensions use generic programming generics implement them combined these allow protocols be written once support wide variety instances also extension mechanism can be used add protocol conformance object that does not list that protocol its definition for example protocol might be declared called supportstostring which ensures that instances that conform protocol implement tostring method that returns string swift this can be declared with code like this protocol supportstostring { func tostring -> string } this protocol can now be added string with no access base class's source extension string supportstostring { func tostring -> string { return self } } swift like many modern languages supporting interfaces protocols can be used types which means variables methods can be defined by protocol instead their specific type var somesortofprintableobject supportstostring printsomesortofprintableobjecttostring does not matter what sort instance somesortofprintableobject compiler will ensure that conforms protocol thus this code safe this syntax also means that collections can be based on protocols also like let printablearray = swift treats structs classes similar concepts both extensions protocols are extensively used swift's runtime provide rich api based on structs for instance swift uses extension add equatable protocol many their basic types like strings arrays allowing them be compared with == operator concrete example how all these features interact can be seen concept default protocol implementations func =lhs t rhs t -> bool this function defines method that works on any instance conforming equatable providing not equals function any instance class struct automatically gains this implementation simply by conforming equatable many instances gain equatable through their base implementations other generic extensions most basic objects runtime gain equals not equals with no code this combination protocols defaults protocol inheritance extensions allows many functions normally associated with classes inheritance be implemented on value types properly used this can lead dramatic performance improvements with no significant limits api this concept so widely used within swift that apple has begun calling protocol-oriented programming language they suggest addressing many problem domains normally solved though classes inheritance using protocols structs instead libraries runtime development swift uses same runtime extant objective-c system but requires ios macos higher swift objective-c code can be used one program by extension c c++ also contrast c c++ code cannot be used directly from swift objective-c c wrapper must be created between swift c++ case objective-c swift has considerable access object model can be used subclass extend use objective-c code provide protocol support converse not true swift class cannot be subclassed objective-c aid development such programs re-use extant code xcode offers semi-automated system that builds maintains bridging header expose objective-c code swift this takes form additional header file that simply defines imports all objective-c symbols that are needed by project's swift code at that point swift can refer types functions variables declared those imports though they were written swift objective-c code can also use swift code directly by importing automatically maintained header file with objective-c declarations project's swift symbols for instance objective-c file mixed project called myapp could access swift classes functions with code import myapp-swifth not all symbols are available through this mechanism however—use swift-specific features like generic types non-object optional types sophisticated enums even unicode identifiers may render symbol inaccessible from objective-c swift also has limited support for attributes metadata that read by development environment not necessarily part compiled code like objective-c attributes use @ syntax but currently available set small one example @iboutlet attribute which marks given value code outlet available for use within interface builder ib outlet device that binds value on-screen display object code memory management swift uses automatic reference counting arc manage memory apple used require manual memory management objective-c but introduced arc allow for easier memory allocation deallocation one problem with arc possibility creating strong reference cycle where instances two different classes each include reference other causing them become leaked into memory they are never released swift provides keywords weak unowned prevent strong reference cycles typically parent-child relationship would use strong reference while child-parent would use either weak reference where parents children can be unrelated unowned where child always has parent but parent may not have child weak references must be optional variables since they can change become nil closure within class can also create strong reference cycle by capturing self references self references be treated weak unowned can be indicated using capture list debugging other elements key element swift system its ability be cleanly debugged run within development environment using read–eval–print loop repl giving interactive properties more common with scripting abilities python than traditional system programming languages repl further enhanced with new concept playgrounds these are interactive views running within xcode environment that respond code debugger changes on-the-fly if some code changes over time with regard some other ranged input value view can be used with timeline assistant demonstrate output animated way apple claims that swift first industrial-quality systems programming language that expressive enjoyable scripting language similarities c most c operators are used swift but there are some new operators curly braces are used group statements variables are assigned using equals sign but compared using two consecutive equals signs new identity operator === provided check if two data elements refer same object control statements while if switch are similar but have extended functions eg switch that takes non-integer cases while if supporting pattern matching conditionally unwrapping optionals etc similarities objective-c basic numeric types int uint float double square brackets are used with arrays both declare them get value at given index one them class methods are inherited like instance methods self class methods class method was called on similar for…in enumeration syntax differences from objective-c statements do not need end with semicolons though these must be used allow more than one statement on line no header files uses type inference generic programming functions are first-class objects enumeration cases can have associated data algebraic data types operators can be redefined for classes operator overloading new operators can be defined strings fully support unicode most unicode characters can be used either identifiers operators no exception handling swift introduces different incompatible error-handling model several notoriously error-prone behaviors earlier c-family languages have been changed o pointers are not exposed by default there no need for programmer keep track mark names for referencing dereferencing o assignments return no value this prevents common error writing i = instead i == by throwing compile-time error o no need use break statements switch blocks individual cases do not fall through next case unless fallthrough statement used o variables constants are always initialized array bounds are always checked o integer overflows which result undefined behavior for signed integers c are trapped run-time error swift programmers can choose allow overflows by using special arithmetical operators &+ &- & &/ &% properties min max are defined swift for all integer types can be used safely check for potential overflows versus relying on constants defined for each type external libraries o one-statement form if while which allows for omission braces around statement unsupported o c-style enumeration for int i = i func sayhellopersonname string -> string { let greeting = hello \personname return greeting } // prints hello dilan printsayhellopersonname dilan // parameter names can be made external required // for calling // external name can be same parameter // name by doubling up // - can be defined separately func sayagepersonname personname string personage age int -> string { let result = \personname \age years old return result } // we can also specify name parameter printsayagepersonname dilan personage see also apple inc portal computer programming portal comparison programming languages python programming language objective c references swift has reached apple september retrieved march swift objectively swift proprietary closed entirely controlled by apple there no open source implementation lattner chris june re open positions apple's swift compiler team retrieved june you can imagine that many us want be open source part llvm but discussion hasn't happened yet won't for some time lattner chris chris lattner's homepage chris lattner retrieved swift language product tireless effort from team language experts documentation gurus compiler optimization ninjas incredibly important internal dogfooding group who provided feedback help refine battle-test ideas course also greatly benefited from experiences hard-won by many other languages field drawing ideas from objective-c rust haskell ruby python c clu far too many others list b lattner chris june chris lattner's homepage chris lattner retrieved june i started work on swift programming language july i implemented much basic language structure with only few people knowing its existence few other amazing people started contributing earnest late became major focus for apple developer tools group july drawing ideas from objective-c rust haskell ruby python c clu far too many others list building assert swift part file line retrieved september ruby on heroku with matz retrieved january i’m excited about safe navigation operator “lonely operator” it’s similar what we see other programming languages like swift groovy— makes simple handle exceptions rfc for `if let` expression retrieved december 'if let' construct based on precedent set by swift which introduced its own 'if let' statement swift linux port swiftorg apple inc retrieved august timmer john june fast look at swift apple's new programming language ars technica condé nast retrieved june protocol-oriented programming swift apple inc youtube williams owen june tim berners-lee's sixtieth birthday apple announces swift new programming language for ios next web retrieved june apple's new programming language swift now open source verge retrieved apple open sources swift latest pitch enterprise cio journal wall street journal blogs retrieved registration required help introducing ibm swift sandbox - swift swift retrieved mayo benjamin write swift code web browser with ibm swift sandbox 9to5mac retrieved after apple open sources ibm puts swift programming cloud | zdnet zdnet retrieved remobjects elements compiler retrieved barbosa greg ibm brings swift cloud releases web framework kitura written apple's programming language 9to5mac retrieved kitura - swift swift retrieved server-side swift - perfect inc apple server apis work group swiftorg retrieved inc apple swiftorg swiftorg retrieved b platforms state union session apple worldwide developers conference june swift programming language apple june retrieved june lay summary swift has reached september retrieved september xcode release notes october retrieved january xcode release notes april retrieved april swift apps app store - swift blog developerapplecom retrieved inc apple swift released swiftorg retrieved stack overflow developer survey results stack overflow developer survey results swift playgrounds - apple developer developerapplecom retrieved swift playgrounds - preview apple retrieved mayo benjamin apple announces swift playgrounds for ipad at wwdc public release fall 9to5mac retrieved metz rachel june apple seeks swift way lure more developers technology review weber harrison june apple announces 'swift' new programming language for macos & ios venturebeat strings characters developerapplecom apple inc retrieved july access control developerapplecom apple inc retrieved october nullable types c programming guide microsoft types developerapplecom apple inc retrieved july b classes structures applecom guhit fiel performance case study on swift swift objective-c building better apps with value types apple b c nscopying protocol reference apple working with protocols apple thompson mattt september swift default protocol implementations nshipster do swift-based apps work on macos 109/ios lower stackoverflow using swift with cocoa objective-c basic setup applecom january writing swift classes with objective-c behavior apple inc migrating your objective-c code swift swift objective-c same project apple inc automatic reference counting apple inc lanier brian groff joe intermediate swift apple retrieved july metz cade why coders are going nuts over apple's new programming language wired retrieved july about swift apple inc error-handling swift-language stackoverflowcom apple/swift-evolution github retrieved apple/swift-evolution github retrieved external links official website swift at apple developer swift's source code on github v t e programming languages comparison timeline history assembly basic c c++ c cobol fortran go haskell java javascript js lisp lua objective-c pascal perl php python ruby shell smalltalk swift visual basic net vbnet more category comparison lists o alphabetical o categorical o generational o non-english-based v t e apple inc software os darwin ios o version history o o o o o o o o o o macos o public beta o cheetah o puma o jaguar o panther o tiger o leopard o snow leopard o lion o mountain lion o mavericks o yosemite o el capitan o sierra tvos watchos consumer ibooks author icloud ilife o imovie o garageband iwork o keynote o pages o numbers professional filemaker final cut studio o final cut pro x o motion o compressor logic studio o logic pro o mainstage bundled calendar itunes o history mail messages photo booth photos quicktime safari o version history textedit server apple remote desktop macos server webobjects xsan developer dashcode instruments interface builder quartz composer xcode iad producer discontinued mac aperture appleworks bento classic mac os o system o o o o color dvd studio pro final cut express front row hypercard ichat idvd iphoto iweb logic express macdraw macpaint macproject macterminal macwrite mobileme resedit shake soundtrack pro retrieved from https//enwikipediaorg/w/indexphptitle=swiftprogramminglanguage&oldid=751230203 categories programming languages apple inc object-oriented programming languages software using apache license statically typed programming languages systems programming languages pattern matching programming languages computer-related introductions programming languages created hidden categories pages with login required references sources articles with peacock terms from june all articles with peacock terms use mdy dates from october navigation menu personal tools not logged talk contributions create account log namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create book download pdf printable version languages العربية български català čeština deutsch español فارسی français 한국어 bahasa indonesia íslenska italiano עברית magyar bahasa melayu nederlands 日本語 norsk bokmål polski português русский slovenčina српски / srpski svenska türkçe українська tiếng việt 粵語 中文 edit links this page was last modified on november at text available under creative commons attribution-sharealike license additional terms may apply by using this site you agree terms use privacy policy wikipedia® registered trademark wikimedia foundation inc non-profit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 